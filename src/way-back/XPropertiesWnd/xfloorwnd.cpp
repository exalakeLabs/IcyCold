// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "xfloorwnd.h"

// Dispatch interfaces referenced by this interface
#include "Font.h"

/////////////////////////////////////////////////////////////////////////////
// CXFloorWnd

IMPLEMENT_DYNCREATE(CXFloorWnd, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CXFloorWnd properties

OLE_COLOR CXFloorWnd::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CXFloorWnd::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

BOOL CXFloorWnd::GetAnimation()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CXFloorWnd::SetAnimation(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

long CXFloorWnd::GetSleep()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CXFloorWnd::SetSleep(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

BOOL CXFloorWnd::GetSign()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CXFloorWnd::SetSign(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

CString CXFloorWnd::GetPages()
{
	CString result;
	GetProperty(0x4, VT_BSTR, (void*)&result);
	return result;
}

void CXFloorWnd::SetPages(LPCTSTR propVal)
{
	SetProperty(0x4, VT_BSTR, propVal);
}

COleFont CXFloorWnd::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CXFloorWnd::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

BOOL CXFloorWnd::GetAsPage()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CXFloorWnd::SetAsPage(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CXFloorWnd operations

short CXFloorWnd::AddPage(LPCTSTR sName)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		sName);
	return result;
}

BOOL CXFloorWnd::DeletePage(short nIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nIndex);
	return result;
}

CString CXFloorWnd::GetPageName(short nIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		nIndex);
	return result;
}

short CXFloorWnd::GetPage(LPCTSTR lpszPageName)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		lpszPageName);
	return result;
}

BOOL CXFloorWnd::ActivatePage(short nIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nIndex);
	return result;
}

BOOL CXFloorWnd::AttachWindow(short nIndex, long pWnd)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nIndex, pWnd);
	return result;
}

BOOL CXFloorWnd::SetPageName(short nIndex, LPCTSTR lpszPageName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nIndex, lpszPageName);
	return result;
}

void CXFloorWnd::Init()
{
	InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short CXFloorWnd::GetHeight(short nIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x15, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		nIndex);
	return result;
}

void CXFloorWnd::SetHeight(short nIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x15, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, nNewValue);
}

unsigned long CXFloorWnd::GetColor(short nIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x16, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		nIndex);
	return result;
}

void CXFloorWnd::SetColor(short nIndex, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x16, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, newValue);
}

long CXFloorWnd::GetUserData(short nIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x17, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		nIndex);
	return result;
}

void CXFloorWnd::SetUserData(short nIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x17, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, nNewValue);
}

short CXFloorWnd::GetActivePage()
{
	short result;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

long CXFloorWnd::GetPagesCount()
{
	long result;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL CXFloorWnd::IsPage(short nIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nIndex);
	return result;
}

long CXFloorWnd::GetLeftTopPage(short nIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nIndex);
	return result;
}

long CXFloorWnd::GetBottomRightPage(short nIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nIndex);
	return result;
}

void CXFloorWnd::StyleAs(BOOL bAsFloor)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bAsFloor);
}

long CXFloorWnd::GetHWnd(long nIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nIndex);
	return result;
}

void CXFloorWnd::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

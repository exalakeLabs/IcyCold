//  Wrapper class(es) generated by Dynamo!
//  This file was generated at 10:29:05 on 09/26/1997
//  by DynamoCL - Version 1.07
//  ***************************************************************************

//
//  D:\ml\c-cpp\vao_inc\Visiwrap.h - C++ Wrappers for Type Library "Visio"
//  Copyright (C) 1996-97 Visio Corporation. All rights reserved.
//

//  ***************************************************************************
//  'Sentinel'

#ifndef _Visiwrap_H
#define _Visiwrap_H

#define _Visio_WRAPPERS
#define _Visio_WRAPPERS_VERSION 0x00040006

//  ***************************************************************************
//  Contents of header.h

//  Start D:\ml\bat\header.vis
#include <windows.h>
#include <ole2.h>

#if !defined (_WIN32)
	#include <dispatch.h>
#endif

//	for Visio's dual OLE Automation interfaces
#include "visio.h"

//	for CoCreateAddonSink -- Event stuff
#include "addsink.h"

//
//	Define these so the old files are not included after
//	this one accidentally...
//
#define _IVISPROX_H
#define _IVISPROX_HPP
#define NO_VISIO_41_COMPATIBILITY_LAYER

//
//
#define CVisioChars CVisioCharacters
#define CVisioEvents CVisioEventList

//
//	Include the BSTR and VARIANT helper classes:
//
#ifndef HELPERS_____
#include "helpers.h"
#endif  //  HELPERS_____

//  End D:\ml\bat\header.vis


//  ***************************************************************************
//  Macros

#ifndef VW_INTERFACE_NOT_SET
#define VW_INTERFACE_NOT_SET    MAKE_HRESULT(SEVERITY_ERROR, 0x06a5, 0x4001);
#endif  //  VW_INTERFACE_NOT_SET

#ifndef VW_NOT_IMPLEMENTED_IN_THIS_VERSION
#define VW_NOT_IMPLEMENTED_IN_THIS_VERSION    MAKE_HRESULT(SEVERITY_ERROR, 0x06a5, 0x4002);
#endif  //  VW_NOT_IMPLEMENTED_IN_THIS_VERSION

#ifndef CHECK_IP
#define CHECK_IP(ip, className, methName)
#endif  //  CHECK_IP

#ifndef CHECK_HRESULT
#define CHECK_HRESULT(hr, className, methName)
#endif  //  CHECK_HRESULT

#ifndef VW_CONST
#define VW_CONST const
#endif  //  VW_CONST

#ifndef VW_INLINE
#define VW_INLINE inline
#endif  //  VW_INLINE

#ifndef FAR
#define FAR
#endif  //  FAR

#ifndef VW_PUBLIC
#define VW_PUBLIC public
#endif  //  VW_PUBLIC

#ifndef VW_PROTECTED
#define VW_PROTECTED protected
#endif  //  VW_PROTECTED

#ifndef VW_PRIVATE
#define VW_PRIVATE private
#endif  //  VW_PRIVATE


//  ***************************************************************************
//  Forward declarations and typedefs

class FAR CVisioUnknown;

class FAR CVisioApplication;
class FAR CVisioCell;
class FAR CVisioCharacters;
class FAR CVisioConnect;
class FAR CVisioConnects;
class FAR CVisioDocument;
class FAR CVisioDocuments;
class FAR CVisioMaster;
class FAR CVisioMasters;
class FAR CVisioPage;
class FAR CVisioPages;
class FAR CVisioSelection;
class FAR CVisioShape;
class FAR CVisioShapes;
class FAR CVisioStyle;
class FAR CVisioStyles;
class FAR CVisioWindow;
class FAR CVisioWindows;
class FAR CVisioLayer;
class FAR CVisioLayers;
class FAR CVisioFont;
class FAR CVisioFonts;
class FAR CVisioColor;
class FAR CVisioColors;
class FAR CVisioAddon;
class FAR CVisioAddons;
class FAR CVisioEvent;
class FAR CVisioEventList;
class FAR CVisioGlobal;
class FAR CVisioEDocument;
class FAR CVisioEApplication;
class FAR CVisioEWindows;
class FAR CVisioEWindow;
class FAR CVisioEDocuments;
class FAR CVisioEStyles;
class FAR CVisioEStyle;
class FAR CVisioEMasters;
class FAR CVisioEMaster;
class FAR CVisioEPages;
class FAR CVisioEPage;
class FAR CVisioEShape;
class FAR CVisioECharacters;
class FAR CVisioECell;
class FAR CVisioMenuItem;
class FAR CVisioIEnumVMenuItem;
class FAR CVisioMenuItems;
class FAR CVisioMenu;
class FAR CVisioIEnumVMenu;
class FAR CVisioMenus;
class FAR CVisioMenuSet;
class FAR CVisioIEnumVMenuSet;
class FAR CVisioMenuSets;
class FAR CVisioToolbarItem;
class FAR CVisioIEnumVToolbarItem;
class FAR CVisioToolbarItems;
class FAR CVisioToolbar;
class FAR CVisioIEnumVToolbar;
class FAR CVisioToolbars;
class FAR CVisioToolbarSet;
class FAR CVisioIEnumVToolbarSet;
class FAR CVisioToolbarSets;
class FAR CVisioStatusBarItem;
class FAR CVisioIEnumVStatusBarItem;
class FAR CVisioStatusBarItems;
class FAR CVisioStatusBar;
class FAR CVisioIEnumVStatusBar;
class FAR CVisioStatusBars;
class FAR CVisioAccelItem;
class FAR CVisioIEnumVAccelItem;
class FAR CVisioAccelItems;
class FAR CVisioAccelTable;
class FAR CVisioIEnumVAccelTable;
class FAR CVisioAccelTables;
class FAR CVisioUIObject;
class FAR CVisioHyperlink;
class FAR CVisioOLEObjects;
class FAR CVisioOLEObject;
class FAR CVisioPaths;
class FAR CVisioPath;
class FAR CVisioCurve;
class FAR CVisioExtender;
class FAR CVisioDispExtender;
class FAR CVisioAmbients;


#ifndef VISIO_LPS_FORWARD_DECLARED
#define VISIO_LPS_FORWARD_DECLARED

interface IVApplication;
typedef IVApplication FAR *LPVISIOAPPLICATION;

interface IVCell;
typedef IVCell FAR *LPVISIOCELL;

interface IVCharacters;
typedef IVCharacters FAR *LPVISIOCHARACTERS;

interface IVConnect;
typedef IVConnect FAR *LPVISIOCONNECT;

interface IVConnects;
typedef IVConnects FAR *LPVISIOCONNECTS;

interface IVDocument;
typedef IVDocument FAR *LPVISIODOCUMENT;

interface IVDocuments;
typedef IVDocuments FAR *LPVISIODOCUMENTS;

interface IVMaster;
typedef IVMaster FAR *LPVISIOMASTER;

interface IVMasters;
typedef IVMasters FAR *LPVISIOMASTERS;

interface IVPage;
typedef IVPage FAR *LPVISIOPAGE;

interface IVPages;
typedef IVPages FAR *LPVISIOPAGES;

interface IVSelection;
typedef IVSelection FAR *LPVISIOSELECTION;

interface IVShape;
typedef IVShape FAR *LPVISIOSHAPE;

interface IVShapes;
typedef IVShapes FAR *LPVISIOSHAPES;

interface IVStyle;
typedef IVStyle FAR *LPVISIOSTYLE;

interface IVStyles;
typedef IVStyles FAR *LPVISIOSTYLES;

interface IVWindow;
typedef IVWindow FAR *LPVISIOWINDOW;

interface IVWindows;
typedef IVWindows FAR *LPVISIOWINDOWS;

interface IVLayer;
typedef IVLayer FAR *LPVISIOLAYER;

interface IVLayers;
typedef IVLayers FAR *LPVISIOLAYERS;

interface IVFont;
typedef IVFont FAR *LPVISIOFONT;

interface IVFonts;
typedef IVFonts FAR *LPVISIOFONTS;

interface IVColor;
typedef IVColor FAR *LPVISIOCOLOR;

interface IVColors;
typedef IVColors FAR *LPVISIOCOLORS;

interface IVAddon;
typedef IVAddon FAR *LPVISIOADDON;

interface IVAddons;
typedef IVAddons FAR *LPVISIOADDONS;

interface IVEvent;
typedef IVEvent FAR *LPVISIOEVENT;

interface IVEventList;
typedef IVEventList FAR *LPVISIOEVENTLIST;

interface IVGlobal;
typedef IVGlobal FAR *LPVISIOGLOBAL;

interface EDocument;
typedef EDocument FAR *LPVISIOEDOCUMENT;

interface EApplication;
typedef EApplication FAR *LPVISIOEAPPLICATION;

interface EWindows;
typedef EWindows FAR *LPVISIOEWINDOWS;

interface EWindow;
typedef EWindow FAR *LPVISIOEWINDOW;

interface EDocuments;
typedef EDocuments FAR *LPVISIOEDOCUMENTS;

interface EStyles;
typedef EStyles FAR *LPVISIOESTYLES;

interface EStyle;
typedef EStyle FAR *LPVISIOESTYLE;

interface EMasters;
typedef EMasters FAR *LPVISIOEMASTERS;

interface EMaster;
typedef EMaster FAR *LPVISIOEMASTER;

interface EPages;
typedef EPages FAR *LPVISIOEPAGES;

interface EPage;
typedef EPage FAR *LPVISIOEPAGE;

interface EShape;
typedef EShape FAR *LPVISIOESHAPE;

interface ECharacters;
typedef ECharacters FAR *LPVISIOECHARACTERS;

interface ECell;
typedef ECell FAR *LPVISIOECELL;

interface IVMenuItem;
typedef IVMenuItem FAR *LPVISIOMENUITEM;

interface IEnumVMenuItem;
typedef IEnumVMenuItem FAR *LPVISIOIENUMVMENUITEM;

interface IVMenuItems;
typedef IVMenuItems FAR *LPVISIOMENUITEMS;

interface IVMenu;
typedef IVMenu FAR *LPVISIOMENU;

interface IEnumVMenu;
typedef IEnumVMenu FAR *LPVISIOIENUMVMENU;

interface IVMenus;
typedef IVMenus FAR *LPVISIOMENUS;

interface IVMenuSet;
typedef IVMenuSet FAR *LPVISIOMENUSET;

interface IEnumVMenuSet;
typedef IEnumVMenuSet FAR *LPVISIOIENUMVMENUSET;

interface IVMenuSets;
typedef IVMenuSets FAR *LPVISIOMENUSETS;

interface IVToolbarItem;
typedef IVToolbarItem FAR *LPVISIOTOOLBARITEM;

interface IEnumVToolbarItem;
typedef IEnumVToolbarItem FAR *LPVISIOIENUMVTOOLBARITEM;

interface IVToolbarItems;
typedef IVToolbarItems FAR *LPVISIOTOOLBARITEMS;

interface IVToolbar;
typedef IVToolbar FAR *LPVISIOTOOLBAR;

interface IEnumVToolbar;
typedef IEnumVToolbar FAR *LPVISIOIENUMVTOOLBAR;

interface IVToolbars;
typedef IVToolbars FAR *LPVISIOTOOLBARS;

interface IVToolbarSet;
typedef IVToolbarSet FAR *LPVISIOTOOLBARSET;

interface IEnumVToolbarSet;
typedef IEnumVToolbarSet FAR *LPVISIOIENUMVTOOLBARSET;

interface IVToolbarSets;
typedef IVToolbarSets FAR *LPVISIOTOOLBARSETS;

interface IVStatusBarItem;
typedef IVStatusBarItem FAR *LPVISIOSTATUSBARITEM;

interface IEnumVStatusBarItem;
typedef IEnumVStatusBarItem FAR *LPVISIOIENUMVSTATUSBARITEM;

interface IVStatusBarItems;
typedef IVStatusBarItems FAR *LPVISIOSTATUSBARITEMS;

interface IVStatusBar;
typedef IVStatusBar FAR *LPVISIOSTATUSBAR;

interface IEnumVStatusBar;
typedef IEnumVStatusBar FAR *LPVISIOIENUMVSTATUSBAR;

interface IVStatusBars;
typedef IVStatusBars FAR *LPVISIOSTATUSBARS;

interface IVAccelItem;
typedef IVAccelItem FAR *LPVISIOACCELITEM;

interface IEnumVAccelItem;
typedef IEnumVAccelItem FAR *LPVISIOIENUMVACCELITEM;

interface IVAccelItems;
typedef IVAccelItems FAR *LPVISIOACCELITEMS;

interface IVAccelTable;
typedef IVAccelTable FAR *LPVISIOACCELTABLE;

interface IEnumVAccelTable;
typedef IEnumVAccelTable FAR *LPVISIOIENUMVACCELTABLE;

interface IVAccelTables;
typedef IVAccelTables FAR *LPVISIOACCELTABLES;

interface IVUIObject;
typedef IVUIObject FAR *LPVISIOUIOBJECT;

interface IVHyperlink;
typedef IVHyperlink FAR *LPVISIOHYPERLINK;

interface IVOLEObjects;
typedef IVOLEObjects FAR *LPVISIOOLEOBJECTS;

interface IVOLEObject;
typedef IVOLEObject FAR *LPVISIOOLEOBJECT;

interface IVPaths;
typedef IVPaths FAR *LPVISIOPATHS;

interface IVPath;
typedef IVPath FAR *LPVISIOPATH;

interface IVCurve;
typedef IVCurve FAR *LPVISIOCURVE;

interface IVExtender;
typedef IVExtender FAR *LPVISIOEXTENDER;

interface IVDispExtender;
typedef IVDispExtender FAR *LPVISIODISPEXTENDER;

interface IVAmbients;
typedef IVAmbients FAR *LPVISIOAMBIENTS;

#endif  //  VISIO_LPS_FORWARD_DECLARED


//  ***************************************************************************
//  Root class declaration

//  If VW_ROOT_CLASS is defined, use it as the parent class of CVisioUnknown

#ifdef VW_ROOT_CLASS
class FAR CVisioUnknown : public VW_ROOT_CLASS
#else
class FAR CVisioUnknown
#endif  //  VW_ROOT_CLASS
{
VW_PUBLIC:
    CVisioUnknown() { m_pUnk= NULL; }

    CVisioUnknown(const CVisioUnknown FAR &other)
        {
        m_pUnk= NULL;
        CopyIP(other.GetUnknown());
        }

    CVisioUnknown(LPUNKNOWN lpIUnk, BOOL bAssumeResponsibility= FALSE)
        {
        if (bAssumeResponsibility)
            {
            //	Caller hereby transfers ownership of his refcount
            //	to this instance of the wrapper class. Caller must
            //	NOT release lpIUnk.
            m_pUnk= lpIUnk;
            }
        else
            {
            //	Caller wants us to AddRef; caller MUST release lpIUnk.
            m_pUnk= NULL;
            CopyIP(lpIUnk);
            }
        }

    const CVisioUnknown FAR & operator=(const CVisioUnknown FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioUnknown FAR & operator=(const LPUNKNOWN other)
        {
        if ( other != GetUnknown() )
            CopyIP(other);

        return *this;
        }

    virtual ~CVisioUnknown() { ReleaseIP(); }

    virtual BOOL IsSet() const { return ((NULL == GetUnknown()) ? FALSE : TRUE); }

    virtual UINT RefCount() const
        {
        UINT uc= 0xFFFFFFAA;    //  probably means m_pUnk==NULL
        if (NULL!=m_pUnk)
            {
            m_pUnk->AddRef();
            uc= m_pUnk->Release();
            }
        return uc;
        }

    virtual HRESULT QueryInterfaceIP(REFIID riid, void FAR * FAR * ppvObj)
        {
        //  If successful, callers MUST call (*(LPUNKNOWN *)ppvObj)->Release()
        //  This is merely a wrapper around the real QueryInterface.
        HRESULT hr= VW_INTERFACE_NOT_SET;
        CHECK_IP(m_pUnk, CVisioUnknown, QueryInterfaceIP);
        if (NULL!=m_pUnk)
            hr= m_pUnk->QueryInterface(riid, ppvObj);
        CHECK_HRESULT(hr, CVisioUnknown, QueryInterfaceIP);
        return hr;
        }

VW_PROTECTED:
    virtual void AddRefIP()
        {
        if ( NULL != m_pUnk )
            m_pUnk->AddRef();
        }

    virtual void ReleaseIP()
        {
        if ( NULL != m_pUnk )
            {
            m_pUnk->Release();
            m_pUnk = NULL;
            }
        }

    virtual void CopyIP(LPUNKNOWN pUnk)
        {
        if (m_pUnk!=pUnk)
            {
            ReleaseIP();
            m_pUnk = pUnk;
            AddRefIP();
            }
        }

    LPUNKNOWN GetUnknown() const
        {
        //  NO AddRef; Callers DO NOT Release!
        return m_pUnk;
        }

VW_PRIVATE:
    LPUNKNOWN m_pUnk;
};


//  ***************************************************************************
//  TypeLib Interface class declarations


//  ***************************************************************************
//  Declaration of class CVisioApplication

class FAR CVisioApplication : public CVisioUnknown
{
VW_PUBLIC:
    CVisioApplication()
        : CVisioUnknown() { }

    CVisioApplication(const CVisioApplication& other)
        : CVisioUnknown(other) { }

    CVisioApplication(const IVApplication FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioApplication FAR & operator=(const CVisioApplication FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioApplication FAR & operator=(const IVApplication FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioApplication() { }

    IVApplication FAR * GetIP() const { return (IVApplication FAR *) GetUnknown(); }

    operator IVApplication FAR * () { return (IVApplication FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT ActiveDocument(CVisioDocument FAR &rWrap);
    HRESULT ActivePage(CVisioPage FAR &rWrap);
    HRESULT ActiveWindow(CVisioWindow FAR &rWrap);
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT Documents(CVisioDocuments FAR &rWrap);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT getOnDataChangeDelay(long FAR *lpRet);
    HRESULT putOnDataChangeDelay(VW_CONST long param01);
    HRESULT ProcessID(long FAR *lpRet);
    HRESULT Quit();
    HRESULT Redo();
    HRESULT getScreenUpdating(short FAR *lpRet);
    HRESULT putScreenUpdating(VW_CONST short param01);
    HRESULT Stat(short FAR *lpRet);
    HRESULT Undo();
    HRESULT Version(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT WindowHandle(short FAR *lpRet);
    HRESULT Windows(CVisioWindows FAR &rWrap);
    HRESULT Language(long FAR *lpRet);
    HRESULT IsVisio16(short FAR *lpRet);
    HRESULT IsVisio32(short FAR *lpRet);
    HRESULT WindowHandle32(long FAR *lpRet);
    HRESULT InstanceHandle(short FAR *lpRet);
    HRESULT InstanceHandle32(long FAR *lpRet);
    HRESULT BuiltInMenus(CVisioUIObject FAR &rWrap);
    HRESULT BuiltInToolbars(short fIgnored, CVisioUIObject FAR &rWrap);
    HRESULT CustomMenus(CVisioUIObject FAR &rWrap);
    HRESULT SetCustomMenus(CVisioUIObject FAR &MenusObject);
    HRESULT getCustomMenusFile(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putCustomMenusFile(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT ClearCustomMenus();
    HRESULT CustomToolbars(CVisioUIObject FAR &rWrap);
    HRESULT SetCustomToolbars(CVisioUIObject FAR &ToolbarsObject);
    HRESULT getCustomToolbarsFile(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putCustomToolbarsFile(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT ClearCustomToolbars();
    HRESULT getAddonPaths(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putAddonPaths(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getDrawingPaths(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putDrawingPaths(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getFilterPaths(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putFilterPaths(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getHelpPaths(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putHelpPaths(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getStartupPaths(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putStartupPaths(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getStencilPaths(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putStencilPaths(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getTemplatePaths(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putTemplatePaths(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getUserName(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putUserName(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getPromptForSummary(short FAR *lpRet);
    HRESULT putPromptForSummary(VW_CONST short param01);
    HRESULT Addons(CVisioAddons FAR &rWrap);
    HRESULT SaveWorkspaceAs(BSTR_HELPER_CLASS FAR &FileName);
    HRESULT DoCmd(short CommandID);
    HRESULT ProfileName(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT EventInfo(long reservedPass0, BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT EventList(CVisioEventList FAR &rWrap);
    HRESULT PersistsEvents(short FAR *lpRet);
    HRESULT Active(short FAR *lpRet);
    HRESULT getDeferRecalc(short FAR *lpRet);
    HRESULT putDeferRecalc(VW_CONST short param01);
    HRESULT getAlertResponse(short FAR *lpRet);
    HRESULT putAlertResponse(VW_CONST short param01);
    HRESULT getShowProgress(short FAR *lpRet);
    HRESULT putShowProgress(VW_CONST short param01);
    HRESULT Vbe(IDispatch FAR *FAR *lpRet);
    HRESULT getShowMenus(short FAR *lpRet);
    HRESULT putShowMenus(VW_CONST short param01);
    HRESULT getToolbarStyle(short FAR *lpRet);
    HRESULT putToolbarStyle(VW_CONST short param01);
    HRESULT getShowStatusBar(short FAR *lpRet);
    HRESULT putShowStatusBar(VW_CONST short param01);
    HRESULT getEventsEnabled(short FAR *lpRet);
    HRESULT putEventsEnabled(VW_CONST short param01);
    HRESULT FormatResult(VARIANT_HELPER_CLASS FAR &StringOrNumber, VARIANT_HELPER_CLASS FAR &UnitsIn, VARIANT_HELPER_CLASS FAR &UnitsOut, BSTR_HELPER_CLASS FAR &Format, BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT ConvertResult(VARIANT_HELPER_CLASS FAR &StringOrNumber, VARIANT_HELPER_CLASS FAR &UnitsIn, VARIANT_HELPER_CLASS FAR &UnitsOut, double FAR *lpRet);
    HRESULT Path(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT EnumDirectories(BSTR_HELPER_CLASS FAR &PathsString, /*BSTR*/ SAFEARRAY FAR * FAR *NameArray);
    HRESULT getTraceFlags(long FAR *lpRet);
    HRESULT putTraceFlags(VW_CONST long param01);
    HRESULT PurgeUndo();
    HRESULT QueueMarkerEvent(BSTR_HELPER_CLASS FAR &ContextString, long FAR *lpRet);
    HRESULT getShowToolbar(short FAR *lpRet);
    HRESULT putShowToolbar(VW_CONST short param01);
};


//  ***************************************************************************
//  Declaration of class CVisioCell

class FAR CVisioCell : public CVisioUnknown
{
VW_PUBLIC:
    CVisioCell()
        : CVisioUnknown() { }

    CVisioCell(const CVisioCell& other)
        : CVisioUnknown(other) { }

    CVisioCell(const IVCell FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioCell FAR & operator=(const CVisioCell FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioCell FAR & operator=(const IVCell FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioCell() { }

    IVCell FAR * GetIP() const { return (IVCell FAR *) GetUnknown(); }

    operator IVCell FAR * () { return (IVCell FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Error(short FAR *lpRet);
    HRESULT getFormula(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putFormula(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT FormulaForce(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT GlueTo(CVisioCell FAR &CellObject);
    HRESULT GlueToPos(CVisioShape FAR &SheetObject, double xPercent, double yPercent);
    HRESULT getResult(VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, double FAR *lpRet);
    HRESULT putResult(VW_CONST VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, VW_CONST double param02);
    HRESULT ResultForce(VW_CONST VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, VW_CONST double param02);
    HRESULT getResultIU(double FAR *lpRet);
    HRESULT putResultIU(VW_CONST double param01);
    HRESULT ResultIUForce(VW_CONST double param01);
    HRESULT Stat(short FAR *lpRet);
    HRESULT Units(short FAR *lpRet);
    HRESULT Name(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT LocalName(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putRowName(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT Document(CVisioDocument FAR &rWrap);
    HRESULT Shape(CVisioShape FAR &rWrap);
    HRESULT Style(CVisioStyle FAR &rWrap);
    HRESULT Section(short FAR *lpRet);
    HRESULT Row(short FAR *lpRet);
    HRESULT Column(short FAR *lpRet);
    HRESULT IsConstant(short FAR *lpRet);
    HRESULT IsInherited(short FAR *lpRet);
    HRESULT ResultInt(VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, short fRound, long FAR *lpRet);
    HRESULT ResultFromInt(VW_CONST VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, VW_CONST long param02);
    HRESULT ResultFromIntForce(VW_CONST VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, VW_CONST long param02);
    HRESULT ResultStr(VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT Trigger();
    HRESULT getRowName(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT EventList(CVisioEventList FAR &rWrap);
    HRESULT PersistsEvents(short FAR *lpRet);
};


//  ***************************************************************************
//  Declaration of class CVisioCharacters

class FAR CVisioCharacters : public CVisioUnknown
{
VW_PUBLIC:
    CVisioCharacters()
        : CVisioUnknown() { }

    CVisioCharacters(const CVisioCharacters& other)
        : CVisioUnknown(other) { }

    CVisioCharacters(const IVCharacters FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioCharacters FAR & operator=(const CVisioCharacters FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioCharacters FAR & operator=(const IVCharacters FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioCharacters() { }

    IVCharacters FAR * GetIP() const { return (IVCharacters FAR *) GetUnknown(); }

    operator IVCharacters FAR * () { return (IVCharacters FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT AddCustomField(BSTR_HELPER_CLASS FAR &Formula, short Format);
    HRESULT AddField(short Category, short Code, short Format);
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT getBegin(long FAR *lpRet);
    HRESULT putBegin(VW_CONST long param01);
    HRESULT CharCount(long FAR *lpRet);
    HRESULT CharProps(VW_CONST short CellIndex, VW_CONST short param02);
    HRESULT CharPropsRow(short BiasLorR, short FAR *lpRet);
    HRESULT Copy();
    HRESULT Cut();
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT getEnd(long FAR *lpRet);
    HRESULT putEnd(VW_CONST long param01);
    HRESULT FieldCategory(short FAR *lpRet);
    HRESULT FieldCode(short FAR *lpRet);
    HRESULT FieldFormat(short FAR *lpRet);
    HRESULT FieldFormula(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT IsField(short FAR *lpRet);
    HRESULT ParaProps(VW_CONST short CellIndex, VW_CONST short param02);
    HRESULT ParaPropsRow(short BiasLorR, short FAR *lpRet);
    HRESULT Paste();
    HRESULT TabPropsRow(short BiasLorR, short FAR *lpRet);
    HRESULT RunBegin(short RunType, long FAR *lpRet);
    HRESULT RunEnd(short RunType, long FAR *lpRet);
    HRESULT Shape(CVisioShape FAR &rWrap);
    HRESULT Stat(short FAR *lpRet);
    HRESULT TextAsString(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putText(VW_CONST VARIANT_HELPER_CLASS FAR &param01);
    HRESULT Document(CVisioDocument FAR &rWrap);
    HRESULT EventList(CVisioEventList FAR &rWrap);
    HRESULT PersistsEvents(short FAR *lpRet);
    HRESULT getText(VARIANT_HELPER_CLASS FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioConnect

class FAR CVisioConnect : public CVisioUnknown
{
VW_PUBLIC:
    CVisioConnect()
        : CVisioUnknown() { }

    CVisioConnect(const CVisioConnect& other)
        : CVisioUnknown(other) { }

    CVisioConnect(const IVConnect FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioConnect FAR & operator=(const CVisioConnect FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioConnect FAR & operator=(const IVConnect FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioConnect() { }

    IVConnect FAR * GetIP() const { return (IVConnect FAR *) GetUnknown(); }

    operator IVConnect FAR * () { return (IVConnect FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT Stat(short FAR *lpRet);
    HRESULT FromSheet(CVisioShape FAR &rWrap);
    HRESULT ToSheet(CVisioShape FAR &rWrap);
    HRESULT FromCell(CVisioCell FAR &rWrap);
    HRESULT ToCell(CVisioCell FAR &rWrap);
    HRESULT FromPart(short FAR *lpRet);
    HRESULT ToPart(short FAR *lpRet);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Index(short FAR *lpRet);
    HRESULT Document(CVisioDocument FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioConnects

class FAR CVisioConnects : public CVisioUnknown
{
VW_PUBLIC:
    CVisioConnects()
        : CVisioUnknown() { }

    CVisioConnects(const CVisioConnects& other)
        : CVisioUnknown(other) { }

    CVisioConnects(const IVConnects FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioConnects FAR & operator=(const CVisioConnects FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioConnects FAR & operator=(const IVConnects FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioConnects() { }

    IVConnects FAR * GetIP() const { return (IVConnects FAR *) GetUnknown(); }

    operator IVConnects FAR * () { return (IVConnects FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT Item(short Index, CVisioConnect FAR &rWrap);
    HRESULT Count(short FAR *lpRet);
    HRESULT FromSheet(CVisioShape FAR &rWrap);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Document(CVisioDocument FAR &rWrap);
    HRESULT Stat(short FAR *lpRet);
    HRESULT ToSheet(CVisioShape FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioDocument

class FAR CVisioDocument : public CVisioUnknown
{
VW_PUBLIC:
    CVisioDocument()
        : CVisioUnknown() { }

    CVisioDocument(const CVisioDocument& other)
        : CVisioUnknown(other) { }

    CVisioDocument(const IVDocument FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioDocument FAR & operator=(const CVisioDocument FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioDocument FAR & operator=(const IVDocument FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioDocument() { }

    IVDocument FAR * GetIP() const { return (IVDocument FAR *) GetUnknown(); }

    operator IVDocument FAR * () { return (IVDocument FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT Stat(short FAR *lpRet);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT InPlace(short FAR *lpRet);
    HRESULT Masters(CVisioMasters FAR &rWrap);
    HRESULT Pages(CVisioPages FAR &rWrap);
    HRESULT Styles(CVisioStyles FAR &rWrap);
    HRESULT Name(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT Path(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT FullName(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT Drop(IUnknown FAR *ObjectToDrop, short xPos, short yPos, CVisioMaster FAR &rWrap);
    HRESULT Index(short FAR *lpRet);
    HRESULT getSaved(short FAR *lpRet);
    HRESULT putSaved(VW_CONST short param01);
    HRESULT ReadOnly(short FAR *lpRet);
    HRESULT Save(short FAR *lpRet);
    HRESULT SaveAs(BSTR_HELPER_CLASS FAR &FileName, short FAR *lpRet);
    HRESULT getVersion(long FAR *lpRet);
    HRESULT putVersion(VW_CONST long param01);
    HRESULT getTitle(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putTitle(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getSubject(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putSubject(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getCreator(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putCreator(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getKeywords(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putKeywords(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getDescription(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putDescription(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT Print();
    HRESULT Close();
    HRESULT CustomMenus(CVisioUIObject FAR &rWrap);
    HRESULT SetCustomMenus(CVisioUIObject FAR &MenusObject);
    HRESULT getCustomMenusFile(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putCustomMenusFile(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT ClearCustomMenus();
    HRESULT CustomToolbars(CVisioUIObject FAR &rWrap);
    HRESULT SetCustomToolbars(CVisioUIObject FAR &ToolbarsObject);
    HRESULT getCustomToolbarsFile(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putCustomToolbarsFile(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT ClearCustomToolbars();
    HRESULT Fonts(CVisioFonts FAR &rWrap);
    HRESULT Colors(CVisioColors FAR &rWrap);
    HRESULT EventList(CVisioEventList FAR &rWrap);
    HRESULT Template(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT SaveAsEx(BSTR_HELPER_CLASS FAR &FileName, short SaveFlags);
    HRESULT getSavePreviewMode(short FAR *lpRet);
    HRESULT putSavePreviewMode(VW_CONST short param01);
    HRESULT GetIcon(short ID, BSTR_HELPER_CLASS FAR &FileName);
    HRESULT SetIcon(short ID, short Index, BSTR_HELPER_CLASS FAR &FileName);
    HRESULT getLeftMargin(VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, double FAR *lpRet);
    HRESULT putLeftMargin(VW_CONST VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, VW_CONST double param02);
    HRESULT getRightMargin(VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, double FAR *lpRet);
    HRESULT putRightMargin(VW_CONST VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, VW_CONST double param02);
    HRESULT getTopMargin(VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, double FAR *lpRet);
    HRESULT putTopMargin(VW_CONST VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, VW_CONST double param02);
    HRESULT getBottomMargin(VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, double FAR *lpRet);
    HRESULT putBottomMargin(VW_CONST VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, VW_CONST double param02);
    HRESULT getPrintLandscape(short FAR *lpRet);
    HRESULT putPrintLandscape(VW_CONST short param01);
    HRESULT getPrintCenteredH(short FAR *lpRet);
    HRESULT putPrintCenteredH(VW_CONST short param01);
    HRESULT getPrintCenteredV(short FAR *lpRet);
    HRESULT putPrintCenteredV(VW_CONST short param01);
    HRESULT getPrintScale(double FAR *lpRet);
    HRESULT putPrintScale(VW_CONST double param01);
    HRESULT getPrintFitOnPages(short FAR *lpRet);
    HRESULT putPrintFitOnPages(VW_CONST short param01);
    HRESULT getPrintPagesAcross(short FAR *lpRet);
    HRESULT putPrintPagesAcross(VW_CONST short param01);
    HRESULT getPrintPagesDown(short FAR *lpRet);
    HRESULT putPrintPagesDown(VW_CONST short param01);
    HRESULT getDefaultStyle(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putDefaultStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getDefaultLineStyle(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putDefaultLineStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getDefaultFillStyle(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putDefaultFillStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getDefaultTextStyle(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putDefaultTextStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT PersistsEvents(short FAR *lpRet);
    HRESULT OpenStencilWindow(CVisioWindow FAR &rWrap);
    HRESULT ParseLine(BSTR_HELPER_CLASS FAR &Line);
    HRESULT ExecuteLine(BSTR_HELPER_CLASS FAR &Line);
    HRESULT VBProject(IDispatch FAR *FAR *lpRet);
    HRESULT PaperWidth(VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, double FAR *lpRet);
    HRESULT PaperHeight(VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, double FAR *lpRet);
    HRESULT getPaperSize(short FAR *lpRet);
    HRESULT putPaperSize(VW_CONST short param01);
    HRESULT FollowHyperlink45(BSTR_HELPER_CLASS FAR &Target, BSTR_HELPER_CLASS FAR &Location);
    HRESULT CodeName(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT getMode(short FAR *lpRet);
    HRESULT putMode(VW_CONST short param01);
    HRESULT OLEObjects(CVisioOLEObjects FAR &rWrap);
    HRESULT FollowHyperlink(BSTR_HELPER_CLASS FAR &Address, BSTR_HELPER_CLASS FAR &SubAddress, VARIANT_HELPER_CLASS FAR &ExtraInfo, VARIANT_HELPER_CLASS FAR &Frame, VARIANT_HELPER_CLASS FAR &NewWindow, VARIANT_HELPER_CLASS FAR &res1, VARIANT_HELPER_CLASS FAR &res2, VARIANT_HELPER_CLASS FAR &res3);
    HRESULT getManager(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putManager(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getCompany(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putCompany(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getCategory(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putCategory(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getHyperlinkBase(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putHyperlinkBase(VW_CONST BSTR_HELPER_CLASS FAR &param01);
};


//  ***************************************************************************
//  Declaration of class CVisioDocuments

class FAR CVisioDocuments : public CVisioUnknown
{
VW_PUBLIC:
    CVisioDocuments()
        : CVisioUnknown() { }

    CVisioDocuments(const CVisioDocuments& other)
        : CVisioUnknown(other) { }

    CVisioDocuments(const IVDocuments FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioDocuments FAR & operator=(const CVisioDocuments FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioDocuments FAR & operator=(const IVDocuments FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioDocuments() { }

    IVDocuments FAR * GetIP() const { return (IVDocuments FAR *) GetUnknown(); }

    operator IVDocuments FAR * () { return (IVDocuments FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Add(BSTR_HELPER_CLASS FAR &FileName, CVisioDocument FAR &rWrap);
    HRESULT Open(BSTR_HELPER_CLASS FAR &FileName, CVisioDocument FAR &rWrap);
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Item(VARIANT_HELPER_CLASS FAR &NameOrIndex, CVisioDocument FAR &rWrap);
    HRESULT Count(short FAR *lpRet);
    HRESULT OpenEx(BSTR_HELPER_CLASS FAR &FileName, short Flags, CVisioDocument FAR &rWrap);
    HRESULT EventList(CVisioEventList FAR &rWrap);
    HRESULT PersistsEvents(short FAR *lpRet);
    HRESULT GetNames(/*BSTR*/ SAFEARRAY FAR * FAR *NameArray);
};


//  ***************************************************************************
//  Declaration of class CVisioMaster

class FAR CVisioMaster : public CVisioUnknown
{
VW_PUBLIC:
    CVisioMaster()
        : CVisioUnknown() { }

    CVisioMaster(const CVisioMaster& other)
        : CVisioUnknown(other) { }

    CVisioMaster(const IVMaster FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioMaster FAR & operator=(const CVisioMaster FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioMaster FAR & operator=(const IVMaster FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioMaster() { }

    IVMaster FAR * GetIP() const { return (IVMaster FAR *) GetUnknown(); }

    operator IVMaster FAR * () { return (IVMaster FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Document(CVisioDocument FAR &rWrap);
    HRESULT getPrompt(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putPrompt(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getAlignName(short FAR *lpRet);
    HRESULT putAlignName(VW_CONST short param01);
    HRESULT getIconSize(short FAR *lpRet);
    HRESULT putIconSize(VW_CONST short param01);
    HRESULT getIconUpdate(short FAR *lpRet);
    HRESULT putIconUpdate(VW_CONST short param01);
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT Stat(short FAR *lpRet);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT getName(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putName(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT Shapes(CVisioShapes FAR &rWrap);
    HRESULT Index(short FAR *lpRet);
    HRESULT OneD(short FAR *lpRet);
    HRESULT Delete();
    HRESULT UniqueID(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT Layers(CVisioLayers FAR &rWrap);
    HRESULT PageSheet(CVisioShape FAR &rWrap);
    HRESULT Drop(IUnknown FAR *ObjectToDrop, double xPos, double yPos, CVisioShape FAR &rWrap);
    HRESULT CenterDrawing();
    HRESULT EventList(CVisioEventList FAR &rWrap);
    HRESULT PersistsEvents(short FAR *lpRet);
    HRESULT DrawLine(double xLeft, double yTop, double xRight, double yBottom, CVisioShape FAR &rWrap);
    HRESULT DrawRectangle(double xLeft, double yTop, double xRight, double yBottom, CVisioShape FAR &rWrap);
    HRESULT DrawOval(double xLeft, double yTop, double xRight, double yBottom, CVisioShape FAR &rWrap);
    HRESULT DrawSpline(/*double*/ SAFEARRAY FAR * FAR *xyArray, double Tolerance, short Flags, CVisioShape FAR &rWrap);
    HRESULT DrawBezier(/*double*/ SAFEARRAY FAR * FAR *xyArray, short degree, short Flags, CVisioShape FAR &rWrap);
    HRESULT DrawPolyline(/*double*/ SAFEARRAY FAR * FAR *xyArray, short Flags, CVisioShape FAR &rWrap);
    HRESULT Import(BSTR_HELPER_CLASS FAR &FileName, CVisioShape FAR &rWrap);
    HRESULT Export(BSTR_HELPER_CLASS FAR &FileName);
    HRESULT InsertFromFile(BSTR_HELPER_CLASS FAR &FileName, short Flags, CVisioShape FAR &rWrap);
    HRESULT InsertObject(BSTR_HELPER_CLASS FAR &ClassOrProgID, short Flags, CVisioShape FAR &rWrap);
    HRESULT OpenDrawWindow(CVisioWindow FAR &rWrap);
    HRESULT OpenIconWindow(CVisioWindow FAR &rWrap);
    HRESULT Open(CVisioMaster FAR &rWrap);
    HRESULT Close();
    HRESULT DropMany(/*VARIANT*/ SAFEARRAY FAR * FAR *ObjectsToInstance, /*double*/ SAFEARRAY FAR * FAR *xyArray, /*short*/ SAFEARRAY FAR * FAR *IDArray, short FAR *lpRet);
    HRESULT GetFormulas(/*short*/ SAFEARRAY FAR * FAR *SID_SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *formulaArray);
    HRESULT GetResults(/*short*/ SAFEARRAY FAR * FAR *SID_SRCStream, short Flags, /*VARIANT*/ SAFEARRAY FAR * FAR *UnitsNamesOrCodes, /*VARIANT*/ SAFEARRAY FAR * FAR *resultArray);
    HRESULT SetFormulas(/*short*/ SAFEARRAY FAR * FAR *SID_SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *formulaArray, short Flags, short FAR *lpRet);
    HRESULT SetResults(/*short*/ SAFEARRAY FAR * FAR *SID_SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *UnitsNamesOrCodes, /*VARIANT*/ SAFEARRAY FAR * FAR *resultArray, short Flags, short FAR *lpRet);
    HRESULT Connects(CVisioConnects FAR &rWrap);
    HRESULT ImportIcon(BSTR_HELPER_CLASS FAR &FileName);
    HRESULT ExportIcon(BSTR_HELPER_CLASS FAR &FileName, short Flags);
    HRESULT Layout();
    HRESULT BoundingBox(short Flags, double FAR *lpr8Left, double FAR *lpr8Bottom, double FAR *lpr8Right, double FAR *lpr8Top);
    HRESULT ID(short FAR *lpRet);
    HRESULT OLEObjects(CVisioOLEObjects FAR &rWrap);
    HRESULT getPatternFlags(short FAR *lpRet);
    HRESULT putPatternFlags(VW_CONST short param01);
    HRESULT getMatchByName(short FAR *lpRet);
    HRESULT putMatchByName(VW_CONST short param01);
};


//  ***************************************************************************
//  Declaration of class CVisioMasters

class FAR CVisioMasters : public CVisioUnknown
{
VW_PUBLIC:
    CVisioMasters()
        : CVisioUnknown() { }

    CVisioMasters(const CVisioMasters& other)
        : CVisioUnknown(other) { }

    CVisioMasters(const IVMasters FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioMasters FAR & operator=(const CVisioMasters FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioMasters FAR & operator=(const IVMasters FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioMasters() { }

    IVMasters FAR * GetIP() const { return (IVMasters FAR *) GetUnknown(); }

    operator IVMasters FAR * () { return (IVMasters FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Item(VARIANT_HELPER_CLASS FAR &NameUIDOrIndex, CVisioMaster FAR &rWrap);
    HRESULT Count(short FAR *lpRet);
    HRESULT Document(CVisioDocument FAR &rWrap);
    HRESULT Stat(short FAR *lpRet);
    HRESULT EventList(CVisioEventList FAR &rWrap);
    HRESULT PersistsEvents(short FAR *lpRet);
    HRESULT Add(CVisioMaster FAR &rWrap);
    HRESULT GetNames(/*BSTR*/ SAFEARRAY FAR * FAR *NameArray);
};


//  ***************************************************************************
//  Declaration of class CVisioPage

class FAR CVisioPage : public CVisioUnknown
{
VW_PUBLIC:
    CVisioPage()
        : CVisioUnknown() { }

    CVisioPage(const CVisioPage& other)
        : CVisioUnknown(other) { }

    CVisioPage(const IVPage FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioPage FAR & operator=(const CVisioPage FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioPage FAR & operator=(const IVPage FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioPage() { }

    IVPage FAR * GetIP() const { return (IVPage FAR *) GetUnknown(); }

    operator IVPage FAR * () { return (IVPage FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Document(CVisioDocument FAR &rWrap);
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT Stat(short FAR *lpRet);
    HRESULT getBackground(short FAR *lpRet);
    HRESULT putBackground(VW_CONST short param01);
    HRESULT Paste();
    HRESULT PasteSpecial(short Format);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT DrawLine(double xLeft, double yTop, double xRight, double yBottom, CVisioShape FAR &rWrap);
    HRESULT DrawRectangle(double xLeft, double yTop, double xRight, double yBottom, CVisioShape FAR &rWrap);
    HRESULT DrawOval(double xLeft, double yTop, double xRight, double yBottom, CVisioShape FAR &rWrap);
    HRESULT Index(short FAR *lpRet);
    HRESULT getName(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putName(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT Shapes(CVisioShapes FAR &rWrap);
    HRESULT Drop(IUnknown FAR *ObjectToDrop, double xPos, double yPos, CVisioShape FAR &rWrap);
    HRESULT AddGuide(short Type, double xPos, double yPos, CVisioShape FAR &rWrap);
    HRESULT BackPageAsObj(CVisioPage FAR &rWrap);
    HRESULT BackPageFromName(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT Print();
    HRESULT Import(BSTR_HELPER_CLASS FAR &FileName, CVisioShape FAR &rWrap);
    HRESULT Export(BSTR_HELPER_CLASS FAR &FileName);
    HRESULT Layers(CVisioLayers FAR &rWrap);
    HRESULT PageSheet(CVisioShape FAR &rWrap);
    HRESULT Delete(short fRenumberPages);
    HRESULT CenterDrawing();
    HRESULT EventList(CVisioEventList FAR &rWrap);
    HRESULT PersistsEvents(short FAR *lpRet);
    HRESULT DrawSpline(/*double*/ SAFEARRAY FAR * FAR *xyArray, double Tolerance, short Flags, CVisioShape FAR &rWrap);
    HRESULT DrawBezier(/*double*/ SAFEARRAY FAR * FAR *xyArray, short degree, short Flags, CVisioShape FAR &rWrap);
    HRESULT DrawPolyline(/*double*/ SAFEARRAY FAR * FAR *xyArray, short Flags, CVisioShape FAR &rWrap);
    HRESULT InsertFromFile(BSTR_HELPER_CLASS FAR &FileName, short Flags, CVisioShape FAR &rWrap);
    HRESULT InsertObject(BSTR_HELPER_CLASS FAR &ClassOrProgID, short Flags, CVisioShape FAR &rWrap);
    HRESULT OpenDrawWindow(CVisioWindow FAR &rWrap);
    HRESULT DropMany(/*VARIANT*/ SAFEARRAY FAR * FAR *ObjectsToInstance, /*double*/ SAFEARRAY FAR * FAR *xyArray, /*short*/ SAFEARRAY FAR * FAR *IDArray, short FAR *lpRet);
    HRESULT GetFormulas(/*short*/ SAFEARRAY FAR * FAR *SID_SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *formulaArray);
    HRESULT GetResults(/*short*/ SAFEARRAY FAR * FAR *SID_SRCStream, short Flags, /*VARIANT*/ SAFEARRAY FAR * FAR *UnitsNamesOrCodes, /*VARIANT*/ SAFEARRAY FAR * FAR *resultArray);
    HRESULT SetFormulas(/*short*/ SAFEARRAY FAR * FAR *SID_SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *formulaArray, short Flags, short FAR *lpRet);
    HRESULT SetResults(/*short*/ SAFEARRAY FAR * FAR *SID_SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *UnitsNamesOrCodes, /*VARIANT*/ SAFEARRAY FAR * FAR *resultArray, short Flags, short FAR *lpRet);
    HRESULT Connects(CVisioConnects FAR &rWrap);
    HRESULT getBackPage(VARIANT_HELPER_CLASS FAR &rWrap);
    HRESULT putBackPage(VW_CONST VARIANT_HELPER_CLASS FAR &param01);
    HRESULT Layout();
    HRESULT BoundingBox(short Flags, double FAR *lpr8Left, double FAR *lpr8Bottom, double FAR *lpr8Right, double FAR *lpr8Top);
    HRESULT ID(short FAR *lpRet);
    HRESULT OLEObjects(CVisioOLEObjects FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioPages

class FAR CVisioPages : public CVisioUnknown
{
VW_PUBLIC:
    CVisioPages()
        : CVisioUnknown() { }

    CVisioPages(const CVisioPages& other)
        : CVisioUnknown(other) { }

    CVisioPages(const IVPages FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioPages FAR & operator=(const CVisioPages FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioPages FAR & operator=(const IVPages FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioPages() { }

    IVPages FAR * GetIP() const { return (IVPages FAR *) GetUnknown(); }

    operator IVPages FAR * () { return (IVPages FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Item(VARIANT_HELPER_CLASS FAR &NameOrIndex, CVisioPage FAR &rWrap);
    HRESULT Count(short FAR *lpRet);
    HRESULT Add(CVisioPage FAR &rWrap);
    HRESULT Document(CVisioDocument FAR &rWrap);
    HRESULT Stat(short FAR *lpRet);
    HRESULT EventList(CVisioEventList FAR &rWrap);
    HRESULT PersistsEvents(short FAR *lpRet);
    HRESULT GetNames(/*BSTR*/ SAFEARRAY FAR * FAR *NameArray);
};


//  ***************************************************************************
//  Declaration of class CVisioSelection

class FAR CVisioSelection : public CVisioUnknown
{
VW_PUBLIC:
    CVisioSelection()
        : CVisioUnknown() { }

    CVisioSelection(const CVisioSelection& other)
        : CVisioUnknown(other) { }

    CVisioSelection(const IVSelection FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioSelection FAR & operator=(const CVisioSelection FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioSelection FAR & operator=(const IVSelection FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioSelection() { }

    IVSelection FAR * GetIP() const { return (IVSelection FAR *) GetUnknown(); }

    operator IVSelection FAR * () { return (IVSelection FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT Stat(short FAR *lpRet);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Item(short Index, CVisioShape FAR &rWrap);
    HRESULT Count(short FAR *lpRet);
    HRESULT Export(BSTR_HELPER_CLASS FAR &FileName);
    HRESULT Document(CVisioDocument FAR &rWrap);
    HRESULT ContainingPage(CVisioPage FAR &rWrap);
    HRESULT ContainingMaster(CVisioMaster FAR &rWrap);
    HRESULT ContainingShape(CVisioShape FAR &rWrap);
    HRESULT BringForward();
    HRESULT BringToFront();
    HRESULT SendBackward();
    HRESULT SendToBack();
    HRESULT getStyle(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT StyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getLineStyle(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putLineStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT LineStyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getFillStyle(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putFillStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT FillStyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getTextStyle(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putTextStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT TextStyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT Combine();
    HRESULT Fragment();
    HRESULT Intersect();
    HRESULT Subtract();
    HRESULT Union();
    HRESULT FlipHorizontal();
    HRESULT FlipVertical();
    HRESULT ReverseEnds();
    HRESULT Rotate90();
    HRESULT Copy();
    HRESULT Cut();
    HRESULT Delete();
    HRESULT Duplicate();
    HRESULT Group();
    HRESULT ConvertToGroup();
    HRESULT Ungroup();
    HRESULT SelectAll();
    HRESULT DeselectAll();
    HRESULT Select(CVisioShape FAR &SheetObject, short SelectAction);
    HRESULT EventList(CVisioEventList FAR &rWrap);
    HRESULT PersistsEvents(short FAR *lpRet);
    HRESULT Trim();
    HRESULT Join();
    HRESULT FitCurve(double Tolerance, short Flags);
    HRESULT Layout();
    HRESULT BoundingBox(short Flags, double FAR *lpr8Left, double FAR *lpr8Bottom, double FAR *lpr8Right, double FAR *lpr8Top);
};


//  ***************************************************************************
//  Declaration of class CVisioShape

class FAR CVisioShape : public CVisioUnknown
{
VW_PUBLIC:
    CVisioShape()
        : CVisioUnknown() { }

    CVisioShape(const CVisioShape& other)
        : CVisioUnknown(other) { }

    CVisioShape(const IVShape FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioShape FAR & operator=(const CVisioShape FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioShape FAR & operator=(const IVShape FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioShape() { }

    IVShape FAR * GetIP() const { return (IVShape FAR *) GetUnknown(); }

    operator IVShape FAR * () { return (IVShape FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Group();
    HRESULT BringForward();
    HRESULT BringToFront();
    HRESULT ConvertToGroup();
    HRESULT FlipHorizontal();
    HRESULT FlipVertical();
    HRESULT ReverseEnds();
    HRESULT SendBackward();
    HRESULT SendToBack();
    HRESULT Rotate90();
    HRESULT Ungroup();
    HRESULT Document(CVisioDocument FAR &rWrap);
    HRESULT Parent(IDispatch FAR *FAR *lpRet);
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT Stat(short FAR *lpRet);
    HRESULT Master(CVisioMaster FAR &rWrap);
    HRESULT Type(short FAR *lpRet);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Cells(BSTR_HELPER_CLASS FAR &CellName, CVisioCell FAR &rWrap);
    HRESULT CellsSRC(short Section, short Row, short Column, CVisioCell FAR &rWrap);
    HRESULT Shapes(CVisioShapes FAR &rWrap);
    HRESULT getData1(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putData1(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getData2(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putData2(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getData3(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putData3(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getHelp(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putHelp(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT NameID(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT getName(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putName(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getText(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putText(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT CharCount(long FAR *lpRet);
    HRESULT Characters(CVisioCharacters FAR &rWrap);
    HRESULT Copy();
    HRESULT Cut();
    HRESULT Delete();
    HRESULT Duplicate();
    HRESULT Drop(IUnknown FAR *ObjectToDrop, double xPos, double yPos, CVisioShape FAR &rWrap);
    HRESULT getOneD(short FAR *lpRet);
    HRESULT putOneD(VW_CONST short param01);
    HRESULT GeometryCount(short FAR *lpRet);
    HRESULT RowCount(short Section, short FAR *lpRet);
    HRESULT AddSection(short Section, short FAR *lpRet);
    HRESULT DeleteSection(short Section);
    HRESULT AddRow(short Section, short Row, short RowTag, short FAR *lpRet);
    HRESULT DeleteRow(short Section, short Row);
    HRESULT RowsCellCount(short Section, short Row, short FAR *lpRet);
    HRESULT getRowType(short Section, short Row, short FAR *lpRet);
    HRESULT putRowType(VW_CONST short Section, VW_CONST short Row, VW_CONST short param03);
    HRESULT SetCenter(double xPos, double yPos);
    HRESULT SetBegin(double xPos, double yPos);
    HRESULT SetEnd(double xPos, double yPos);
    HRESULT Connects(CVisioConnects FAR &rWrap);
    HRESULT Index(short FAR *lpRet);
    HRESULT getStyle(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT StyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getLineStyle(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putLineStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT LineStyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getFillStyle(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putFillStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT FillStyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getTextStyle(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putTextStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT TextStyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT Export(BSTR_HELPER_CLASS FAR &FileName);
    HRESULT AreaIU(double FAR *lpRet);
    HRESULT LengthIU(double FAR *lpRet);
    HRESULT GeomExIf(short fFill, double LineRes, IUnknown FAR *FAR *lpRet);
    HRESULT UniqueID(short fUniqueID, BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT ContainingPage(CVisioPage FAR &rWrap);
    HRESULT ContainingMaster(CVisioMaster FAR &rWrap);
    HRESULT ContainingShape(CVisioShape FAR &rWrap);
    HRESULT SectionExists(short Section, short fLocalExists, short FAR *lpRet);
    HRESULT RowExists(short Section, short Row, short fLocalExists, short FAR *lpRet);
    HRESULT CellExists(BSTR_HELPER_CLASS FAR &CellName, short fLocalExists, short FAR *lpRet);
    HRESULT CellsSRCExists(short Section, short Row, short Column, short fLocalExists, short FAR *lpRet);
    HRESULT LayerCount(short FAR *lpRet);
    HRESULT Layer(short Index, CVisioLayer FAR &rWrap);
    HRESULT AddNamedRow(short Section, BSTR_HELPER_CLASS FAR &RowName, short RowTag, short FAR *lpRet);
    HRESULT AddRows(short Section, short Row, short RowTag, short RowCount, short FAR *lpRet);
    HRESULT EventList(CVisioEventList FAR &rWrap);
    HRESULT PersistsEvents(short FAR *lpRet);
    HRESULT DrawLine(double xLeft, double yTop, double xRight, double yBottom, CVisioShape FAR &rWrap);
    HRESULT DrawRectangle(double xLeft, double yTop, double xRight, double yBottom, CVisioShape FAR &rWrap);
    HRESULT DrawOval(double xLeft, double yTop, double xRight, double yBottom, CVisioShape FAR &rWrap);
    HRESULT DrawSpline(/*double*/ SAFEARRAY FAR * FAR *xyArray, double Tolerance, short Flags, CVisioShape FAR &rWrap);
    HRESULT DrawBezier(/*double*/ SAFEARRAY FAR * FAR *xyArray, short degree, short Flags, CVisioShape FAR &rWrap);
    HRESULT DrawPolyline(/*double*/ SAFEARRAY FAR * FAR *xyArray, short Flags, CVisioShape FAR &rWrap);
    HRESULT FitCurve(double Tolerance, short Flags);
    HRESULT Import(BSTR_HELPER_CLASS FAR &FileName, CVisioShape FAR &rWrap);
    HRESULT CenterDrawing();
    HRESULT InsertFromFile(BSTR_HELPER_CLASS FAR &FileName, short Flags, CVisioShape FAR &rWrap);
    HRESULT InsertObject(BSTR_HELPER_CLASS FAR &ClassOrProgID, short Flags, CVisioShape FAR &rWrap);
    HRESULT ClassID(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT ForeignType(short FAR *lpRet);
    HRESULT Object(IDispatch FAR *FAR *lpRet);
    HRESULT OpenDrawWindow(CVisioWindow FAR &rWrap);
    HRESULT OpenSheetWindow(CVisioWindow FAR &rWrap);
    HRESULT ID(short FAR *lpRet);
    HRESULT DropMany(/*VARIANT*/ SAFEARRAY FAR * FAR *ObjectsToInstance, /*double*/ SAFEARRAY FAR * FAR *xyArray, /*short*/ SAFEARRAY FAR * FAR *IDArray, short FAR *lpRet);
    HRESULT GetFormulas(/*short*/ SAFEARRAY FAR * FAR *SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *formulaArray);
    HRESULT GetResults(/*short*/ SAFEARRAY FAR * FAR *SRCStream, short Flags, /*VARIANT*/ SAFEARRAY FAR * FAR *UnitsNamesOrCodes, /*VARIANT*/ SAFEARRAY FAR * FAR *resultArray);
    HRESULT SetFormulas(/*short*/ SAFEARRAY FAR * FAR *SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *formulaArray, short Flags, short FAR *lpRet);
    HRESULT SetResults(/*short*/ SAFEARRAY FAR * FAR *SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *UnitsNamesOrCodes, /*VARIANT*/ SAFEARRAY FAR * FAR *resultArray, short Flags, short FAR *lpRet);
    HRESULT FromConnects(CVisioConnects FAR &rWrap);
    HRESULT Layout();
    HRESULT BoundingBox(short Flags, double FAR *lpr8Left, double FAR *lpr8Bottom, double FAR *lpr8Right, double FAR *lpr8Top);
    HRESULT HitTest(double xPos, double yPos, double Tolerance, short FAR *lpRet);
    HRESULT Hyperlink(CVisioHyperlink FAR &rWrap);
    HRESULT ProgID(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT ObjectIsInherited(short FAR *lpRet);
    HRESULT Paths(CVisioPaths FAR &rWrap);
    HRESULT PathsLocal(CVisioPaths FAR &rWrap);
    HRESULT AddHyperlink(CVisioHyperlink FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioShapes

class FAR CVisioShapes : public CVisioUnknown
{
VW_PUBLIC:
    CVisioShapes()
        : CVisioUnknown() { }

    CVisioShapes(const CVisioShapes& other)
        : CVisioUnknown(other) { }

    CVisioShapes(const IVShapes FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioShapes FAR & operator=(const CVisioShapes FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioShapes FAR & operator=(const IVShapes FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioShapes() { }

    IVShapes FAR * GetIP() const { return (IVShapes FAR *) GetUnknown(); }

    operator IVShapes FAR * () { return (IVShapes FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Item(VARIANT_HELPER_CLASS FAR &NameUIDOrIndex, CVisioShape FAR &rWrap);
    HRESULT Count(short FAR *lpRet);
    HRESULT Document(CVisioDocument FAR &rWrap);
    HRESULT ContainingPage(CVisioPage FAR &rWrap);
    HRESULT ContainingMaster(CVisioMaster FAR &rWrap);
    HRESULT ContainingShape(CVisioShape FAR &rWrap);
    HRESULT CenterDrawing();
    HRESULT Stat(short FAR *lpRet);
    HRESULT EventList(CVisioEventList FAR &rWrap);
    HRESULT PersistsEvents(short FAR *lpRet);
    HRESULT ItemFromID(short ObjectID, CVisioShape FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioStyle

class FAR CVisioStyle : public CVisioUnknown
{
VW_PUBLIC:
    CVisioStyle()
        : CVisioUnknown() { }

    CVisioStyle(const CVisioStyle& other)
        : CVisioUnknown(other) { }

    CVisioStyle(const IVStyle FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioStyle FAR & operator=(const CVisioStyle FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioStyle FAR & operator=(const IVStyle FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioStyle() { }

    IVStyle FAR * GetIP() const { return (IVStyle FAR *) GetUnknown(); }

    operator IVStyle FAR * () { return (IVStyle FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT Stat(short FAR *lpRet);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT getName(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putName(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT Index(short FAR *lpRet);
    HRESULT Document(CVisioDocument FAR &rWrap);
    HRESULT getBasedOn(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putBasedOn(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getTextBasedOn(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putTextBasedOn(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getLineBasedOn(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putLineBasedOn(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getFillBasedOn(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putFillBasedOn(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getIncludesText(short FAR *lpRet);
    HRESULT putIncludesText(VW_CONST short param01);
    HRESULT getIncludesLine(short FAR *lpRet);
    HRESULT putIncludesLine(VW_CONST short param01);
    HRESULT getIncludesFill(short FAR *lpRet);
    HRESULT putIncludesFill(VW_CONST short param01);
    HRESULT Cells(BSTR_HELPER_CLASS FAR &CellName, CVisioCell FAR &rWrap);
    HRESULT Delete();
    HRESULT EventList(CVisioEventList FAR &rWrap);
    HRESULT PersistsEvents(short FAR *lpRet);
    HRESULT ID(short FAR *lpRet);
    HRESULT GetFormulas(/*short*/ SAFEARRAY FAR * FAR *SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *formulaArray);
    HRESULT GetResults(/*short*/ SAFEARRAY FAR * FAR *SRCStream, short Flags, /*VARIANT*/ SAFEARRAY FAR * FAR *UnitsNamesOrCodes, /*VARIANT*/ SAFEARRAY FAR * FAR *resultArray);
    HRESULT SetFormulas(/*short*/ SAFEARRAY FAR * FAR *SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *formulaArray, short Flags, short FAR *lpRet);
    HRESULT SetResults(/*short*/ SAFEARRAY FAR * FAR *SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *UnitsNamesOrCodes, /*VARIANT*/ SAFEARRAY FAR * FAR *resultArray, short Flags, short FAR *lpRet);
};


//  ***************************************************************************
//  Declaration of class CVisioStyles

class FAR CVisioStyles : public CVisioUnknown
{
VW_PUBLIC:
    CVisioStyles()
        : CVisioUnknown() { }

    CVisioStyles(const CVisioStyles& other)
        : CVisioUnknown(other) { }

    CVisioStyles(const IVStyles FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioStyles FAR & operator=(const CVisioStyles FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioStyles FAR & operator=(const IVStyles FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioStyles() { }

    IVStyles FAR * GetIP() const { return (IVStyles FAR *) GetUnknown(); }

    operator IVStyles FAR * () { return (IVStyles FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Item(VARIANT_HELPER_CLASS FAR &NameOrIndex, CVisioStyle FAR &rWrap);
    HRESULT Count(short FAR *lpRet);
    HRESULT Document(CVisioDocument FAR &rWrap);
    HRESULT Add(BSTR_HELPER_CLASS FAR &StyleName, BSTR_HELPER_CLASS FAR &BasedOn, short fIncludesText, short fIncludesLine, short fIncludesFill, CVisioStyle FAR &rWrap);
    HRESULT Stat(short FAR *lpRet);
    HRESULT EventList(CVisioEventList FAR &rWrap);
    HRESULT PersistsEvents(short FAR *lpRet);
    HRESULT ItemFromID(short ObjectID, CVisioStyle FAR &rWrap);
    HRESULT GetNames(/*BSTR*/ SAFEARRAY FAR * FAR *NameArray);
};


//  ***************************************************************************
//  Declaration of class CVisioWindow

class FAR CVisioWindow : public CVisioUnknown
{
VW_PUBLIC:
    CVisioWindow()
        : CVisioUnknown() { }

    CVisioWindow(const CVisioWindow& other)
        : CVisioUnknown(other) { }

    CVisioWindow(const IVWindow FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioWindow FAR & operator=(const CVisioWindow FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioWindow FAR & operator=(const IVWindow FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioWindow() { }

    IVWindow FAR * GetIP() const { return (IVWindow FAR *) GetUnknown(); }

    operator IVWindow FAR * () { return (IVWindow FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT Stat(short FAR *lpRet);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Activate();
    HRESULT Type(short FAR *lpRet);
    HRESULT Document(CVisioDocument FAR &rWrap);
    HRESULT PageAsObj(CVisioPage FAR &rWrap);
    HRESULT PageFromName(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getZoom(double FAR *lpRet);
    HRESULT putZoom(VW_CONST double param01);
    HRESULT Close();
    HRESULT SelectAll();
    HRESULT DeselectAll();
    HRESULT Selection(CVisioSelection FAR &rWrap);
    HRESULT Select(CVisioShape FAR &SheetObject, short SelectAction);
    HRESULT Index(short FAR *lpRet);
    HRESULT Cut();
    HRESULT Copy();
    HRESULT Paste();
    HRESULT Delete();
    HRESULT Duplicate();
    HRESULT Group();
    HRESULT Union();
    HRESULT Combine();
    HRESULT Fragment();
    HRESULT AddToGroup();
    HRESULT RemoveFromGroup();
    HRESULT SubType(short FAR *lpRet);
    HRESULT Intersect();
    HRESULT Subtract();
    HRESULT EventList(CVisioEventList FAR &rWrap);
    HRESULT PersistsEvents(short FAR *lpRet);
    HRESULT WindowHandle(short FAR *lpRet);
    HRESULT WindowHandle32(long FAR *lpRet);
    HRESULT Trim();
    HRESULT Join();
    HRESULT getShowRulers(short FAR *lpRet);
    HRESULT putShowRulers(VW_CONST short param01);
    HRESULT getShowGrid(short FAR *lpRet);
    HRESULT putShowGrid(VW_CONST short param01);
    HRESULT getShowGuides(short FAR *lpRet);
    HRESULT putShowGuides(VW_CONST short param01);
    HRESULT getShowConnectPoints(short FAR *lpRet);
    HRESULT putShowConnectPoints(VW_CONST short param01);
    HRESULT getShowPageBreaks(short FAR *lpRet);
    HRESULT putShowPageBreaks(VW_CONST short param01);
    HRESULT getPage(VARIANT_HELPER_CLASS FAR &rWrap);
    HRESULT putPage(VW_CONST VARIANT_HELPER_CLASS FAR &param01);
    HRESULT DockedStencils(/*BSTR*/ SAFEARRAY FAR * FAR *NameArray);
    HRESULT Master(VARIANT_HELPER_CLASS FAR &rWrap);
    HRESULT getShowScrollBars(short FAR *lpRet);
    HRESULT putShowScrollBars(VW_CONST short param01);
};


//  ***************************************************************************
//  Declaration of class CVisioWindows

class FAR CVisioWindows : public CVisioUnknown
{
VW_PUBLIC:
    CVisioWindows()
        : CVisioUnknown() { }

    CVisioWindows(const CVisioWindows& other)
        : CVisioUnknown(other) { }

    CVisioWindows(const IVWindows FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioWindows FAR & operator=(const CVisioWindows FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioWindows FAR & operator=(const IVWindows FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioWindows() { }

    IVWindows FAR * GetIP() const { return (IVWindows FAR *) GetUnknown(); }

    operator IVWindows FAR * () { return (IVWindows FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Item(short Index, CVisioWindow FAR &rWrap);
    HRESULT Count(short FAR *lpRet);
    HRESULT Arrange();
    HRESULT EventList(CVisioEventList FAR &rWrap);
    HRESULT PersistsEvents(short FAR *lpRet);
};


//  ***************************************************************************
//  Declaration of class CVisioLayer

class FAR CVisioLayer : public CVisioUnknown
{
VW_PUBLIC:
    CVisioLayer()
        : CVisioUnknown() { }

    CVisioLayer(const CVisioLayer& other)
        : CVisioUnknown(other) { }

    CVisioLayer(const IVLayer FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioLayer FAR & operator=(const CVisioLayer FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioLayer FAR & operator=(const IVLayer FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioLayer() { }

    IVLayer FAR * GetIP() const { return (IVLayer FAR *) GetUnknown(); }

    operator IVLayer FAR * () { return (IVLayer FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT Document(CVisioDocument FAR &rWrap);
    HRESULT Page(CVisioPage FAR &rWrap);
    HRESULT Master(CVisioMaster FAR &rWrap);
    HRESULT Index(short FAR *lpRet);
    HRESULT Row(short FAR *lpRet);
    HRESULT Add(CVisioShape FAR &SheetObject, short fPresMems);
    HRESULT Remove(CVisioShape FAR &SheetObject, short fPresMems);
    HRESULT Delete(short fDeleteShapes);
    HRESULT getName(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putName(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT CellsC(short Column, CVisioCell FAR &rWrap);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Stat(short FAR *lpRet);
    HRESULT EventList(CVisioEventList FAR &rWrap);
    HRESULT PersistsEvents(short FAR *lpRet);
};


//  ***************************************************************************
//  Declaration of class CVisioLayers

class FAR CVisioLayers : public CVisioUnknown
{
VW_PUBLIC:
    CVisioLayers()
        : CVisioUnknown() { }

    CVisioLayers(const CVisioLayers& other)
        : CVisioUnknown(other) { }

    CVisioLayers(const IVLayers FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioLayers FAR & operator=(const CVisioLayers FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioLayers FAR & operator=(const IVLayers FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioLayers() { }

    IVLayers FAR * GetIP() const { return (IVLayers FAR *) GetUnknown(); }

    operator IVLayers FAR * () { return (IVLayers FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT Document(CVisioDocument FAR &rWrap);
    HRESULT Page(CVisioPage FAR &rWrap);
    HRESULT Master(CVisioMaster FAR &rWrap);
    HRESULT Count(short FAR *lpRet);
    HRESULT Item(VARIANT_HELPER_CLASS FAR &NameOrIndex, CVisioLayer FAR &rWrap);
    HRESULT Add(BSTR_HELPER_CLASS FAR &LayerName, CVisioLayer FAR &rWrap);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Stat(short FAR *lpRet);
    HRESULT EventList(CVisioEventList FAR &rWrap);
    HRESULT PersistsEvents(short FAR *lpRet);
};


//  ***************************************************************************
//  Declaration of class CVisioFont

class FAR CVisioFont : public CVisioUnknown
{
VW_PUBLIC:
    CVisioFont()
        : CVisioUnknown() { }

    CVisioFont(const CVisioFont& other)
        : CVisioUnknown(other) { }

    CVisioFont(const IVFont FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioFont FAR & operator=(const CVisioFont FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioFont FAR & operator=(const IVFont FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioFont() { }

    IVFont FAR * GetIP() const { return (IVFont FAR *) GetUnknown(); }

    operator IVFont FAR * () { return (IVFont FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT Document(CVisioDocument FAR &rWrap);
    HRESULT Index(short FAR *lpRet);
    HRESULT Name(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT ID(short FAR *lpRet);
    HRESULT Attributes(short FAR *lpRet);
    HRESULT CharSet(short FAR *lpRet);
    HRESULT PitchAndFamily(short FAR *lpRet);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Stat(short FAR *lpRet);
};


//  ***************************************************************************
//  Declaration of class CVisioFonts

class FAR CVisioFonts : public CVisioUnknown
{
VW_PUBLIC:
    CVisioFonts()
        : CVisioUnknown() { }

    CVisioFonts(const CVisioFonts& other)
        : CVisioUnknown(other) { }

    CVisioFonts(const IVFonts FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioFonts FAR & operator=(const CVisioFonts FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioFonts FAR & operator=(const IVFonts FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioFonts() { }

    IVFonts FAR * GetIP() const { return (IVFonts FAR *) GetUnknown(); }

    operator IVFonts FAR * () { return (IVFonts FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT Document(CVisioDocument FAR &rWrap);
    HRESULT Count(short FAR *lpRet);
    HRESULT Item(VARIANT_HELPER_CLASS FAR &NameOrIndex, CVisioFont FAR &rWrap);
    HRESULT ItemFromID(long ObjectID, CVisioFont FAR &rWrap);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Stat(short FAR *lpRet);
};


//  ***************************************************************************
//  Declaration of class CVisioColor

class FAR CVisioColor : public CVisioUnknown
{
VW_PUBLIC:
    CVisioColor()
        : CVisioUnknown() { }

    CVisioColor(const CVisioColor& other)
        : CVisioUnknown(other) { }

    CVisioColor(const IVColor FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioColor FAR & operator=(const CVisioColor FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioColor FAR & operator=(const IVColor FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioColor() { }

    IVColor FAR * GetIP() const { return (IVColor FAR *) GetUnknown(); }

    operator IVColor FAR * () { return (IVColor FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT Document(CVisioDocument FAR &rWrap);
    HRESULT Index(short FAR *lpRet);
    HRESULT getRed(short FAR *lpRet);
    HRESULT putRed(VW_CONST short param01);
    HRESULT getGreen(short FAR *lpRet);
    HRESULT putGreen(VW_CONST short param01);
    HRESULT getBlue(short FAR *lpRet);
    HRESULT putBlue(VW_CONST short param01);
    HRESULT getFlags(short FAR *lpRet);
    HRESULT putFlags(VW_CONST short param01);
    HRESULT getPaletteEntry(long FAR *lpRet);
    HRESULT putPaletteEntry(VW_CONST long param01);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Stat(short FAR *lpRet);
};


//  ***************************************************************************
//  Declaration of class CVisioColors

class FAR CVisioColors : public CVisioUnknown
{
VW_PUBLIC:
    CVisioColors()
        : CVisioUnknown() { }

    CVisioColors(const CVisioColors& other)
        : CVisioUnknown(other) { }

    CVisioColors(const IVColors FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioColors FAR & operator=(const CVisioColors FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioColors FAR & operator=(const IVColors FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioColors() { }

    IVColors FAR * GetIP() const { return (IVColors FAR *) GetUnknown(); }

    operator IVColors FAR * () { return (IVColors FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT Document(CVisioDocument FAR &rWrap);
    HRESULT Count(short FAR *lpRet);
    HRESULT Item(short Index, CVisioColor FAR &rWrap);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Stat(short FAR *lpRet);
};


//  ***************************************************************************
//  Declaration of class CVisioAddon

class FAR CVisioAddon : public CVisioUnknown
{
VW_PUBLIC:
    CVisioAddon()
        : CVisioUnknown() { }

    CVisioAddon(const CVisioAddon& other)
        : CVisioUnknown(other) { }

    CVisioAddon(const IVAddon FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioAddon FAR & operator=(const CVisioAddon FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioAddon FAR & operator=(const IVAddon FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioAddon() { }

    IVAddon FAR * GetIP() const { return (IVAddon FAR *) GetUnknown(); }

    operator IVAddon FAR * () { return (IVAddon FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Name(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT Index(short FAR *lpRet);
    HRESULT Enabled(short FAR *lpRet);
    HRESULT Run(BSTR_HELPER_CLASS FAR &ArgString);
};


//  ***************************************************************************
//  Declaration of class CVisioAddons

class FAR CVisioAddons : public CVisioUnknown
{
VW_PUBLIC:
    CVisioAddons()
        : CVisioUnknown() { }

    CVisioAddons(const CVisioAddons& other)
        : CVisioUnknown(other) { }

    CVisioAddons(const IVAddons FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioAddons FAR & operator=(const CVisioAddons FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioAddons FAR & operator=(const IVAddons FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioAddons() { }

    IVAddons FAR * GetIP() const { return (IVAddons FAR *) GetUnknown(); }

    operator IVAddons FAR * () { return (IVAddons FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Item(VARIANT_HELPER_CLASS FAR &NameOrIndex, CVisioAddon FAR &rWrap);
    HRESULT Count(short FAR *lpRet);
    HRESULT Add(BSTR_HELPER_CLASS FAR &FileName, CVisioAddon FAR &rWrap);
    HRESULT GetNames(/*BSTR*/ SAFEARRAY FAR * FAR *NameArray);
};


//  ***************************************************************************
//  Declaration of class CVisioEvent

class FAR CVisioEvent : public CVisioUnknown
{
VW_PUBLIC:
    CVisioEvent()
        : CVisioUnknown() { }

    CVisioEvent(const CVisioEvent& other)
        : CVisioUnknown(other) { }

    CVisioEvent(const IVEvent FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioEvent FAR & operator=(const CVisioEvent FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioEvent FAR & operator=(const IVEvent FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioEvent() { }

    IVEvent FAR * GetIP() const { return (IVEvent FAR *) GetUnknown(); }

    operator IVEvent FAR * () { return (IVEvent FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT EventList(CVisioEventList FAR &rWrap);
    HRESULT Index(short FAR *lpRet);
    HRESULT getEvent(short FAR *lpRet);
    HRESULT putEvent(VW_CONST short param01);
    HRESULT getAction(short FAR *lpRet);
    HRESULT putAction(VW_CONST short param01);
    HRESULT getTarget(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putTarget(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getTargetArgs(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putTargetArgs(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT Trigger(BSTR_HELPER_CLASS FAR &ContextString);
    HRESULT Delete();
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT ID(long FAR *lpRet);
    HRESULT getEnabled(short FAR *lpRet);
    HRESULT putEnabled(VW_CONST short param01);
    HRESULT Persistable(short FAR *lpRet);
    HRESULT getPersistent(short FAR *lpRet);
    HRESULT putPersistent(VW_CONST short param01);
};


//  ***************************************************************************
//  Declaration of class CVisioEventList

class FAR CVisioEventList : public CVisioUnknown
{
VW_PUBLIC:
    CVisioEventList()
        : CVisioUnknown() { }

    CVisioEventList(const CVisioEventList& other)
        : CVisioUnknown(other) { }

    CVisioEventList(const IVEventList FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioEventList FAR & operator=(const CVisioEventList FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioEventList FAR & operator=(const IVEventList FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioEventList() { }

    IVEventList FAR * GetIP() const { return (IVEventList FAR *) GetUnknown(); }

    operator IVEventList FAR * () { return (IVEventList FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Item(short Index, CVisioEvent FAR &rWrap);
    HRESULT Count(short FAR *lpRet);
    HRESULT Add(short EventCode, short Action, BSTR_HELPER_CLASS FAR &Target, BSTR_HELPER_CLASS FAR &TargetArgs, CVisioEvent FAR &rWrap);
    HRESULT AddAdvise(short EventCode, VARIANT_HELPER_CLASS FAR &SinkIUnkOrIDisp, BSTR_HELPER_CLASS FAR &IIDSink, BSTR_HELPER_CLASS FAR &TargetArgs, CVisioEvent FAR &rWrap);
    HRESULT ItemFromID(long ObjectID, CVisioEvent FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioGlobal

class FAR CVisioGlobal : public CVisioUnknown
{
VW_PUBLIC:
    CVisioGlobal()
        : CVisioUnknown() { }

    CVisioGlobal(const CVisioGlobal& other)
        : CVisioUnknown(other) { }

    CVisioGlobal(const IVGlobal FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioGlobal FAR & operator=(const CVisioGlobal FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioGlobal FAR & operator=(const IVGlobal FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioGlobal() { }

    IVGlobal FAR * GetIP() const { return (IVGlobal FAR *) GetUnknown(); }

    operator IVGlobal FAR * () { return (IVGlobal FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT ActiveDocument(CVisioDocument FAR &rWrap);
    HRESULT ActivePage(CVisioPage FAR &rWrap);
    HRESULT ActiveWindow(CVisioWindow FAR &rWrap);
    HRESULT Documents(CVisioDocuments FAR &rWrap);
    HRESULT Windows(CVisioWindows FAR &rWrap);
    HRESULT Addons(CVisioAddons FAR &rWrap);
    HRESULT Vbe(IDispatch FAR *FAR *lpRet);
};


//  ***************************************************************************
//  Declaration of class CVisioEDocument

class FAR CVisioEDocument : public CVisioUnknown
{
VW_PUBLIC:
    CVisioEDocument()
        : CVisioUnknown() { }

    CVisioEDocument(const CVisioEDocument& other)
        : CVisioUnknown(other) { }

    CVisioEDocument(const EDocument FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioEDocument FAR & operator=(const CVisioEDocument FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioEDocument FAR & operator=(const EDocument FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioEDocument() { }

    EDocument FAR * GetIP() const { return (EDocument FAR *) GetUnknown(); }

    operator EDocument FAR * () { return (EDocument FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT DocumentOpened(CVisioDocument FAR &doc);
    HRESULT DocumentCreated(CVisioDocument FAR &doc);
    HRESULT DocumentSaved(CVisioDocument FAR &doc);
    HRESULT DocumentSavedAs(CVisioDocument FAR &doc);
    HRESULT DocumentChanged(CVisioDocument FAR &doc);
    HRESULT BeforeDocumentClose(CVisioDocument FAR &doc);
    HRESULT StyleAdded(CVisioStyle FAR &Style);
    HRESULT StyleChanged(CVisioStyle FAR &Style);
    HRESULT BeforeStyleDelete(CVisioStyle FAR &Style);
    HRESULT MasterAdded(CVisioMaster FAR &Master);
    HRESULT MasterChanged(CVisioMaster FAR &Master);
    HRESULT BeforeMasterDelete(CVisioMaster FAR &Master);
    HRESULT PageAdded(CVisioPage FAR &Page);
    HRESULT PageChanged(CVisioPage FAR &Page);
    HRESULT BeforePageDelete(CVisioPage FAR &Page);
    HRESULT ShapeAdded(CVisioShape FAR &Shape);
    HRESULT BeforeSelectionDelete(CVisioSelection FAR &Selection);
    HRESULT RunModeEntered(CVisioDocument FAR &doc);
    HRESULT DesignModeEntered(CVisioDocument FAR &doc);
    HRESULT BeforeDocumentSave(CVisioDocument FAR &doc);
    HRESULT BeforeDocumentSaveAs(CVisioDocument FAR &doc);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioEApplication

class FAR CVisioEApplication : public CVisioUnknown
{
VW_PUBLIC:
    CVisioEApplication()
        : CVisioUnknown() { }

    CVisioEApplication(const CVisioEApplication& other)
        : CVisioUnknown(other) { }

    CVisioEApplication(const EApplication FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioEApplication FAR & operator=(const CVisioEApplication FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioEApplication FAR & operator=(const EApplication FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioEApplication() { }

    EApplication FAR * GetIP() const { return (EApplication FAR *) GetUnknown(); }

    operator EApplication FAR * () { return (EApplication FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT AppActivated(CVisioApplication FAR &app);
    HRESULT AppDeactivated(CVisioApplication FAR &app);
    HRESULT AppObjActivated(CVisioApplication FAR &app);
    HRESULT AppObjDeactivated(CVisioApplication FAR &app);
    HRESULT BeforeQuit(CVisioApplication FAR &app);
    HRESULT BeforeModal(CVisioApplication FAR &app);
    HRESULT AfterModal(CVisioApplication FAR &app);
    HRESULT WindowOpened(CVisioWindow FAR &Window);
    HRESULT SelectionChanged(CVisioWindow FAR &Window);
    HRESULT BeforeWindowClosed(CVisioWindow FAR &Window);
    HRESULT WindowActivated(CVisioWindow FAR &Window);
    HRESULT BeforeWindowSelDelete(CVisioWindow FAR &Window);
    HRESULT BeforeWindowPageTurn(CVisioWindow FAR &Window);
    HRESULT WindowTurnedToPage(CVisioWindow FAR &Window);
    HRESULT DocumentOpened(CVisioDocument FAR &doc);
    HRESULT DocumentCreated(CVisioDocument FAR &doc);
    HRESULT DocumentSaved(CVisioDocument FAR &doc);
    HRESULT DocumentSavedAs(CVisioDocument FAR &doc);
    HRESULT DocumentChanged(CVisioDocument FAR &doc);
    HRESULT BeforeDocumentClose(CVisioDocument FAR &doc);
    HRESULT StyleAdded(CVisioStyle FAR &Style);
    HRESULT StyleChanged(CVisioStyle FAR &Style);
    HRESULT BeforeStyleDelete(CVisioStyle FAR &Style);
    HRESULT MasterAdded(CVisioMaster FAR &Master);
    HRESULT MasterChanged(CVisioMaster FAR &Master);
    HRESULT BeforeMasterDelete(CVisioMaster FAR &Master);
    HRESULT PageAdded(CVisioPage FAR &Page);
    HRESULT PageChanged(CVisioPage FAR &Page);
    HRESULT BeforePageDelete(CVisioPage FAR &Page);
    HRESULT ShapeAdded(CVisioShape FAR &Shape);
    HRESULT BeforeSelectionDelete(CVisioSelection FAR &Selection);
    HRESULT ShapeChanged(CVisioShape FAR &Shape);
    HRESULT SelectionAdded(CVisioSelection FAR &Selection);
    HRESULT BeforeShapeDelete(CVisioShape FAR &Shape);
    HRESULT TextChanged(CVisioShape FAR &Shape);
    HRESULT CellChanged(CVisioCell FAR &Cell);
    HRESULT MarkerEvent(CVisioApplication FAR &app, long SequenceNum, BSTR_HELPER_CLASS FAR &ContextString);
    HRESULT NoEventsPending(CVisioApplication FAR &app);
    HRESULT VisioIsIdle(CVisioApplication FAR &app);
    HRESULT MustFlushScopeBeginning(CVisioApplication FAR &app);
    HRESULT MustFlushScopeEnded(CVisioApplication FAR &app);
    HRESULT RunModeEntered(CVisioDocument FAR &doc);
    HRESULT DesignModeEntered(CVisioDocument FAR &doc);
    HRESULT BeforeDocumentSave(CVisioDocument FAR &doc);
    HRESULT BeforeDocumentSaveAs(CVisioDocument FAR &doc);
    HRESULT FormulaChanged(CVisioCell FAR &Cell);
    HRESULT ConnectionsAdded(CVisioConnects FAR &Connects);
    HRESULT ConnectionsDeleted(CVisioConnects FAR &Connects);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioEWindows

class FAR CVisioEWindows : public CVisioUnknown
{
VW_PUBLIC:
    CVisioEWindows()
        : CVisioUnknown() { }

    CVisioEWindows(const CVisioEWindows& other)
        : CVisioUnknown(other) { }

    CVisioEWindows(const EWindows FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioEWindows FAR & operator=(const CVisioEWindows FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioEWindows FAR & operator=(const EWindows FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioEWindows() { }

    EWindows FAR * GetIP() const { return (EWindows FAR *) GetUnknown(); }

    operator EWindows FAR * () { return (EWindows FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT WindowOpened(CVisioWindow FAR &Window);
    HRESULT SelectionChanged(CVisioWindow FAR &Window);
    HRESULT BeforeWindowClosed(CVisioWindow FAR &Window);
    HRESULT WindowActivated(CVisioWindow FAR &Window);
    HRESULT BeforeWindowSelDelete(CVisioWindow FAR &Window);
    HRESULT BeforeWindowPageTurn(CVisioWindow FAR &Window);
    HRESULT WindowTurnedToPage(CVisioWindow FAR &Window);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioEWindow

class FAR CVisioEWindow : public CVisioUnknown
{
VW_PUBLIC:
    CVisioEWindow()
        : CVisioUnknown() { }

    CVisioEWindow(const CVisioEWindow& other)
        : CVisioUnknown(other) { }

    CVisioEWindow(const EWindow FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioEWindow FAR & operator=(const CVisioEWindow FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioEWindow FAR & operator=(const EWindow FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioEWindow() { }

    EWindow FAR * GetIP() const { return (EWindow FAR *) GetUnknown(); }

    operator EWindow FAR * () { return (EWindow FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT SelectionChanged(CVisioWindow FAR &Window);
    HRESULT BeforeWindowClosed(CVisioWindow FAR &Window);
    HRESULT WindowActivated(CVisioWindow FAR &Window);
    HRESULT BeforeWindowSelDelete(CVisioWindow FAR &Window);
    HRESULT BeforeWindowPageTurn(CVisioWindow FAR &Window);
    HRESULT WindowTurnedToPage(CVisioWindow FAR &Window);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioEDocuments

class FAR CVisioEDocuments : public CVisioUnknown
{
VW_PUBLIC:
    CVisioEDocuments()
        : CVisioUnknown() { }

    CVisioEDocuments(const CVisioEDocuments& other)
        : CVisioUnknown(other) { }

    CVisioEDocuments(const EDocuments FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioEDocuments FAR & operator=(const CVisioEDocuments FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioEDocuments FAR & operator=(const EDocuments FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioEDocuments() { }

    EDocuments FAR * GetIP() const { return (EDocuments FAR *) GetUnknown(); }

    operator EDocuments FAR * () { return (EDocuments FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT DocumentOpened(CVisioDocument FAR &doc);
    HRESULT DocumentCreated(CVisioDocument FAR &doc);
    HRESULT DocumentSaved(CVisioDocument FAR &doc);
    HRESULT DocumentSavedAs(CVisioDocument FAR &doc);
    HRESULT DocumentChanged(CVisioDocument FAR &doc);
    HRESULT BeforeDocumentClose(CVisioDocument FAR &doc);
    HRESULT StyleAdded(CVisioStyle FAR &Style);
    HRESULT StyleChanged(CVisioStyle FAR &Style);
    HRESULT BeforeStyleDelete(CVisioStyle FAR &Style);
    HRESULT MasterAdded(CVisioMaster FAR &Master);
    HRESULT MasterChanged(CVisioMaster FAR &Master);
    HRESULT BeforeMasterDelete(CVisioMaster FAR &Master);
    HRESULT PageAdded(CVisioPage FAR &Page);
    HRESULT PageChanged(CVisioPage FAR &Page);
    HRESULT BeforePageDelete(CVisioPage FAR &Page);
    HRESULT ShapeAdded(CVisioShape FAR &Shape);
    HRESULT BeforeSelectionDelete(CVisioSelection FAR &Selection);
    HRESULT ShapeChanged(CVisioShape FAR &Shape);
    HRESULT SelectionAdded(CVisioSelection FAR &Selection);
    HRESULT BeforeShapeDelete(CVisioShape FAR &Shape);
    HRESULT TextChanged(CVisioShape FAR &Shape);
    HRESULT CellChanged(CVisioCell FAR &Cell);
    HRESULT RunModeEntered(CVisioDocument FAR &doc);
    HRESULT DesignModeEntered(CVisioDocument FAR &doc);
    HRESULT BeforeDocumentSave(CVisioDocument FAR &doc);
    HRESULT BeforeDocumentSaveAs(CVisioDocument FAR &doc);
    HRESULT FormulaChanged(CVisioCell FAR &Cell);
    HRESULT ConnectionsAdded(CVisioConnects FAR &Connects);
    HRESULT ConnectionsDeleted(CVisioConnects FAR &Connects);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioEStyles

class FAR CVisioEStyles : public CVisioUnknown
{
VW_PUBLIC:
    CVisioEStyles()
        : CVisioUnknown() { }

    CVisioEStyles(const CVisioEStyles& other)
        : CVisioUnknown(other) { }

    CVisioEStyles(const EStyles FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioEStyles FAR & operator=(const CVisioEStyles FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioEStyles FAR & operator=(const EStyles FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioEStyles() { }

    EStyles FAR * GetIP() const { return (EStyles FAR *) GetUnknown(); }

    operator EStyles FAR * () { return (EStyles FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT StyleAdded(CVisioStyle FAR &Style);
    HRESULT StyleChanged(CVisioStyle FAR &Style);
    HRESULT BeforeStyleDelete(CVisioStyle FAR &Style);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioEStyle

class FAR CVisioEStyle : public CVisioUnknown
{
VW_PUBLIC:
    CVisioEStyle()
        : CVisioUnknown() { }

    CVisioEStyle(const CVisioEStyle& other)
        : CVisioUnknown(other) { }

    CVisioEStyle(const EStyle FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioEStyle FAR & operator=(const CVisioEStyle FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioEStyle FAR & operator=(const EStyle FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioEStyle() { }

    EStyle FAR * GetIP() const { return (EStyle FAR *) GetUnknown(); }

    operator EStyle FAR * () { return (EStyle FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT StyleChanged(CVisioStyle FAR &Style);
    HRESULT BeforeStyleDelete(CVisioStyle FAR &Style);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioEMasters

class FAR CVisioEMasters : public CVisioUnknown
{
VW_PUBLIC:
    CVisioEMasters()
        : CVisioUnknown() { }

    CVisioEMasters(const CVisioEMasters& other)
        : CVisioUnknown(other) { }

    CVisioEMasters(const EMasters FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioEMasters FAR & operator=(const CVisioEMasters FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioEMasters FAR & operator=(const EMasters FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioEMasters() { }

    EMasters FAR * GetIP() const { return (EMasters FAR *) GetUnknown(); }

    operator EMasters FAR * () { return (EMasters FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT MasterAdded(CVisioMaster FAR &Master);
    HRESULT MasterChanged(CVisioMaster FAR &Master);
    HRESULT BeforeMasterDelete(CVisioMaster FAR &Master);
    HRESULT ShapeAdded(CVisioShape FAR &Shape);
    HRESULT BeforeSelectionDelete(CVisioSelection FAR &Selection);
    HRESULT ShapeChanged(CVisioShape FAR &Shape);
    HRESULT SelectionAdded(CVisioSelection FAR &Selection);
    HRESULT BeforeShapeDelete(CVisioShape FAR &Shape);
    HRESULT TextChanged(CVisioShape FAR &Shape);
    HRESULT CellChanged(CVisioCell FAR &Cell);
    HRESULT FormulaChanged(CVisioCell FAR &Cell);
    HRESULT ConnectionsAdded(CVisioConnects FAR &Connects);
    HRESULT ConnectionsDeleted(CVisioConnects FAR &Connects);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioEMaster

class FAR CVisioEMaster : public CVisioUnknown
{
VW_PUBLIC:
    CVisioEMaster()
        : CVisioUnknown() { }

    CVisioEMaster(const CVisioEMaster& other)
        : CVisioUnknown(other) { }

    CVisioEMaster(const EMaster FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioEMaster FAR & operator=(const CVisioEMaster FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioEMaster FAR & operator=(const EMaster FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioEMaster() { }

    EMaster FAR * GetIP() const { return (EMaster FAR *) GetUnknown(); }

    operator EMaster FAR * () { return (EMaster FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT MasterChanged(CVisioMaster FAR &Master);
    HRESULT BeforeMasterDelete(CVisioMaster FAR &Master);
    HRESULT ShapeAdded(CVisioShape FAR &Shape);
    HRESULT BeforeSelectionDelete(CVisioSelection FAR &Selection);
    HRESULT ShapeChanged(CVisioShape FAR &Shape);
    HRESULT SelectionAdded(CVisioSelection FAR &Selection);
    HRESULT BeforeShapeDelete(CVisioShape FAR &Shape);
    HRESULT TextChanged(CVisioShape FAR &Shape);
    HRESULT CellChanged(CVisioCell FAR &Cell);
    HRESULT FormulaChanged(CVisioCell FAR &Cell);
    HRESULT ConnectionsAdded(CVisioConnects FAR &Connects);
    HRESULT ConnectionsDeleted(CVisioConnects FAR &Connects);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioEPages

class FAR CVisioEPages : public CVisioUnknown
{
VW_PUBLIC:
    CVisioEPages()
        : CVisioUnknown() { }

    CVisioEPages(const CVisioEPages& other)
        : CVisioUnknown(other) { }

    CVisioEPages(const EPages FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioEPages FAR & operator=(const CVisioEPages FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioEPages FAR & operator=(const EPages FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioEPages() { }

    EPages FAR * GetIP() const { return (EPages FAR *) GetUnknown(); }

    operator EPages FAR * () { return (EPages FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT PageAdded(CVisioPage FAR &Page);
    HRESULT PageChanged(CVisioPage FAR &Page);
    HRESULT BeforePageDelete(CVisioPage FAR &Page);
    HRESULT ShapeAdded(CVisioShape FAR &Shape);
    HRESULT BeforeSelectionDelete(CVisioSelection FAR &Selection);
    HRESULT ShapeChanged(CVisioShape FAR &Shape);
    HRESULT SelectionAdded(CVisioSelection FAR &Selection);
    HRESULT BeforeShapeDelete(CVisioShape FAR &Shape);
    HRESULT TextChanged(CVisioShape FAR &Shape);
    HRESULT CellChanged(CVisioCell FAR &Cell);
    HRESULT FormulaChanged(CVisioCell FAR &Cell);
    HRESULT ConnectionsAdded(CVisioConnects FAR &Connects);
    HRESULT ConnectionsDeleted(CVisioConnects FAR &Connects);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioEPage

class FAR CVisioEPage : public CVisioUnknown
{
VW_PUBLIC:
    CVisioEPage()
        : CVisioUnknown() { }

    CVisioEPage(const CVisioEPage& other)
        : CVisioUnknown(other) { }

    CVisioEPage(const EPage FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioEPage FAR & operator=(const CVisioEPage FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioEPage FAR & operator=(const EPage FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioEPage() { }

    EPage FAR * GetIP() const { return (EPage FAR *) GetUnknown(); }

    operator EPage FAR * () { return (EPage FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT PageChanged(CVisioPage FAR &Page);
    HRESULT BeforePageDelete(CVisioPage FAR &Page);
    HRESULT ShapeAdded(CVisioShape FAR &Shape);
    HRESULT BeforeSelectionDelete(CVisioSelection FAR &Selection);
    HRESULT ShapeChanged(CVisioShape FAR &Shape);
    HRESULT SelectionAdded(CVisioSelection FAR &Selection);
    HRESULT BeforeShapeDelete(CVisioShape FAR &Shape);
    HRESULT TextChanged(CVisioShape FAR &Shape);
    HRESULT CellChanged(CVisioCell FAR &Cell);
    HRESULT FormulaChanged(CVisioCell FAR &Cell);
    HRESULT ConnectionsAdded(CVisioConnects FAR &Connects);
    HRESULT ConnectionsDeleted(CVisioConnects FAR &Connects);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioEShape

class FAR CVisioEShape : public CVisioUnknown
{
VW_PUBLIC:
    CVisioEShape()
        : CVisioUnknown() { }

    CVisioEShape(const CVisioEShape& other)
        : CVisioUnknown(other) { }

    CVisioEShape(const EShape FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioEShape FAR & operator=(const CVisioEShape FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioEShape FAR & operator=(const EShape FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioEShape() { }

    EShape FAR * GetIP() const { return (EShape FAR *) GetUnknown(); }

    operator EShape FAR * () { return (EShape FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT CellChanged(CVisioCell FAR &Cell);
    HRESULT ShapeAdded(CVisioShape FAR &Shape);
    HRESULT BeforeSelectionDelete(CVisioSelection FAR &Selection);
    HRESULT ShapeChanged(CVisioShape FAR &Shape);
    HRESULT SelectionAdded(CVisioSelection FAR &Selection);
    HRESULT BeforeShapeDelete(CVisioShape FAR &Shape);
    HRESULT TextChanged(CVisioShape FAR &Shape);
    HRESULT FormulaChanged(CVisioCell FAR &Cell);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioECharacters

class FAR CVisioECharacters : public CVisioUnknown
{
VW_PUBLIC:
    CVisioECharacters()
        : CVisioUnknown() { }

    CVisioECharacters(const CVisioECharacters& other)
        : CVisioUnknown(other) { }

    CVisioECharacters(const ECharacters FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioECharacters FAR & operator=(const CVisioECharacters FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioECharacters FAR & operator=(const ECharacters FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioECharacters() { }

    ECharacters FAR * GetIP() const { return (ECharacters FAR *) GetUnknown(); }

    operator ECharacters FAR * () { return (ECharacters FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT TextChanged(CVisioShape FAR &Shape);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioECell

class FAR CVisioECell : public CVisioUnknown
{
VW_PUBLIC:
    CVisioECell()
        : CVisioUnknown() { }

    CVisioECell(const CVisioECell& other)
        : CVisioUnknown(other) { }

    CVisioECell(const ECell FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioECell FAR & operator=(const CVisioECell FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioECell FAR & operator=(const ECell FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioECell() { }

    ECell FAR * GetIP() const { return (ECell FAR *) GetUnknown(); }

    operator ECell FAR * () { return (ECell FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT CellChanged(CVisioCell FAR &Cell);
    HRESULT FormulaChanged(CVisioCell FAR &Cell);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioMenuItem

class FAR CVisioMenuItem : public CVisioUnknown
{
VW_PUBLIC:
    CVisioMenuItem()
        : CVisioUnknown() { }

    CVisioMenuItem(const CVisioMenuItem& other)
        : CVisioUnknown(other) { }

    CVisioMenuItem(const IVMenuItem FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioMenuItem FAR & operator=(const CVisioMenuItem FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioMenuItem FAR & operator=(const IVMenuItem FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioMenuItem() { }

    IVMenuItem FAR * GetIP() const { return (IVMenuItem FAR *) GetUnknown(); }

    operator IVMenuItem FAR * () { return (IVMenuItem FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Delete();
    HRESULT Default(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT Index(long FAR *lpRet);
    HRESULT MenuItems(CVisioMenuItems FAR &rWrap);
    HRESULT Parent(CVisioMenuItems FAR &rWrap);
    HRESULT putCmdNum(VW_CONST short param01);
    HRESULT getCmdNum(short FAR *lpRet);
    HRESULT putHelpContextID(VW_CONST short param01);
    HRESULT getHelpContextID(short FAR *lpRet);
    HRESULT IsSeparator(short FAR *lpRet);
    HRESULT IsHierarchical(short FAR *lpRet);
    HRESULT putCaption(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getCaption(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putActionText(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getActionText(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putMiniHelp(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getMiniHelp(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putAddOnName(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getAddOnName(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putAddOnArgs(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getAddOnArgs(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putHelpFile(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getHelpFile(BSTR_HELPER_CLASS FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioIEnumVMenuItem

class FAR CVisioIEnumVMenuItem : public CVisioUnknown
{
VW_PUBLIC:
    CVisioIEnumVMenuItem()
        : CVisioUnknown() { }

    CVisioIEnumVMenuItem(const CVisioIEnumVMenuItem& other)
        : CVisioUnknown(other) { }

    CVisioIEnumVMenuItem(const IEnumVMenuItem FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioIEnumVMenuItem FAR & operator=(const CVisioIEnumVMenuItem FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioIEnumVMenuItem FAR & operator=(const IEnumVMenuItem FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioIEnumVMenuItem() { }

    IEnumVMenuItem FAR * GetIP() const { return (IEnumVMenuItem FAR *) GetUnknown(); }

    operator IEnumVMenuItem FAR * () { return (IEnumVMenuItem FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT Next(long celt, CVisioMenuItem FAR &rgelt, long FAR *pceltFetched, HRESULT FAR *lpRet);
    HRESULT Skip(long celt, HRESULT FAR *lpRet);
    HRESULT Reset(HRESULT FAR *lpRet);
    HRESULT Clone(IEnumVMenuItem FAR * FAR *ppenm, HRESULT FAR *lpRet);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioMenuItems

class FAR CVisioMenuItems : public CVisioUnknown
{
VW_PUBLIC:
    CVisioMenuItems()
        : CVisioUnknown() { }

    CVisioMenuItems(const CVisioMenuItems& other)
        : CVisioUnknown(other) { }

    CVisioMenuItems(const IVMenuItems FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioMenuItems FAR & operator=(const CVisioMenuItems FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioMenuItems FAR & operator=(const IVMenuItems FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioMenuItems() { }

    IVMenuItems FAR * GetIP() const { return (IVMenuItems FAR *) GetUnknown(); }

    operator IVMenuItems FAR * () { return (IVMenuItems FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT _NewEnum(IUnknown FAR *FAR *lpRet);
    HRESULT Item(long lIndex, CVisioMenuItem FAR &rWrap);
    HRESULT Add(CVisioMenuItem FAR &rWrap);
    HRESULT AddAt(long lIndex, CVisioMenuItem FAR &rWrap);
    HRESULT Count(long FAR *lpRet);
    HRESULT Parent(CVisioMenu FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioMenu

class FAR CVisioMenu : public CVisioUnknown
{
VW_PUBLIC:
    CVisioMenu()
        : CVisioUnknown() { }

    CVisioMenu(const CVisioMenu& other)
        : CVisioUnknown(other) { }

    CVisioMenu(const IVMenu FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioMenu FAR & operator=(const CVisioMenu FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioMenu FAR & operator=(const IVMenu FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioMenu() { }

    IVMenu FAR * GetIP() const { return (IVMenu FAR *) GetUnknown(); }

    operator IVMenu FAR * () { return (IVMenu FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Delete();
    HRESULT Default(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putCaption(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getCaption(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT Index(long FAR *lpRet);
    HRESULT putMDIWindowMenu(VW_CONST short param01);
    HRESULT getMDIWindowMenu(short FAR *lpRet);
    HRESULT MenuItems(CVisioMenuItems FAR &rWrap);
    HRESULT Parent(CVisioMenus FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioIEnumVMenu

class FAR CVisioIEnumVMenu : public CVisioUnknown
{
VW_PUBLIC:
    CVisioIEnumVMenu()
        : CVisioUnknown() { }

    CVisioIEnumVMenu(const CVisioIEnumVMenu& other)
        : CVisioUnknown(other) { }

    CVisioIEnumVMenu(const IEnumVMenu FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioIEnumVMenu FAR & operator=(const CVisioIEnumVMenu FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioIEnumVMenu FAR & operator=(const IEnumVMenu FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioIEnumVMenu() { }

    IEnumVMenu FAR * GetIP() const { return (IEnumVMenu FAR *) GetUnknown(); }

    operator IEnumVMenu FAR * () { return (IEnumVMenu FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT Next(long celt, CVisioMenu FAR &rgelt, long FAR *pceltFetched, HRESULT FAR *lpRet);
    HRESULT Skip(long celt, HRESULT FAR *lpRet);
    HRESULT Reset(HRESULT FAR *lpRet);
    HRESULT Clone(IEnumVMenu FAR * FAR *ppenm, HRESULT FAR *lpRet);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioMenus

class FAR CVisioMenus : public CVisioUnknown
{
VW_PUBLIC:
    CVisioMenus()
        : CVisioUnknown() { }

    CVisioMenus(const CVisioMenus& other)
        : CVisioUnknown(other) { }

    CVisioMenus(const IVMenus FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioMenus FAR & operator=(const CVisioMenus FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioMenus FAR & operator=(const IVMenus FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioMenus() { }

    IVMenus FAR * GetIP() const { return (IVMenus FAR *) GetUnknown(); }

    operator IVMenus FAR * () { return (IVMenus FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT _NewEnum(IUnknown FAR *FAR *lpRet);
    HRESULT Item(long lIndex, CVisioMenu FAR &rWrap);
    HRESULT Add(CVisioMenu FAR &rWrap);
    HRESULT AddAt(long lIndex, CVisioMenu FAR &rWrap);
    HRESULT Count(long FAR *lpRet);
    HRESULT Parent(CVisioMenuSet FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioMenuSet

class FAR CVisioMenuSet : public CVisioUnknown
{
VW_PUBLIC:
    CVisioMenuSet()
        : CVisioUnknown() { }

    CVisioMenuSet(const CVisioMenuSet& other)
        : CVisioUnknown(other) { }

    CVisioMenuSet(const IVMenuSet FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioMenuSet FAR & operator=(const CVisioMenuSet FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioMenuSet FAR & operator=(const IVMenuSet FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioMenuSet() { }

    IVMenuSet FAR * GetIP() const { return (IVMenuSet FAR *) GetUnknown(); }

    operator IVMenuSet FAR * () { return (IVMenuSet FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Delete();
    HRESULT Default(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putCaption(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getCaption(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT SetID(long FAR *lpRet);
    HRESULT Menus(CVisioMenus FAR &rWrap);
    HRESULT Parent(CVisioMenuSets FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioIEnumVMenuSet

class FAR CVisioIEnumVMenuSet : public CVisioUnknown
{
VW_PUBLIC:
    CVisioIEnumVMenuSet()
        : CVisioUnknown() { }

    CVisioIEnumVMenuSet(const CVisioIEnumVMenuSet& other)
        : CVisioUnknown(other) { }

    CVisioIEnumVMenuSet(const IEnumVMenuSet FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioIEnumVMenuSet FAR & operator=(const CVisioIEnumVMenuSet FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioIEnumVMenuSet FAR & operator=(const IEnumVMenuSet FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioIEnumVMenuSet() { }

    IEnumVMenuSet FAR * GetIP() const { return (IEnumVMenuSet FAR *) GetUnknown(); }

    operator IEnumVMenuSet FAR * () { return (IEnumVMenuSet FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT Next(long celt, CVisioMenuSet FAR &rgelt, long FAR *pceltFetched, HRESULT FAR *lpRet);
    HRESULT Skip(long celt, HRESULT FAR *lpRet);
    HRESULT Reset(HRESULT FAR *lpRet);
    HRESULT Clone(IEnumVMenuSet FAR * FAR *ppenm, HRESULT FAR *lpRet);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioMenuSets

class FAR CVisioMenuSets : public CVisioUnknown
{
VW_PUBLIC:
    CVisioMenuSets()
        : CVisioUnknown() { }

    CVisioMenuSets(const CVisioMenuSets& other)
        : CVisioUnknown(other) { }

    CVisioMenuSets(const IVMenuSets FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioMenuSets FAR & operator=(const CVisioMenuSets FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioMenuSets FAR & operator=(const IVMenuSets FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioMenuSets() { }

    IVMenuSets FAR * GetIP() const { return (IVMenuSets FAR *) GetUnknown(); }

    operator IVMenuSets FAR * () { return (IVMenuSets FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT _NewEnum(IUnknown FAR *FAR *lpRet);
    HRESULT Item(long lIndex, CVisioMenuSet FAR &rWrap);
    HRESULT ItemAtID(long lID, CVisioMenuSet FAR &rWrap);
    HRESULT Add(CVisioMenuSet FAR &rWrap);
    HRESULT AddAtID(long lID, CVisioMenuSet FAR &rWrap);
    HRESULT Count(long FAR *lpRet);
    HRESULT Parent(CVisioUIObject FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioToolbarItem

class FAR CVisioToolbarItem : public CVisioUnknown
{
VW_PUBLIC:
    CVisioToolbarItem()
        : CVisioUnknown() { }

    CVisioToolbarItem(const CVisioToolbarItem& other)
        : CVisioUnknown(other) { }

    CVisioToolbarItem(const IVToolbarItem FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioToolbarItem FAR & operator=(const CVisioToolbarItem FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioToolbarItem FAR & operator=(const IVToolbarItem FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioToolbarItem() { }

    IVToolbarItem FAR * GetIP() const { return (IVToolbarItem FAR *) GetUnknown(); }

    operator IVToolbarItem FAR * () { return (IVToolbarItem FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Delete();
    HRESULT IconFileName(BSTR_HELPER_CLASS FAR &IconFileName);
    HRESULT Default(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT Index(long FAR *lpRet);
    HRESULT Parent(CVisioToolbarItems FAR &rWrap);
    HRESULT putCmdNum(VW_CONST short param01);
    HRESULT getCmdNum(short FAR *lpRet);
    HRESULT putHelpContextID(VW_CONST short param01);
    HRESULT getHelpContextID(short FAR *lpRet);
    HRESULT putActionText(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getActionText(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putAddOnName(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getAddOnName(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putAddOnArgs(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getAddOnArgs(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putHelpFile(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getHelpFile(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putCntrlType(VW_CONST short param01);
    HRESULT getCntrlType(short FAR *lpRet);
    HRESULT putCntrlID(VW_CONST short param01);
    HRESULT getCntrlID(short FAR *lpRet);
    HRESULT putTypeSpecific1(VW_CONST short param01);
    HRESULT getTypeSpecific1(short FAR *lpRet);
    HRESULT putPriority(VW_CONST short param01);
    HRESULT getPriority(short FAR *lpRet);
    HRESULT putSpacing(VW_CONST short param01);
    HRESULT getSpacing(short FAR *lpRet);
    HRESULT putTypeSpecific2(VW_CONST short param01);
    HRESULT getTypeSpecific2(short FAR *lpRet);
};


//  ***************************************************************************
//  Declaration of class CVisioIEnumVToolbarItem

class FAR CVisioIEnumVToolbarItem : public CVisioUnknown
{
VW_PUBLIC:
    CVisioIEnumVToolbarItem()
        : CVisioUnknown() { }

    CVisioIEnumVToolbarItem(const CVisioIEnumVToolbarItem& other)
        : CVisioUnknown(other) { }

    CVisioIEnumVToolbarItem(const IEnumVToolbarItem FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioIEnumVToolbarItem FAR & operator=(const CVisioIEnumVToolbarItem FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioIEnumVToolbarItem FAR & operator=(const IEnumVToolbarItem FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioIEnumVToolbarItem() { }

    IEnumVToolbarItem FAR * GetIP() const { return (IEnumVToolbarItem FAR *) GetUnknown(); }

    operator IEnumVToolbarItem FAR * () { return (IEnumVToolbarItem FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT Next(long celt, CVisioToolbarItem FAR &rgelt, long FAR *pceltFetched, HRESULT FAR *lpRet);
    HRESULT Skip(long celt, HRESULT FAR *lpRet);
    HRESULT Reset(HRESULT FAR *lpRet);
    HRESULT Clone(IEnumVToolbarItem FAR * FAR *ppenm, HRESULT FAR *lpRet);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioToolbarItems

class FAR CVisioToolbarItems : public CVisioUnknown
{
VW_PUBLIC:
    CVisioToolbarItems()
        : CVisioUnknown() { }

    CVisioToolbarItems(const CVisioToolbarItems& other)
        : CVisioUnknown(other) { }

    CVisioToolbarItems(const IVToolbarItems FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioToolbarItems FAR & operator=(const CVisioToolbarItems FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioToolbarItems FAR & operator=(const IVToolbarItems FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioToolbarItems() { }

    IVToolbarItems FAR * GetIP() const { return (IVToolbarItems FAR *) GetUnknown(); }

    operator IVToolbarItems FAR * () { return (IVToolbarItems FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT _NewEnum(IUnknown FAR *FAR *lpRet);
    HRESULT Item(long lIndex, CVisioToolbarItem FAR &rWrap);
    HRESULT Add(CVisioToolbarItem FAR &rWrap);
    HRESULT AddAt(long lIndex, CVisioToolbarItem FAR &rWrap);
    HRESULT Count(long FAR *lpRet);
    HRESULT Parent(CVisioToolbar FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioToolbar

class FAR CVisioToolbar : public CVisioUnknown
{
VW_PUBLIC:
    CVisioToolbar()
        : CVisioUnknown() { }

    CVisioToolbar(const CVisioToolbar& other)
        : CVisioUnknown(other) { }

    CVisioToolbar(const IVToolbar FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioToolbar FAR & operator=(const CVisioToolbar FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioToolbar FAR & operator=(const IVToolbar FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioToolbar() { }

    IVToolbar FAR * GetIP() const { return (IVToolbar FAR *) GetUnknown(); }

    operator IVToolbar FAR * () { return (IVToolbar FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Delete();
    HRESULT Default(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putCaption(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getCaption(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT Index(long FAR *lpRet);
    HRESULT ToolbarItems(CVisioToolbarItems FAR &rWrap);
    HRESULT Parent(CVisioToolbars FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioIEnumVToolbar

class FAR CVisioIEnumVToolbar : public CVisioUnknown
{
VW_PUBLIC:
    CVisioIEnumVToolbar()
        : CVisioUnknown() { }

    CVisioIEnumVToolbar(const CVisioIEnumVToolbar& other)
        : CVisioUnknown(other) { }

    CVisioIEnumVToolbar(const IEnumVToolbar FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioIEnumVToolbar FAR & operator=(const CVisioIEnumVToolbar FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioIEnumVToolbar FAR & operator=(const IEnumVToolbar FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioIEnumVToolbar() { }

    IEnumVToolbar FAR * GetIP() const { return (IEnumVToolbar FAR *) GetUnknown(); }

    operator IEnumVToolbar FAR * () { return (IEnumVToolbar FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT Next(long celt, CVisioToolbar FAR &rgelt, long FAR *pceltFetched, HRESULT FAR *lpRet);
    HRESULT Skip(long celt, HRESULT FAR *lpRet);
    HRESULT Reset(HRESULT FAR *lpRet);
    HRESULT Clone(IEnumVToolbar FAR * FAR *ppenm, HRESULT FAR *lpRet);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioToolbars

class FAR CVisioToolbars : public CVisioUnknown
{
VW_PUBLIC:
    CVisioToolbars()
        : CVisioUnknown() { }

    CVisioToolbars(const CVisioToolbars& other)
        : CVisioUnknown(other) { }

    CVisioToolbars(const IVToolbars FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioToolbars FAR & operator=(const CVisioToolbars FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioToolbars FAR & operator=(const IVToolbars FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioToolbars() { }

    IVToolbars FAR * GetIP() const { return (IVToolbars FAR *) GetUnknown(); }

    operator IVToolbars FAR * () { return (IVToolbars FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT _NewEnum(IUnknown FAR *FAR *lpRet);
    HRESULT Item(long lIndex, CVisioToolbar FAR &rWrap);
    HRESULT Add(CVisioToolbar FAR &rWrap);
    HRESULT AddAt(long lIndex, CVisioToolbar FAR &rWrap);
    HRESULT Count(long FAR *lpRet);
    HRESULT Parent(CVisioToolbarSet FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioToolbarSet

class FAR CVisioToolbarSet : public CVisioUnknown
{
VW_PUBLIC:
    CVisioToolbarSet()
        : CVisioUnknown() { }

    CVisioToolbarSet(const CVisioToolbarSet& other)
        : CVisioUnknown(other) { }

    CVisioToolbarSet(const IVToolbarSet FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioToolbarSet FAR & operator=(const CVisioToolbarSet FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioToolbarSet FAR & operator=(const IVToolbarSet FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioToolbarSet() { }

    IVToolbarSet FAR * GetIP() const { return (IVToolbarSet FAR *) GetUnknown(); }

    operator IVToolbarSet FAR * () { return (IVToolbarSet FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Delete();
    HRESULT Default(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putCaption(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getCaption(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT SetID(long FAR *lpRet);
    HRESULT Toolbars(CVisioToolbars FAR &rWrap);
    HRESULT Parent(CVisioToolbarSets FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioIEnumVToolbarSet

class FAR CVisioIEnumVToolbarSet : public CVisioUnknown
{
VW_PUBLIC:
    CVisioIEnumVToolbarSet()
        : CVisioUnknown() { }

    CVisioIEnumVToolbarSet(const CVisioIEnumVToolbarSet& other)
        : CVisioUnknown(other) { }

    CVisioIEnumVToolbarSet(const IEnumVToolbarSet FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioIEnumVToolbarSet FAR & operator=(const CVisioIEnumVToolbarSet FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioIEnumVToolbarSet FAR & operator=(const IEnumVToolbarSet FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioIEnumVToolbarSet() { }

    IEnumVToolbarSet FAR * GetIP() const { return (IEnumVToolbarSet FAR *) GetUnknown(); }

    operator IEnumVToolbarSet FAR * () { return (IEnumVToolbarSet FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT Next(long celt, CVisioToolbarSet FAR &rgelt, long FAR *pceltFetched, HRESULT FAR *lpRet);
    HRESULT Skip(long celt, HRESULT FAR *lpRet);
    HRESULT Reset(HRESULT FAR *lpRet);
    HRESULT Clone(IEnumVToolbarSet FAR * FAR *ppenm, HRESULT FAR *lpRet);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioToolbarSets

class FAR CVisioToolbarSets : public CVisioUnknown
{
VW_PUBLIC:
    CVisioToolbarSets()
        : CVisioUnknown() { }

    CVisioToolbarSets(const CVisioToolbarSets& other)
        : CVisioUnknown(other) { }

    CVisioToolbarSets(const IVToolbarSets FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioToolbarSets FAR & operator=(const CVisioToolbarSets FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioToolbarSets FAR & operator=(const IVToolbarSets FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioToolbarSets() { }

    IVToolbarSets FAR * GetIP() const { return (IVToolbarSets FAR *) GetUnknown(); }

    operator IVToolbarSets FAR * () { return (IVToolbarSets FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT _NewEnum(IUnknown FAR *FAR *lpRet);
    HRESULT Item(long lIndex, CVisioToolbarSet FAR &rWrap);
    HRESULT ItemAtID(long lID, CVisioToolbarSet FAR &rWrap);
    HRESULT Add(CVisioToolbarSet FAR &rWrap);
    HRESULT AddAtID(long lID, CVisioToolbarSet FAR &rWrap);
    HRESULT Count(long FAR *lpRet);
    HRESULT Parent(CVisioUIObject FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioStatusBarItem

class FAR CVisioStatusBarItem : public CVisioUnknown
{
VW_PUBLIC:
    CVisioStatusBarItem()
        : CVisioUnknown() { }

    CVisioStatusBarItem(const CVisioStatusBarItem& other)
        : CVisioUnknown(other) { }

    CVisioStatusBarItem(const IVStatusBarItem FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioStatusBarItem FAR & operator=(const CVisioStatusBarItem FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioStatusBarItem FAR & operator=(const IVStatusBarItem FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioStatusBarItem() { }

    IVStatusBarItem FAR * GetIP() const { return (IVStatusBarItem FAR *) GetUnknown(); }

    operator IVStatusBarItem FAR * () { return (IVStatusBarItem FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Delete();
    HRESULT IconFileName(BSTR_HELPER_CLASS FAR &IconFileName);
    HRESULT Default(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT Index(long FAR *lpRet);
    HRESULT Parent(CVisioStatusBarItems FAR &rWrap);
    HRESULT putCmdNum(VW_CONST short param01);
    HRESULT getCmdNum(short FAR *lpRet);
    HRESULT putHelpContextID(VW_CONST short param01);
    HRESULT getHelpContextID(short FAR *lpRet);
    HRESULT putActionText(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getActionText(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putAddOnName(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getAddOnName(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putAddOnArgs(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getAddOnArgs(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putHelpFile(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getHelpFile(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putCntrlType(VW_CONST short param01);
    HRESULT getCntrlType(short FAR *lpRet);
    HRESULT putCntrlID(VW_CONST short param01);
    HRESULT getCntrlID(short FAR *lpRet);
    HRESULT putTypeSpecific1(VW_CONST short param01);
    HRESULT getTypeSpecific1(short FAR *lpRet);
    HRESULT putPriority(VW_CONST short param01);
    HRESULT getPriority(short FAR *lpRet);
    HRESULT putSpacing(VW_CONST short param01);
    HRESULT getSpacing(short FAR *lpRet);
    HRESULT putTypeSpecific2(VW_CONST short param01);
    HRESULT getTypeSpecific2(short FAR *lpRet);
};


//  ***************************************************************************
//  Declaration of class CVisioIEnumVStatusBarItem

class FAR CVisioIEnumVStatusBarItem : public CVisioUnknown
{
VW_PUBLIC:
    CVisioIEnumVStatusBarItem()
        : CVisioUnknown() { }

    CVisioIEnumVStatusBarItem(const CVisioIEnumVStatusBarItem& other)
        : CVisioUnknown(other) { }

    CVisioIEnumVStatusBarItem(const IEnumVStatusBarItem FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioIEnumVStatusBarItem FAR & operator=(const CVisioIEnumVStatusBarItem FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioIEnumVStatusBarItem FAR & operator=(const IEnumVStatusBarItem FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioIEnumVStatusBarItem() { }

    IEnumVStatusBarItem FAR * GetIP() const { return (IEnumVStatusBarItem FAR *) GetUnknown(); }

    operator IEnumVStatusBarItem FAR * () { return (IEnumVStatusBarItem FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT Next(long celt, CVisioStatusBarItem FAR &rgelt, long FAR *pceltFetched, HRESULT FAR *lpRet);
    HRESULT Skip(long celt, HRESULT FAR *lpRet);
    HRESULT Reset(HRESULT FAR *lpRet);
    HRESULT Clone(IEnumVStatusBarItem FAR * FAR *ppenm, HRESULT FAR *lpRet);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioStatusBarItems

class FAR CVisioStatusBarItems : public CVisioUnknown
{
VW_PUBLIC:
    CVisioStatusBarItems()
        : CVisioUnknown() { }

    CVisioStatusBarItems(const CVisioStatusBarItems& other)
        : CVisioUnknown(other) { }

    CVisioStatusBarItems(const IVStatusBarItems FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioStatusBarItems FAR & operator=(const CVisioStatusBarItems FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioStatusBarItems FAR & operator=(const IVStatusBarItems FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioStatusBarItems() { }

    IVStatusBarItems FAR * GetIP() const { return (IVStatusBarItems FAR *) GetUnknown(); }

    operator IVStatusBarItems FAR * () { return (IVStatusBarItems FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT _NewEnum(IUnknown FAR *FAR *lpRet);
    HRESULT Item(long lIndex, CVisioStatusBarItem FAR &rWrap);
    HRESULT Add(CVisioStatusBarItem FAR &rWrap);
    HRESULT AddAt(long lIndex, CVisioStatusBarItem FAR &rWrap);
    HRESULT Count(long FAR *lpRet);
    HRESULT Parent(CVisioStatusBar FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioStatusBar

class FAR CVisioStatusBar : public CVisioUnknown
{
VW_PUBLIC:
    CVisioStatusBar()
        : CVisioUnknown() { }

    CVisioStatusBar(const CVisioStatusBar& other)
        : CVisioUnknown(other) { }

    CVisioStatusBar(const IVStatusBar FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioStatusBar FAR & operator=(const CVisioStatusBar FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioStatusBar FAR & operator=(const IVStatusBar FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioStatusBar() { }

    IVStatusBar FAR * GetIP() const { return (IVStatusBar FAR *) GetUnknown(); }

    operator IVStatusBar FAR * () { return (IVStatusBar FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Delete();
    HRESULT Default(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putCaption(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getCaption(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT SetID(long FAR *lpRet);
    HRESULT StatusBarItems(CVisioStatusBarItems FAR &rWrap);
    HRESULT Parent(CVisioStatusBars FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioIEnumVStatusBar

class FAR CVisioIEnumVStatusBar : public CVisioUnknown
{
VW_PUBLIC:
    CVisioIEnumVStatusBar()
        : CVisioUnknown() { }

    CVisioIEnumVStatusBar(const CVisioIEnumVStatusBar& other)
        : CVisioUnknown(other) { }

    CVisioIEnumVStatusBar(const IEnumVStatusBar FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioIEnumVStatusBar FAR & operator=(const CVisioIEnumVStatusBar FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioIEnumVStatusBar FAR & operator=(const IEnumVStatusBar FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioIEnumVStatusBar() { }

    IEnumVStatusBar FAR * GetIP() const { return (IEnumVStatusBar FAR *) GetUnknown(); }

    operator IEnumVStatusBar FAR * () { return (IEnumVStatusBar FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT Next(long celt, CVisioStatusBar FAR &rgelt, long FAR *pceltFetched, HRESULT FAR *lpRet);
    HRESULT Skip(long celt, HRESULT FAR *lpRet);
    HRESULT Reset(HRESULT FAR *lpRet);
    HRESULT Clone(IEnumVStatusBar FAR * FAR *ppenm, HRESULT FAR *lpRet);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioStatusBars

class FAR CVisioStatusBars : public CVisioUnknown
{
VW_PUBLIC:
    CVisioStatusBars()
        : CVisioUnknown() { }

    CVisioStatusBars(const CVisioStatusBars& other)
        : CVisioUnknown(other) { }

    CVisioStatusBars(const IVStatusBars FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioStatusBars FAR & operator=(const CVisioStatusBars FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioStatusBars FAR & operator=(const IVStatusBars FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioStatusBars() { }

    IVStatusBars FAR * GetIP() const { return (IVStatusBars FAR *) GetUnknown(); }

    operator IVStatusBars FAR * () { return (IVStatusBars FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT _NewEnum(IUnknown FAR *FAR *lpRet);
    HRESULT Item(long lIndex, CVisioStatusBar FAR &rWrap);
    HRESULT ItemAtID(long lID, CVisioStatusBar FAR &rWrap);
    HRESULT Add(CVisioStatusBar FAR &rWrap);
    HRESULT AddAtID(long lID, CVisioStatusBar FAR &rWrap);
    HRESULT Count(long FAR *lpRet);
    HRESULT Parent(CVisioUIObject FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioAccelItem

class FAR CVisioAccelItem : public CVisioUnknown
{
VW_PUBLIC:
    CVisioAccelItem()
        : CVisioUnknown() { }

    CVisioAccelItem(const CVisioAccelItem& other)
        : CVisioUnknown(other) { }

    CVisioAccelItem(const IVAccelItem FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioAccelItem FAR & operator=(const CVisioAccelItem FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioAccelItem FAR & operator=(const IVAccelItem FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioAccelItem() { }

    IVAccelItem FAR * GetIP() const { return (IVAccelItem FAR *) GetUnknown(); }

    operator IVAccelItem FAR * () { return (IVAccelItem FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Delete();
    HRESULT Default(short FAR *lpRet);
    HRESULT putCmdNum(VW_CONST short param01);
    HRESULT getCmdNum(short FAR *lpRet);
    HRESULT putKey(VW_CONST short param01);
    HRESULT getKey(short FAR *lpRet);
    HRESULT putAlt(VW_CONST short param01);
    HRESULT getAlt(short FAR *lpRet);
    HRESULT putShift(VW_CONST short param01);
    HRESULT getShift(short FAR *lpRet);
    HRESULT putControl(VW_CONST short param01);
    HRESULT getControl(short FAR *lpRet);
    HRESULT Parent(CVisioAccelItems FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioIEnumVAccelItem

class FAR CVisioIEnumVAccelItem : public CVisioUnknown
{
VW_PUBLIC:
    CVisioIEnumVAccelItem()
        : CVisioUnknown() { }

    CVisioIEnumVAccelItem(const CVisioIEnumVAccelItem& other)
        : CVisioUnknown(other) { }

    CVisioIEnumVAccelItem(const IEnumVAccelItem FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioIEnumVAccelItem FAR & operator=(const CVisioIEnumVAccelItem FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioIEnumVAccelItem FAR & operator=(const IEnumVAccelItem FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioIEnumVAccelItem() { }

    IEnumVAccelItem FAR * GetIP() const { return (IEnumVAccelItem FAR *) GetUnknown(); }

    operator IEnumVAccelItem FAR * () { return (IEnumVAccelItem FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT Next(long celt, CVisioAccelItem FAR &rgelt, long FAR *pceltFetched, HRESULT FAR *lpRet);
    HRESULT Skip(long celt, HRESULT FAR *lpRet);
    HRESULT Reset(HRESULT FAR *lpRet);
    HRESULT Clone(IEnumVAccelItem FAR * FAR *ppenm, HRESULT FAR *lpRet);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioAccelItems

class FAR CVisioAccelItems : public CVisioUnknown
{
VW_PUBLIC:
    CVisioAccelItems()
        : CVisioUnknown() { }

    CVisioAccelItems(const CVisioAccelItems& other)
        : CVisioUnknown(other) { }

    CVisioAccelItems(const IVAccelItems FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioAccelItems FAR & operator=(const CVisioAccelItems FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioAccelItems FAR & operator=(const IVAccelItems FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioAccelItems() { }

    IVAccelItems FAR * GetIP() const { return (IVAccelItems FAR *) GetUnknown(); }

    operator IVAccelItems FAR * () { return (IVAccelItems FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT _NewEnum(IUnknown FAR *FAR *lpRet);
    HRESULT Item(long lIndex, CVisioAccelItem FAR &rWrap);
    HRESULT Add(CVisioAccelItem FAR &rWrap);
    HRESULT Count(long FAR *lpRet);
    HRESULT Parent(CVisioAccelTable FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioAccelTable

class FAR CVisioAccelTable : public CVisioUnknown
{
VW_PUBLIC:
    CVisioAccelTable()
        : CVisioUnknown() { }

    CVisioAccelTable(const CVisioAccelTable& other)
        : CVisioUnknown(other) { }

    CVisioAccelTable(const IVAccelTable FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioAccelTable FAR & operator=(const CVisioAccelTable FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioAccelTable FAR & operator=(const IVAccelTable FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioAccelTable() { }

    IVAccelTable FAR * GetIP() const { return (IVAccelTable FAR *) GetUnknown(); }

    operator IVAccelTable FAR * () { return (IVAccelTable FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Delete();
    HRESULT Default(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putTableName(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getTableName(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT SetID(long FAR *lpRet);
    HRESULT AccelItems(CVisioAccelItems FAR &rWrap);
    HRESULT Parent(CVisioAccelTables FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioIEnumVAccelTable

class FAR CVisioIEnumVAccelTable : public CVisioUnknown
{
VW_PUBLIC:
    CVisioIEnumVAccelTable()
        : CVisioUnknown() { }

    CVisioIEnumVAccelTable(const CVisioIEnumVAccelTable& other)
        : CVisioUnknown(other) { }

    CVisioIEnumVAccelTable(const IEnumVAccelTable FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioIEnumVAccelTable FAR & operator=(const CVisioIEnumVAccelTable FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioIEnumVAccelTable FAR & operator=(const IEnumVAccelTable FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioIEnumVAccelTable() { }

    IEnumVAccelTable FAR * GetIP() const { return (IEnumVAccelTable FAR *) GetUnknown(); }

    operator IEnumVAccelTable FAR * () { return (IEnumVAccelTable FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    HRESULT Next(long celt, CVisioAccelTable FAR &rgelt, long FAR *pceltFetched, HRESULT FAR *lpRet);
    HRESULT Skip(long celt, HRESULT FAR *lpRet);
    HRESULT Reset(HRESULT FAR *lpRet);
    HRESULT Clone(IEnumVAccelTable FAR * FAR *ppenm, HRESULT FAR *lpRet);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioAccelTables

class FAR CVisioAccelTables : public CVisioUnknown
{
VW_PUBLIC:
    CVisioAccelTables()
        : CVisioUnknown() { }

    CVisioAccelTables(const CVisioAccelTables& other)
        : CVisioUnknown(other) { }

    CVisioAccelTables(const IVAccelTables FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioAccelTables FAR & operator=(const CVisioAccelTables FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioAccelTables FAR & operator=(const IVAccelTables FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioAccelTables() { }

    IVAccelTables FAR * GetIP() const { return (IVAccelTables FAR *) GetUnknown(); }

    operator IVAccelTables FAR * () { return (IVAccelTables FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT _NewEnum(IUnknown FAR *FAR *lpRet);
    HRESULT Item(long lIndex, CVisioAccelTable FAR &rWrap);
    HRESULT ItemAtID(long lID, CVisioAccelTable FAR &rWrap);
    HRESULT Add(CVisioAccelTable FAR &rWrap);
    HRESULT AddAtID(long lID, CVisioAccelTable FAR &rWrap);
    HRESULT Count(long FAR *lpRet);
    HRESULT Parent(CVisioUIObject FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioUIObject

class FAR CVisioUIObject : public CVisioUnknown
{
VW_PUBLIC:
    CVisioUIObject()
        : CVisioUnknown() { }

    CVisioUIObject(const CVisioUIObject& other)
        : CVisioUnknown(other) { }

    CVisioUIObject(const IVUIObject FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioUIObject FAR & operator=(const CVisioUIObject FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioUIObject FAR & operator=(const IVUIObject FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioUIObject() { }

    IVUIObject FAR * GetIP() const { return (IVUIObject FAR *) GetUnknown(); }

    operator IVUIObject FAR * () { return (IVUIObject FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Delete();
    HRESULT Default(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putName(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getName(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putFlavor(VW_CONST short param01);
    HRESULT getFlavor(short FAR *lpRet);
    HRESULT MenuSets(CVisioMenuSets FAR &rWrap);
    HRESULT ToolbarSets(CVisioToolbarSets FAR &rWrap);
    HRESULT StatusBars(CVisioStatusBars FAR &rWrap);
    HRESULT AccelTables(CVisioAccelTables FAR &rWrap);
    HRESULT SaveToFile(BSTR_HELPER_CLASS FAR &FileName);
    HRESULT LoadFromFile(BSTR_HELPER_CLASS FAR &FileName);
    HRESULT UpdateUI();
};


//  ***************************************************************************
//  Declaration of class CVisioHyperlink

class FAR CVisioHyperlink : public CVisioUnknown
{
VW_PUBLIC:
    CVisioHyperlink()
        : CVisioUnknown() { }

    CVisioHyperlink(const CVisioHyperlink& other)
        : CVisioUnknown(other) { }

    CVisioHyperlink(const IVHyperlink FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioHyperlink FAR & operator=(const CVisioHyperlink FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioHyperlink FAR & operator=(const IVHyperlink FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioHyperlink() { }

    IVHyperlink FAR * GetIP() const { return (IVHyperlink FAR *) GetUnknown(); }

    operator IVHyperlink FAR * () { return (IVHyperlink FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT getDescription(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putDescription(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT Shape(CVisioShape FAR &rWrap);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Stat(short FAR *lpRet);
    HRESULT getAddress(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putAddress(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getSubAddress(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putSubAddress(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getNewWindow(short FAR *lpRet);
    HRESULT putNewWindow(VW_CONST short param01);
    HRESULT getExtraInfo(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putExtraInfo(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getFrame(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putFrame(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT AddToFavorites(VARIANT_HELPER_CLASS FAR &FavoritesTitle);
    HRESULT Follow();
    HRESULT Delete();
    HRESULT Copy();
    HRESULT CreateURL(short CanonicalForm, BSTR_HELPER_CLASS FAR &rWrap);
};


//  ***************************************************************************
//  Declaration of class CVisioOLEObjects

class FAR CVisioOLEObjects : public CVisioUnknown
{
VW_PUBLIC:
    CVisioOLEObjects()
        : CVisioUnknown() { }

    CVisioOLEObjects(const CVisioOLEObjects& other)
        : CVisioUnknown(other) { }

    CVisioOLEObjects(const IVOLEObjects FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioOLEObjects FAR & operator=(const CVisioOLEObjects FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioOLEObjects FAR & operator=(const IVOLEObjects FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioOLEObjects() { }

    IVOLEObjects FAR * GetIP() const { return (IVOLEObjects FAR *) GetUnknown(); }

    operator IVOLEObjects FAR * () { return (IVOLEObjects FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Stat(short FAR *lpRet);
    HRESULT Item(VARIANT_HELPER_CLASS FAR &NameOrIndex, CVisioOLEObject FAR &rWrap);
    HRESULT Count(short FAR *lpRet);
};


//  ***************************************************************************
//  Declaration of class CVisioOLEObject

class FAR CVisioOLEObject : public CVisioUnknown
{
VW_PUBLIC:
    CVisioOLEObject()
        : CVisioUnknown() { }

    CVisioOLEObject(const CVisioOLEObject& other)
        : CVisioUnknown(other) { }

    CVisioOLEObject(const IVOLEObject FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioOLEObject FAR & operator=(const CVisioOLEObject FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioOLEObject FAR & operator=(const IVOLEObject FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioOLEObject() { }

    IVOLEObject FAR * GetIP() const { return (IVOLEObject FAR *) GetUnknown(); }

    operator IVOLEObject FAR * () { return (IVOLEObject FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT Shape(CVisioShape FAR &rWrap);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Stat(short FAR *lpRet);
    HRESULT ClassID(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT ProgID(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT ForeignType(short FAR *lpRet);
    HRESULT Object(IDispatch FAR *FAR *lpRet);
};


//  ***************************************************************************
//  Declaration of class CVisioPaths

class FAR CVisioPaths : public CVisioUnknown
{
VW_PUBLIC:
    CVisioPaths()
        : CVisioUnknown() { }

    CVisioPaths(const CVisioPaths& other)
        : CVisioUnknown(other) { }

    CVisioPaths(const IVPaths FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioPaths FAR & operator=(const CVisioPaths FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioPaths FAR & operator=(const IVPaths FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioPaths() { }

    IVPaths FAR * GetIP() const { return (IVPaths FAR *) GetUnknown(); }

    operator IVPaths FAR * () { return (IVPaths FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Item(short Index, CVisioPath FAR &rWrap);
    HRESULT Count(short FAR *lpRet);
};


//  ***************************************************************************
//  Declaration of class CVisioPath

class FAR CVisioPath : public CVisioUnknown
{
VW_PUBLIC:
    CVisioPath()
        : CVisioUnknown() { }

    CVisioPath(const CVisioPath& other)
        : CVisioUnknown(other) { }

    CVisioPath(const IVPath FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioPath FAR & operator=(const CVisioPath FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioPath FAR & operator=(const IVPath FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioPath() { }

    IVPath FAR * GetIP() const { return (IVPath FAR *) GetUnknown(); }

    operator IVPath FAR * () { return (IVPath FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Item(short Index, CVisioCurve FAR &rWrap);
    HRESULT Count(short FAR *lpRet);
    HRESULT Closed(short FAR *lpRet);
    HRESULT Points(double Tolerance, /*double*/ SAFEARRAY FAR * FAR *xyArray);
};


//  ***************************************************************************
//  Declaration of class CVisioCurve

class FAR CVisioCurve : public CVisioUnknown
{
VW_PUBLIC:
    CVisioCurve()
        : CVisioUnknown() { }

    CVisioCurve(const CVisioCurve& other)
        : CVisioUnknown(other) { }

    CVisioCurve(const IVCurve FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioCurve FAR & operator=(const CVisioCurve FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioCurve FAR & operator=(const IVCurve FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioCurve() { }

    IVCurve FAR * GetIP() const { return (IVCurve FAR *) GetUnknown(); }

    operator IVCurve FAR * () { return (IVCurve FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT ObjectType(short FAR *lpRet);
    HRESULT Closed(short FAR *lpRet);
    HRESULT Points(double Tolerance, /*double*/ SAFEARRAY FAR * FAR *xyArray);
    HRESULT Start(double FAR *lpRet);
    HRESULT End(double FAR *lpRet);
    HRESULT Point(double t, double FAR *x, double FAR *y);
    HRESULT PointAndDerivatives(double t, short n, double FAR *x, double FAR *y, double FAR *dxdt, double FAR *dydt, double FAR *ddxdt, double FAR *ddydt);
};


//  ***************************************************************************
//  Declaration of class CVisioExtender

class FAR CVisioExtender : public CVisioUnknown
{
VW_PUBLIC:
    CVisioExtender()
        : CVisioUnknown() { }

    CVisioExtender(const CVisioExtender& other)
        : CVisioUnknown(other) { }

    CVisioExtender(const IVExtender FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioExtender FAR & operator=(const CVisioExtender FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioExtender FAR & operator=(const IVExtender FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioExtender() { }

    IVExtender FAR * GetIP() const { return (IVExtender FAR *) GetUnknown(); }

    operator IVExtender FAR * () { return (IVExtender FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT getName(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putName(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT Object(IUnknown FAR *FAR *lpRet);
    HRESULT Parent(IUnknown FAR *FAR *lpRet);
    HRESULT Delete();
    HRESULT Index();
    HRESULT Shape(CVisioShape FAR &rWrap);
    HRESULT Group();
    HRESULT BringForward();
    HRESULT BringToFront();
    HRESULT ConvertToGroup();
    HRESULT SendBackward();
    HRESULT SendToBack();
    HRESULT Document(CVisioDocument FAR &rWrap);
    HRESULT ShapeParent(IDispatch FAR *FAR *lpRet);
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT Master(CVisioMaster FAR &rWrap);
    HRESULT Cells(BSTR_HELPER_CLASS FAR &CellName, CVisioCell FAR &rWrap);
    HRESULT CellsSRC(short Section, short Row, short Column, CVisioCell FAR &rWrap);
    HRESULT getData1(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putData1(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getData2(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putData2(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getData3(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putData3(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getHelp(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putHelp(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT NameID(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT ShapeCopy();
    HRESULT ShapeCut();
    HRESULT ShapeDelete();
    HRESULT ShapeDuplicate();
    HRESULT RowCount(short Section, short FAR *lpRet);
    HRESULT AddSection(short Section, short FAR *lpRet);
    HRESULT DeleteSection(short Section);
    HRESULT AddRow(short Section, short Row, short RowTag, short FAR *lpRet);
    HRESULT DeleteRow(short Section, short Row);
    HRESULT RowsCellCount(short Section, short Row, short FAR *lpRet);
    HRESULT getRowType(short Section, short Row, short FAR *lpRet);
    HRESULT putRowType(VW_CONST short Section, VW_CONST short Row, VW_CONST short param03);
    HRESULT SetCenter(double xPos, double yPos);
    HRESULT Connects(CVisioConnects FAR &rWrap);
    HRESULT ShapeIndex(short FAR *lpRet);
    HRESULT getStyle(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT StyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getLineStyle(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putLineStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT LineStyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getFillStyle(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putFillStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT FillStyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT Export(BSTR_HELPER_CLASS FAR &FileName);
    HRESULT UniqueID(short fUniqueID, BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT ContainingPage(CVisioPage FAR &rWrap);
    HRESULT ContainingMaster(CVisioMaster FAR &rWrap);
    HRESULT ContainingShape(CVisioShape FAR &rWrap);
    HRESULT SectionExists(short Section, short fLocalExists, short FAR *lpRet);
    HRESULT RowExists(short Section, short Row, short fLocalExists, short FAR *lpRet);
    HRESULT CellExists(BSTR_HELPER_CLASS FAR &CellName, short fLocalExists, short FAR *lpRet);
    HRESULT CellsSRCExists(short Section, short Row, short Column, short fLocalExists, short FAR *lpRet);
    HRESULT LayerCount(short FAR *lpRet);
    HRESULT Layer(short Index, CVisioLayer FAR &rWrap);
    HRESULT AddNamedRow(short Section, BSTR_HELPER_CLASS FAR &RowName, short RowTag, short FAR *lpRet);
    HRESULT AddRows(short Section, short Row, short RowTag, short RowCount, short FAR *lpRet);
    HRESULT EventList(CVisioEventList FAR &rWrap);
    HRESULT PersistsEvents(short FAR *lpRet);
    HRESULT ClassID(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT ShapeObject(IDispatch FAR *FAR *lpRet);
    HRESULT OpenSheetWindow(CVisioWindow FAR &rWrap);
    HRESULT ShapeID(short FAR *lpRet);
    HRESULT GetFormulas(/*short*/ SAFEARRAY FAR * FAR *SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *formulaArray);
    HRESULT GetResults(/*short*/ SAFEARRAY FAR * FAR *SRCStream, short Flags, /*VARIANT*/ SAFEARRAY FAR * FAR *UnitsNamesOrCodes, /*VARIANT*/ SAFEARRAY FAR * FAR *resultArray);
    HRESULT SetFormulas(/*short*/ SAFEARRAY FAR * FAR *SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *formulaArray, short Flags, short FAR *lpRet);
    HRESULT SetResults(/*short*/ SAFEARRAY FAR * FAR *SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *UnitsNamesOrCodes, /*VARIANT*/ SAFEARRAY FAR * FAR *resultArray, short Flags, short FAR *lpRet);
    HRESULT FromConnects(CVisioConnects FAR &rWrap);
    HRESULT BoundingBox(short Flags, double FAR *lpr8Left, double FAR *lpr8Bottom, double FAR *lpr8Right, double FAR *lpr8Top);
    HRESULT HitTest(double xPos, double yPos, double Tolerance, short FAR *lpRet);
    HRESULT Hyperlink(CVisioHyperlink FAR &rWrap);
    HRESULT ProgID(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT ObjectIsInherited(short FAR *lpRet);
};


//  ***************************************************************************
//  Declaration of class CVisioDispExtender

class FAR CVisioDispExtender : public CVisioUnknown
{
VW_PUBLIC:
    CVisioDispExtender()
        : CVisioUnknown() { }

    CVisioDispExtender(const CVisioDispExtender& other)
        : CVisioUnknown(other) { }

    CVisioDispExtender(const IVDispExtender FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioDispExtender FAR & operator=(const CVisioDispExtender FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioDispExtender FAR & operator=(const IVDispExtender FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioDispExtender() { }

    IVDispExtender FAR * GetIP() const { return (IVDispExtender FAR *) GetUnknown(); }

    operator IVDispExtender FAR * () { return (IVDispExtender FAR *) GetUnknown(); }

VW_PUBLIC:
#if 0
    //  This method list provided for information only...
    void QueryInterface(REFIID riid, void FAR * FAR *ppvObj);
    unsigned long AddRef();
    unsigned long Release();
    void GetTypeInfoCount(unsigned long FAR *pctinfo);
    void GetTypeInfo(unsigned long itinfo, unsigned long lcid, ITypeInfo FAR *FAR *pptinfo);
    void GetIDsOfNames(REFIID riid, OLECHAR FAR *FAR *rgszNames, unsigned long cNames, unsigned long lcid, long FAR *rgdispid);
    void Invoke(long dispidMember, REFIID riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS FAR *pdispparams, VARIANT_HELPER_CLASS FAR &pvarResult, EXCEPINFO FAR *pexcepinfo, unsigned long FAR *puArgErr);
    HRESULT getName(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putName(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT Object(IUnknown FAR *FAR *lpRet);
    HRESULT Parent(IUnknown FAR *FAR *lpRet);
    HRESULT Delete();
    HRESULT Index();
    HRESULT Shape(CVisioShape FAR &rWrap);
    HRESULT Group();
    HRESULT BringForward();
    HRESULT BringToFront();
    HRESULT ConvertToGroup();
    HRESULT SendBackward();
    HRESULT SendToBack();
    HRESULT Document(CVisioDocument FAR &rWrap);
    HRESULT ShapeParent(IDispatch FAR *FAR *lpRet);
    HRESULT Application(CVisioApplication FAR &rWrap);
    HRESULT Master(CVisioMaster FAR &rWrap);
    HRESULT Cells(BSTR_HELPER_CLASS FAR &CellName, CVisioCell FAR &rWrap);
    HRESULT CellsSRC(short Section, short Row, short Column, CVisioCell FAR &rWrap);
    HRESULT getData1(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putData1(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getData2(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putData2(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getData3(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putData3(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getHelp(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putHelp(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT NameID(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT ShapeCopy();
    HRESULT ShapeCut();
    HRESULT ShapeDelete();
    HRESULT ShapeDuplicate();
    HRESULT RowCount(short Section, short FAR *lpRet);
    HRESULT AddSection(short Section, short FAR *lpRet);
    HRESULT DeleteSection(short Section);
    HRESULT AddRow(short Section, short Row, short RowTag, short FAR *lpRet);
    HRESULT DeleteRow(short Section, short Row);
    HRESULT RowsCellCount(short Section, short Row, short FAR *lpRet);
    HRESULT getRowType(short Section, short Row, short FAR *lpRet);
    HRESULT putRowType(VW_CONST short Section, VW_CONST short Row, VW_CONST short param03);
    HRESULT SetCenter(double xPos, double yPos);
    HRESULT Connects(CVisioConnects FAR &rWrap);
    HRESULT ShapeIndex(short FAR *lpRet);
    HRESULT getStyle(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT StyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getLineStyle(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putLineStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT LineStyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT getFillStyle(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT putFillStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT FillStyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01);
    HRESULT Export(BSTR_HELPER_CLASS FAR &FileName);
    HRESULT UniqueID(short fUniqueID, BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT ContainingPage(CVisioPage FAR &rWrap);
    HRESULT ContainingMaster(CVisioMaster FAR &rWrap);
    HRESULT ContainingShape(CVisioShape FAR &rWrap);
    HRESULT SectionExists(short Section, short fLocalExists, short FAR *lpRet);
    HRESULT RowExists(short Section, short Row, short fLocalExists, short FAR *lpRet);
    HRESULT CellExists(BSTR_HELPER_CLASS FAR &CellName, short fLocalExists, short FAR *lpRet);
    HRESULT CellsSRCExists(short Section, short Row, short Column, short fLocalExists, short FAR *lpRet);
    HRESULT LayerCount(short FAR *lpRet);
    HRESULT Layer(short Index, CVisioLayer FAR &rWrap);
    HRESULT AddNamedRow(short Section, BSTR_HELPER_CLASS FAR &RowName, short RowTag, short FAR *lpRet);
    HRESULT AddRows(short Section, short Row, short RowTag, short RowCount, short FAR *lpRet);
    HRESULT EventList(CVisioEventList FAR &rWrap);
    HRESULT PersistsEvents(short FAR *lpRet);
    HRESULT ClassID(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT ShapeObject(IDispatch FAR *FAR *lpRet);
    HRESULT OpenSheetWindow(CVisioWindow FAR &rWrap);
    HRESULT ShapeID(short FAR *lpRet);
    HRESULT GetFormulas(/*short*/ SAFEARRAY FAR * FAR *SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *formulaArray);
    HRESULT GetResults(/*short*/ SAFEARRAY FAR * FAR *SRCStream, short Flags, /*VARIANT*/ SAFEARRAY FAR * FAR *UnitsNamesOrCodes, /*VARIANT*/ SAFEARRAY FAR * FAR *resultArray);
    HRESULT SetFormulas(/*short*/ SAFEARRAY FAR * FAR *SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *formulaArray, short Flags, short FAR *lpRet);
    HRESULT SetResults(/*short*/ SAFEARRAY FAR * FAR *SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *UnitsNamesOrCodes, /*VARIANT*/ SAFEARRAY FAR * FAR *resultArray, short Flags, short FAR *lpRet);
    HRESULT FromConnects(CVisioConnects FAR &rWrap);
    HRESULT BoundingBox(short Flags, double FAR *lpr8Left, double FAR *lpr8Bottom, double FAR *lpr8Right, double FAR *lpr8Top);
    HRESULT HitTest(double xPos, double yPos, double Tolerance, short FAR *lpRet);
    HRESULT Hyperlink(CVisioHyperlink FAR &rWrap);
    HRESULT ProgID(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT ObjectIsInherited(short FAR *lpRet);
#endif  //  0
};


//  ***************************************************************************
//  Declaration of class CVisioAmbients

class FAR CVisioAmbients : public CVisioUnknown
{
VW_PUBLIC:
    CVisioAmbients()
        : CVisioUnknown() { }

    CVisioAmbients(const CVisioAmbients& other)
        : CVisioUnknown(other) { }

    CVisioAmbients(const IVAmbients FAR * other, BOOL bAssumeResponsibility= FALSE)
        : CVisioUnknown((LPUNKNOWN)other, bAssumeResponsibility) { }

    const CVisioAmbients FAR & operator=(const CVisioAmbients FAR &other)
        {
        if ( &other != this )
            CopyIP(other.GetUnknown());

        return *this;
        }

    const CVisioAmbients FAR & operator=(const IVAmbients FAR * other)
        {
        if ( (LPUNKNOWN)other != GetUnknown() )
            CopyIP((LPUNKNOWN)other);

        return *this;
        }

    virtual ~CVisioAmbients() { }

    IVAmbients FAR * GetIP() const { return (IVAmbients FAR *) GetUnknown(); }

    operator IVAmbients FAR * () { return (IVAmbients FAR *) GetUnknown(); }

VW_PUBLIC:
    HRESULT BackColor(long FAR *lpRet);
    HRESULT DisplayName(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT Font(IDispatch FAR *FAR *lpRet);
    HRESULT ForeColor(long FAR *lpRet);
    HRESULT LocaleID(long FAR *lpRet);
    HRESULT MessageReflect(VARIANT_BOOL FAR *lpRet);
    HRESULT ScaleUnits(BSTR_HELPER_CLASS FAR &rWrap);
    HRESULT TextAlign(short FAR *lpRet);
    HRESULT UserMode(VARIANT_BOOL FAR *lpRet);
    HRESULT UIDead(VARIANT_BOOL FAR *lpRet);
    HRESULT ShowGrabHandles(VARIANT_BOOL FAR *lpRet);
    HRESULT ShowHatching(VARIANT_BOOL FAR *lpRet);
    HRESULT DisplayAsDefault(VARIANT_BOOL FAR *lpRet);
    HRESULT SupportsMnemonics(VARIANT_BOOL FAR *lpRet);
    HRESULT AutoClip(VARIANT_BOOL FAR *lpRet);
    HRESULT Appearance(long FAR *lpRet);
};


//  ***************************************************************************
//  TypeLib Interface class implementations

//  ***************************************************************************
//  Implementation of class CVisioApplication

VW_INLINE HRESULT CVisioApplication::ActiveDocument(CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, ActiveDocument);
    if (NULL!=GetIP())
        hr= GetIP()->get_ActiveDocument(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, ActiveDocument);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioApplication::ActivePage(CVisioPage FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVPage FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, ActivePage);
    if (NULL!=GetIP())
        hr= GetIP()->get_ActivePage(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, ActivePage);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioApplication::ActiveWindow(CVisioWindow FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVWindow FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, ActiveWindow);
    if (NULL!=GetIP())
        hr= GetIP()->get_ActiveWindow(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, ActiveWindow);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioApplication::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioApplication::Documents(CVisioDocuments FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocuments FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, Documents);
    if (NULL!=GetIP())
        hr= GetIP()->get_Documents(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, Documents);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioApplication::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::getOnDataChangeDelay(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, getOnDataChangeDelay);
    if (NULL!=GetIP())
        hr= GetIP()->get_OnDataChangeDelay(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, getOnDataChangeDelay);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::putOnDataChangeDelay(VW_CONST long param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, putOnDataChangeDelay);
    if (NULL!=GetIP())
        hr= GetIP()->put_OnDataChangeDelay(param01);
    CHECK_HRESULT(hr, CVisioApplication, putOnDataChangeDelay);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::ProcessID(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, ProcessID);
    if (NULL!=GetIP())
        hr= GetIP()->get_ProcessID(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, ProcessID);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::Quit()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, Quit);
    if (NULL!=GetIP())
        hr= GetIP()->Quit();
    CHECK_HRESULT(hr, CVisioApplication, Quit);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::Redo()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, Redo);
    if (NULL!=GetIP())
        hr= GetIP()->Redo();
    CHECK_HRESULT(hr, CVisioApplication, Redo);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::getScreenUpdating(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, getScreenUpdating);
    if (NULL!=GetIP())
        hr= GetIP()->get_ScreenUpdating(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, getScreenUpdating);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::putScreenUpdating(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, putScreenUpdating);
    if (NULL!=GetIP())
        hr= GetIP()->put_ScreenUpdating(param01);
    CHECK_HRESULT(hr, CVisioApplication, putScreenUpdating);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, Stat);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::Undo()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, Undo);
    if (NULL!=GetIP())
        hr= GetIP()->Undo();
    CHECK_HRESULT(hr, CVisioApplication, Undo);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::Version(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, Version);
    if (NULL!=GetIP())
        hr= GetIP()->get_Version(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, Version);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioApplication::WindowHandle(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, WindowHandle);
    if (NULL!=GetIP())
        hr= GetIP()->get_WindowHandle(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, WindowHandle);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::Windows(CVisioWindows FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVWindows FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, Windows);
    if (NULL!=GetIP())
        hr= GetIP()->get_Windows(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, Windows);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioApplication::Language(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, Language);
    if (NULL!=GetIP())
        hr= GetIP()->get_Language(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, Language);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::IsVisio16(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, IsVisio16);
    if (NULL!=GetIP())
        hr= GetIP()->get_IsVisio16(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, IsVisio16);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::IsVisio32(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, IsVisio32);
    if (NULL!=GetIP())
        hr= GetIP()->get_IsVisio32(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, IsVisio32);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::WindowHandle32(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, WindowHandle32);
    if (NULL!=GetIP())
        hr= GetIP()->get_WindowHandle32(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, WindowHandle32);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::InstanceHandle(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, InstanceHandle);
    if (NULL!=GetIP())
        hr= GetIP()->get_InstanceHandle(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, InstanceHandle);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::InstanceHandle32(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, InstanceHandle32);
    if (NULL!=GetIP())
        hr= GetIP()->get_InstanceHandle32(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, InstanceHandle32);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::BuiltInMenus(CVisioUIObject FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVUIObject FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, BuiltInMenus);
    if (NULL!=GetIP())
        hr= GetIP()->get_BuiltInMenus(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, BuiltInMenus);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioApplication::BuiltInToolbars(short fIgnored, CVisioUIObject FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVUIObject FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, BuiltInToolbars);
    if (NULL!=GetIP())
        hr= GetIP()->get_BuiltInToolbars(fIgnored, &lpObj);
    CHECK_HRESULT(hr, CVisioApplication, BuiltInToolbars);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioApplication::CustomMenus(CVisioUIObject FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVUIObject FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, CustomMenus);
    if (NULL!=GetIP())
        hr= GetIP()->get_CustomMenus(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, CustomMenus);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioApplication::SetCustomMenus(CVisioUIObject FAR &MenusObject)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, SetCustomMenus);
    if (NULL!=GetIP())
        hr= GetIP()->SetCustomMenus(MenusObject);
    CHECK_HRESULT(hr, CVisioApplication, SetCustomMenus);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::getCustomMenusFile(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, getCustomMenusFile);
    if (NULL!=GetIP())
        hr= GetIP()->get_CustomMenusFile(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, getCustomMenusFile);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioApplication::putCustomMenusFile(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, putCustomMenusFile);
    if (NULL!=GetIP())
        hr= GetIP()->put_CustomMenusFile(param01);
    CHECK_HRESULT(hr, CVisioApplication, putCustomMenusFile);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::ClearCustomMenus()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, ClearCustomMenus);
    if (NULL!=GetIP())
        hr= GetIP()->ClearCustomMenus();
    CHECK_HRESULT(hr, CVisioApplication, ClearCustomMenus);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::CustomToolbars(CVisioUIObject FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVUIObject FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, CustomToolbars);
    if (NULL!=GetIP())
        hr= GetIP()->get_CustomToolbars(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, CustomToolbars);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioApplication::SetCustomToolbars(CVisioUIObject FAR &ToolbarsObject)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, SetCustomToolbars);
    if (NULL!=GetIP())
        hr= GetIP()->SetCustomToolbars(ToolbarsObject);
    CHECK_HRESULT(hr, CVisioApplication, SetCustomToolbars);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::getCustomToolbarsFile(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, getCustomToolbarsFile);
    if (NULL!=GetIP())
        hr= GetIP()->get_CustomToolbarsFile(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, getCustomToolbarsFile);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioApplication::putCustomToolbarsFile(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, putCustomToolbarsFile);
    if (NULL!=GetIP())
        hr= GetIP()->put_CustomToolbarsFile(param01);
    CHECK_HRESULT(hr, CVisioApplication, putCustomToolbarsFile);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::ClearCustomToolbars()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, ClearCustomToolbars);
    if (NULL!=GetIP())
        hr= GetIP()->ClearCustomToolbars();
    CHECK_HRESULT(hr, CVisioApplication, ClearCustomToolbars);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::getAddonPaths(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, getAddonPaths);
    if (NULL!=GetIP())
        hr= GetIP()->get_AddonPaths(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, getAddonPaths);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioApplication::putAddonPaths(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, putAddonPaths);
    if (NULL!=GetIP())
        hr= GetIP()->put_AddonPaths(param01);
    CHECK_HRESULT(hr, CVisioApplication, putAddonPaths);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::getDrawingPaths(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, getDrawingPaths);
    if (NULL!=GetIP())
        hr= GetIP()->get_DrawingPaths(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, getDrawingPaths);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioApplication::putDrawingPaths(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, putDrawingPaths);
    if (NULL!=GetIP())
        hr= GetIP()->put_DrawingPaths(param01);
    CHECK_HRESULT(hr, CVisioApplication, putDrawingPaths);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::getFilterPaths(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, getFilterPaths);
    if (NULL!=GetIP())
        hr= GetIP()->get_FilterPaths(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, getFilterPaths);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioApplication::putFilterPaths(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, putFilterPaths);
    if (NULL!=GetIP())
        hr= GetIP()->put_FilterPaths(param01);
    CHECK_HRESULT(hr, CVisioApplication, putFilterPaths);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::getHelpPaths(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, getHelpPaths);
    if (NULL!=GetIP())
        hr= GetIP()->get_HelpPaths(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, getHelpPaths);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioApplication::putHelpPaths(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, putHelpPaths);
    if (NULL!=GetIP())
        hr= GetIP()->put_HelpPaths(param01);
    CHECK_HRESULT(hr, CVisioApplication, putHelpPaths);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::getStartupPaths(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, getStartupPaths);
    if (NULL!=GetIP())
        hr= GetIP()->get_StartupPaths(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, getStartupPaths);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioApplication::putStartupPaths(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, putStartupPaths);
    if (NULL!=GetIP())
        hr= GetIP()->put_StartupPaths(param01);
    CHECK_HRESULT(hr, CVisioApplication, putStartupPaths);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::getStencilPaths(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, getStencilPaths);
    if (NULL!=GetIP())
        hr= GetIP()->get_StencilPaths(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, getStencilPaths);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioApplication::putStencilPaths(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, putStencilPaths);
    if (NULL!=GetIP())
        hr= GetIP()->put_StencilPaths(param01);
    CHECK_HRESULT(hr, CVisioApplication, putStencilPaths);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::getTemplatePaths(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, getTemplatePaths);
    if (NULL!=GetIP())
        hr= GetIP()->get_TemplatePaths(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, getTemplatePaths);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioApplication::putTemplatePaths(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, putTemplatePaths);
    if (NULL!=GetIP())
        hr= GetIP()->put_TemplatePaths(param01);
    CHECK_HRESULT(hr, CVisioApplication, putTemplatePaths);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::getUserName(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, getUserName);
    if (NULL!=GetIP())
        hr= GetIP()->get_UserName(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, getUserName);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioApplication::putUserName(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, putUserName);
    if (NULL!=GetIP())
        hr= GetIP()->put_UserName(param01);
    CHECK_HRESULT(hr, CVisioApplication, putUserName);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::getPromptForSummary(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, getPromptForSummary);
    if (NULL!=GetIP())
        hr= GetIP()->get_PromptForSummary(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, getPromptForSummary);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::putPromptForSummary(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, putPromptForSummary);
    if (NULL!=GetIP())
        hr= GetIP()->put_PromptForSummary(param01);
    CHECK_HRESULT(hr, CVisioApplication, putPromptForSummary);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::Addons(CVisioAddons FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVAddons FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, Addons);
    if (NULL!=GetIP())
        hr= GetIP()->get_Addons(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, Addons);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioApplication::SaveWorkspaceAs(BSTR_HELPER_CLASS FAR &FileName)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, SaveWorkspaceAs);
    if (NULL!=GetIP())
        hr= GetIP()->SaveWorkspaceAs(FileName);
    CHECK_HRESULT(hr, CVisioApplication, SaveWorkspaceAs);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::DoCmd(short CommandID)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, DoCmd);
    if (NULL!=GetIP())
        hr= GetIP()->DoCmd(CommandID);
    CHECK_HRESULT(hr, CVisioApplication, DoCmd);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::ProfileName(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, ProfileName);
    if (NULL!=GetIP())
        hr= GetIP()->get_ProfileName(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, ProfileName);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioApplication::EventInfo(long reservedPass0, BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, EventInfo);
    if (NULL!=GetIP())
        hr= GetIP()->get_EventInfo(reservedPass0, &lpObj);
    CHECK_HRESULT(hr, CVisioApplication, EventInfo);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioApplication::EventList(CVisioEventList FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEventList FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, EventList);
    if (NULL!=GetIP())
        hr= GetIP()->get_EventList(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, EventList);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioApplication::PersistsEvents(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, PersistsEvents);
    if (NULL!=GetIP())
        hr= GetIP()->get_PersistsEvents(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, PersistsEvents);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::Active(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, Active);
    if (NULL!=GetIP())
        hr= GetIP()->get_Active(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, Active);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::getDeferRecalc(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, getDeferRecalc);
    if (NULL!=GetIP())
        hr= GetIP()->get_DeferRecalc(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, getDeferRecalc);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::putDeferRecalc(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, putDeferRecalc);
    if (NULL!=GetIP())
        hr= GetIP()->put_DeferRecalc(param01);
    CHECK_HRESULT(hr, CVisioApplication, putDeferRecalc);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::getAlertResponse(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, getAlertResponse);
    if (NULL!=GetIP())
        hr= GetIP()->get_AlertResponse(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, getAlertResponse);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::putAlertResponse(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, putAlertResponse);
    if (NULL!=GetIP())
        hr= GetIP()->put_AlertResponse(param01);
    CHECK_HRESULT(hr, CVisioApplication, putAlertResponse);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::getShowProgress(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, getShowProgress);
    if (NULL!=GetIP())
        hr= GetIP()->get_ShowProgress(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, getShowProgress);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::putShowProgress(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, putShowProgress);
    if (NULL!=GetIP())
        hr= GetIP()->put_ShowProgress(param01);
    CHECK_HRESULT(hr, CVisioApplication, putShowProgress);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::Vbe(IDispatch FAR *FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, Vbe);
    if (NULL!=GetIP())
        hr= GetIP()->get_Vbe(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, Vbe);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::getShowMenus(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, getShowMenus);
    if (NULL!=GetIP())
        hr= GetIP()->get_ShowMenus(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, getShowMenus);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::putShowMenus(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, putShowMenus);
    if (NULL!=GetIP())
        hr= GetIP()->put_ShowMenus(param01);
    CHECK_HRESULT(hr, CVisioApplication, putShowMenus);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::getToolbarStyle(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, getToolbarStyle);
    if (NULL!=GetIP())
        hr= GetIP()->get_ToolbarStyle(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, getToolbarStyle);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::putToolbarStyle(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, putToolbarStyle);
    if (NULL!=GetIP())
        hr= GetIP()->put_ToolbarStyle(param01);
    CHECK_HRESULT(hr, CVisioApplication, putToolbarStyle);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::getShowStatusBar(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, getShowStatusBar);
    if (NULL!=GetIP())
        hr= GetIP()->get_ShowStatusBar(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, getShowStatusBar);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::putShowStatusBar(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, putShowStatusBar);
    if (NULL!=GetIP())
        hr= GetIP()->put_ShowStatusBar(param01);
    CHECK_HRESULT(hr, CVisioApplication, putShowStatusBar);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::getEventsEnabled(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, getEventsEnabled);
    if (NULL!=GetIP())
        hr= GetIP()->get_EventsEnabled(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, getEventsEnabled);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::putEventsEnabled(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, putEventsEnabled);
    if (NULL!=GetIP())
        hr= GetIP()->put_EventsEnabled(param01);
    CHECK_HRESULT(hr, CVisioApplication, putEventsEnabled);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::FormatResult(VARIANT_HELPER_CLASS FAR &StringOrNumber, VARIANT_HELPER_CLASS FAR &UnitsIn, VARIANT_HELPER_CLASS FAR &UnitsOut, BSTR_HELPER_CLASS FAR &Format, BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, FormatResult);
    if (NULL!=GetIP())
        hr= GetIP()->FormatResult(StringOrNumber, UnitsIn, UnitsOut, Format, &lpObj);
    CHECK_HRESULT(hr, CVisioApplication, FormatResult);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioApplication::ConvertResult(VARIANT_HELPER_CLASS FAR &StringOrNumber, VARIANT_HELPER_CLASS FAR &UnitsIn, VARIANT_HELPER_CLASS FAR &UnitsOut, double FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, ConvertResult);
    if (NULL!=GetIP())
        hr= GetIP()->ConvertResult(StringOrNumber, UnitsIn, UnitsOut, lpRet);
    CHECK_HRESULT(hr, CVisioApplication, ConvertResult);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::Path(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioApplication, Path);
    if (NULL!=GetIP())
        hr= GetIP()->get_Path(&lpObj);
    CHECK_HRESULT(hr, CVisioApplication, Path);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioApplication::EnumDirectories(BSTR_HELPER_CLASS FAR &PathsString, /*BSTR*/ SAFEARRAY FAR * FAR *NameArray)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, EnumDirectories);
    if (NULL!=GetIP())
        hr= GetIP()->EnumDirectories(PathsString, NameArray);
    CHECK_HRESULT(hr, CVisioApplication, EnumDirectories);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::getTraceFlags(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, getTraceFlags);
    if (NULL!=GetIP())
        hr= GetIP()->get_TraceFlags(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, getTraceFlags);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::putTraceFlags(VW_CONST long param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, putTraceFlags);
    if (NULL!=GetIP())
        hr= GetIP()->put_TraceFlags(param01);
    CHECK_HRESULT(hr, CVisioApplication, putTraceFlags);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::PurgeUndo()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, PurgeUndo);
    if (NULL!=GetIP())
        hr= GetIP()->PurgeUndo();
    CHECK_HRESULT(hr, CVisioApplication, PurgeUndo);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::QueueMarkerEvent(BSTR_HELPER_CLASS FAR &ContextString, long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, QueueMarkerEvent);
    if (NULL!=GetIP())
        hr= GetIP()->QueueMarkerEvent(ContextString, lpRet);
    CHECK_HRESULT(hr, CVisioApplication, QueueMarkerEvent);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::getShowToolbar(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, getShowToolbar);
    if (NULL!=GetIP())
        hr= GetIP()->get_ShowToolbar(lpRet);
    CHECK_HRESULT(hr, CVisioApplication, getShowToolbar);
    return hr;
}


VW_INLINE HRESULT CVisioApplication::putShowToolbar(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioApplication, putShowToolbar);
    if (NULL!=GetIP())
        hr= GetIP()->put_ShowToolbar(param01);
    CHECK_HRESULT(hr, CVisioApplication, putShowToolbar);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioCell

VW_INLINE HRESULT CVisioCell::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioCell, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioCell, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioCell::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioCell, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioCell::Error(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, Error);
    if (NULL!=GetIP())
        hr= GetIP()->get_Error(lpRet);
    CHECK_HRESULT(hr, CVisioCell, Error);
    return hr;
}


VW_INLINE HRESULT CVisioCell::getFormula(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioCell, getFormula);
    if (NULL!=GetIP())
        hr= GetIP()->get_Formula(&lpObj);
    CHECK_HRESULT(hr, CVisioCell, getFormula);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioCell::putFormula(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, putFormula);
    if (NULL!=GetIP())
        hr= GetIP()->put_Formula(param01);
    CHECK_HRESULT(hr, CVisioCell, putFormula);
    return hr;
}


VW_INLINE HRESULT CVisioCell::FormulaForce(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, FormulaForce);
    if (NULL!=GetIP())
        hr= GetIP()->put_FormulaForce(param01);
    CHECK_HRESULT(hr, CVisioCell, FormulaForce);
    return hr;
}


VW_INLINE HRESULT CVisioCell::GlueTo(CVisioCell FAR &CellObject)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, GlueTo);
    if (NULL!=GetIP())
        hr= GetIP()->GlueTo(CellObject);
    CHECK_HRESULT(hr, CVisioCell, GlueTo);
    return hr;
}


VW_INLINE HRESULT CVisioCell::GlueToPos(CVisioShape FAR &SheetObject, double xPercent, double yPercent)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, GlueToPos);
    if (NULL!=GetIP())
        hr= GetIP()->GlueToPos(SheetObject, xPercent, yPercent);
    CHECK_HRESULT(hr, CVisioCell, GlueToPos);
    return hr;
}


VW_INLINE HRESULT CVisioCell::getResult(VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, double FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, getResult);
    if (NULL!=GetIP())
        hr= GetIP()->get_Result(UnitsNameOrCode, lpRet);
    CHECK_HRESULT(hr, CVisioCell, getResult);
    return hr;
}


VW_INLINE HRESULT CVisioCell::putResult(VW_CONST VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, VW_CONST double param02)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, putResult);
    if (NULL!=GetIP())
        hr= GetIP()->put_Result(UnitsNameOrCode, param02);
    CHECK_HRESULT(hr, CVisioCell, putResult);
    return hr;
}


VW_INLINE HRESULT CVisioCell::ResultForce(VW_CONST VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, VW_CONST double param02)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, ResultForce);
    if (NULL!=GetIP())
        hr= GetIP()->put_ResultForce(UnitsNameOrCode, param02);
    CHECK_HRESULT(hr, CVisioCell, ResultForce);
    return hr;
}


VW_INLINE HRESULT CVisioCell::getResultIU(double FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, getResultIU);
    if (NULL!=GetIP())
        hr= GetIP()->get_ResultIU(lpRet);
    CHECK_HRESULT(hr, CVisioCell, getResultIU);
    return hr;
}


VW_INLINE HRESULT CVisioCell::putResultIU(VW_CONST double param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, putResultIU);
    if (NULL!=GetIP())
        hr= GetIP()->put_ResultIU(param01);
    CHECK_HRESULT(hr, CVisioCell, putResultIU);
    return hr;
}


VW_INLINE HRESULT CVisioCell::ResultIUForce(VW_CONST double param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, ResultIUForce);
    if (NULL!=GetIP())
        hr= GetIP()->put_ResultIUForce(param01);
    CHECK_HRESULT(hr, CVisioCell, ResultIUForce);
    return hr;
}


VW_INLINE HRESULT CVisioCell::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioCell, Stat);
    return hr;
}


VW_INLINE HRESULT CVisioCell::Units(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, Units);
    if (NULL!=GetIP())
        hr= GetIP()->get_Units(lpRet);
    CHECK_HRESULT(hr, CVisioCell, Units);
    return hr;
}


VW_INLINE HRESULT CVisioCell::Name(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioCell, Name);
    if (NULL!=GetIP())
        hr= GetIP()->get_Name(&lpObj);
    CHECK_HRESULT(hr, CVisioCell, Name);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioCell::LocalName(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioCell, LocalName);
    if (NULL!=GetIP())
        hr= GetIP()->get_LocalName(&lpObj);
    CHECK_HRESULT(hr, CVisioCell, LocalName);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioCell::putRowName(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, putRowName);
    if (NULL!=GetIP())
        hr= GetIP()->put_RowName(param01);
    CHECK_HRESULT(hr, CVisioCell, putRowName);
    return hr;
}


VW_INLINE HRESULT CVisioCell::Document(CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioCell, Document);
    if (NULL!=GetIP())
        hr= GetIP()->get_Document(&lpObj);
    CHECK_HRESULT(hr, CVisioCell, Document);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioCell::Shape(CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioCell, Shape);
    if (NULL!=GetIP())
        hr= GetIP()->get_Shape(&lpObj);
    CHECK_HRESULT(hr, CVisioCell, Shape);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioCell::Style(CVisioStyle FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVStyle FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioCell, Style);
    if (NULL!=GetIP())
        hr= GetIP()->get_Style(&lpObj);
    CHECK_HRESULT(hr, CVisioCell, Style);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioCell::Section(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, Section);
    if (NULL!=GetIP())
        hr= GetIP()->get_Section(lpRet);
    CHECK_HRESULT(hr, CVisioCell, Section);
    return hr;
}


VW_INLINE HRESULT CVisioCell::Row(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, Row);
    if (NULL!=GetIP())
        hr= GetIP()->get_Row(lpRet);
    CHECK_HRESULT(hr, CVisioCell, Row);
    return hr;
}


VW_INLINE HRESULT CVisioCell::Column(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, Column);
    if (NULL!=GetIP())
        hr= GetIP()->get_Column(lpRet);
    CHECK_HRESULT(hr, CVisioCell, Column);
    return hr;
}


VW_INLINE HRESULT CVisioCell::IsConstant(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, IsConstant);
    if (NULL!=GetIP())
        hr= GetIP()->get_IsConstant(lpRet);
    CHECK_HRESULT(hr, CVisioCell, IsConstant);
    return hr;
}


VW_INLINE HRESULT CVisioCell::IsInherited(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, IsInherited);
    if (NULL!=GetIP())
        hr= GetIP()->get_IsInherited(lpRet);
    CHECK_HRESULT(hr, CVisioCell, IsInherited);
    return hr;
}


VW_INLINE HRESULT CVisioCell::ResultInt(VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, short fRound, long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, ResultInt);
    if (NULL!=GetIP())
        hr= GetIP()->get_ResultInt(UnitsNameOrCode, fRound, lpRet);
    CHECK_HRESULT(hr, CVisioCell, ResultInt);
    return hr;
}


VW_INLINE HRESULT CVisioCell::ResultFromInt(VW_CONST VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, VW_CONST long param02)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, ResultFromInt);
    if (NULL!=GetIP())
        hr= GetIP()->put_ResultFromInt(UnitsNameOrCode, param02);
    CHECK_HRESULT(hr, CVisioCell, ResultFromInt);
    return hr;
}


VW_INLINE HRESULT CVisioCell::ResultFromIntForce(VW_CONST VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, VW_CONST long param02)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, ResultFromIntForce);
    if (NULL!=GetIP())
        hr= GetIP()->put_ResultFromIntForce(UnitsNameOrCode, param02);
    CHECK_HRESULT(hr, CVisioCell, ResultFromIntForce);
    return hr;
}


VW_INLINE HRESULT CVisioCell::ResultStr(VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioCell, ResultStr);
    if (NULL!=GetIP())
        hr= GetIP()->get_ResultStr(UnitsNameOrCode, &lpObj);
    CHECK_HRESULT(hr, CVisioCell, ResultStr);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioCell::Trigger()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, Trigger);
    if (NULL!=GetIP())
        hr= GetIP()->Trigger();
    CHECK_HRESULT(hr, CVisioCell, Trigger);
    return hr;
}


VW_INLINE HRESULT CVisioCell::getRowName(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioCell, getRowName);
    if (NULL!=GetIP())
        hr= GetIP()->get_RowName(&lpObj);
    CHECK_HRESULT(hr, CVisioCell, getRowName);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioCell::EventList(CVisioEventList FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEventList FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioCell, EventList);
    if (NULL!=GetIP())
        hr= GetIP()->get_EventList(&lpObj);
    CHECK_HRESULT(hr, CVisioCell, EventList);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioCell::PersistsEvents(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCell, PersistsEvents);
    if (NULL!=GetIP())
        hr= GetIP()->get_PersistsEvents(lpRet);
    CHECK_HRESULT(hr, CVisioCell, PersistsEvents);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioCharacters

VW_INLINE HRESULT CVisioCharacters::AddCustomField(BSTR_HELPER_CLASS FAR &Formula, short Format)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, AddCustomField);
    if (NULL!=GetIP())
        hr= GetIP()->AddCustomField(Formula, Format);
    CHECK_HRESULT(hr, CVisioCharacters, AddCustomField);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::AddField(short Category, short Code, short Format)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, AddField);
    if (NULL!=GetIP())
        hr= GetIP()->AddField(Category, Code, Format);
    CHECK_HRESULT(hr, CVisioCharacters, AddField);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioCharacters, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioCharacters, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioCharacters::getBegin(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, getBegin);
    if (NULL!=GetIP())
        hr= GetIP()->get_Begin(lpRet);
    CHECK_HRESULT(hr, CVisioCharacters, getBegin);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::putBegin(VW_CONST long param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, putBegin);
    if (NULL!=GetIP())
        hr= GetIP()->put_Begin(param01);
    CHECK_HRESULT(hr, CVisioCharacters, putBegin);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::CharCount(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, CharCount);
    if (NULL!=GetIP())
        hr= GetIP()->get_CharCount(lpRet);
    CHECK_HRESULT(hr, CVisioCharacters, CharCount);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::CharProps(VW_CONST short CellIndex, VW_CONST short param02)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, CharProps);
    if (NULL!=GetIP())
        hr= GetIP()->put_CharProps(CellIndex, param02);
    CHECK_HRESULT(hr, CVisioCharacters, CharProps);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::CharPropsRow(short BiasLorR, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, CharPropsRow);
    if (NULL!=GetIP())
        hr= GetIP()->get_CharPropsRow(BiasLorR, lpRet);
    CHECK_HRESULT(hr, CVisioCharacters, CharPropsRow);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::Copy()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, Copy);
    if (NULL!=GetIP())
        hr= GetIP()->Copy();
    CHECK_HRESULT(hr, CVisioCharacters, Copy);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::Cut()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, Cut);
    if (NULL!=GetIP())
        hr= GetIP()->Cut();
    CHECK_HRESULT(hr, CVisioCharacters, Cut);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioCharacters, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::getEnd(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, getEnd);
    if (NULL!=GetIP())
        hr= GetIP()->get_End(lpRet);
    CHECK_HRESULT(hr, CVisioCharacters, getEnd);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::putEnd(VW_CONST long param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, putEnd);
    if (NULL!=GetIP())
        hr= GetIP()->put_End(param01);
    CHECK_HRESULT(hr, CVisioCharacters, putEnd);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::FieldCategory(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, FieldCategory);
    if (NULL!=GetIP())
        hr= GetIP()->get_FieldCategory(lpRet);
    CHECK_HRESULT(hr, CVisioCharacters, FieldCategory);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::FieldCode(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, FieldCode);
    if (NULL!=GetIP())
        hr= GetIP()->get_FieldCode(lpRet);
    CHECK_HRESULT(hr, CVisioCharacters, FieldCode);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::FieldFormat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, FieldFormat);
    if (NULL!=GetIP())
        hr= GetIP()->get_FieldFormat(lpRet);
    CHECK_HRESULT(hr, CVisioCharacters, FieldFormat);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::FieldFormula(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioCharacters, FieldFormula);
    if (NULL!=GetIP())
        hr= GetIP()->get_FieldFormula(&lpObj);
    CHECK_HRESULT(hr, CVisioCharacters, FieldFormula);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioCharacters::IsField(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, IsField);
    if (NULL!=GetIP())
        hr= GetIP()->get_IsField(lpRet);
    CHECK_HRESULT(hr, CVisioCharacters, IsField);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::ParaProps(VW_CONST short CellIndex, VW_CONST short param02)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, ParaProps);
    if (NULL!=GetIP())
        hr= GetIP()->put_ParaProps(CellIndex, param02);
    CHECK_HRESULT(hr, CVisioCharacters, ParaProps);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::ParaPropsRow(short BiasLorR, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, ParaPropsRow);
    if (NULL!=GetIP())
        hr= GetIP()->get_ParaPropsRow(BiasLorR, lpRet);
    CHECK_HRESULT(hr, CVisioCharacters, ParaPropsRow);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::Paste()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, Paste);
    if (NULL!=GetIP())
        hr= GetIP()->Paste();
    CHECK_HRESULT(hr, CVisioCharacters, Paste);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::TabPropsRow(short BiasLorR, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, TabPropsRow);
    if (NULL!=GetIP())
        hr= GetIP()->get_TabPropsRow(BiasLorR, lpRet);
    CHECK_HRESULT(hr, CVisioCharacters, TabPropsRow);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::RunBegin(short RunType, long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, RunBegin);
    if (NULL!=GetIP())
        hr= GetIP()->get_RunBegin(RunType, lpRet);
    CHECK_HRESULT(hr, CVisioCharacters, RunBegin);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::RunEnd(short RunType, long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, RunEnd);
    if (NULL!=GetIP())
        hr= GetIP()->get_RunEnd(RunType, lpRet);
    CHECK_HRESULT(hr, CVisioCharacters, RunEnd);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::Shape(CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioCharacters, Shape);
    if (NULL!=GetIP())
        hr= GetIP()->get_Shape(&lpObj);
    CHECK_HRESULT(hr, CVisioCharacters, Shape);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioCharacters::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioCharacters, Stat);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::TextAsString(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioCharacters, TextAsString);
    if (NULL!=GetIP())
        hr= GetIP()->get_TextAsString(&lpObj);
    CHECK_HRESULT(hr, CVisioCharacters, TextAsString);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioCharacters::putText(VW_CONST VARIANT_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, putText);
    if (NULL!=GetIP())
        hr= GetIP()->put_Text(param01);
    CHECK_HRESULT(hr, CVisioCharacters, putText);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::Document(CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioCharacters, Document);
    if (NULL!=GetIP())
        hr= GetIP()->get_Document(&lpObj);
    CHECK_HRESULT(hr, CVisioCharacters, Document);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioCharacters::EventList(CVisioEventList FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEventList FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioCharacters, EventList);
    if (NULL!=GetIP())
        hr= GetIP()->get_EventList(&lpObj);
    CHECK_HRESULT(hr, CVisioCharacters, EventList);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioCharacters::PersistsEvents(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCharacters, PersistsEvents);
    if (NULL!=GetIP())
        hr= GetIP()->get_PersistsEvents(lpRet);
    CHECK_HRESULT(hr, CVisioCharacters, PersistsEvents);
    return hr;
}


VW_INLINE HRESULT CVisioCharacters::getText(VARIANT_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    VARIANT lpObj;
    VariantInit(&lpObj);

    CHECK_IP(GetIP(), CVisioCharacters, getText);
    if (NULL!=GetIP())
        hr= GetIP()->get_Text(&lpObj);
    CHECK_HRESULT(hr, CVisioCharacters, getText);

#ifdef NO_VARIANT_HELPER
    VariantCopy(&rWrap, &lpObj);
#else
    rWrap= lpObj;
#endif  //  NO_VARIANT_HELPER

    VariantClear(&lpObj);

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioConnect

VW_INLINE HRESULT CVisioConnect::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioConnect, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioConnect, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioConnect::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioConnect, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioConnect, Stat);
    return hr;
}


VW_INLINE HRESULT CVisioConnect::FromSheet(CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioConnect, FromSheet);
    if (NULL!=GetIP())
        hr= GetIP()->get_FromSheet(&lpObj);
    CHECK_HRESULT(hr, CVisioConnect, FromSheet);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioConnect::ToSheet(CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioConnect, ToSheet);
    if (NULL!=GetIP())
        hr= GetIP()->get_ToSheet(&lpObj);
    CHECK_HRESULT(hr, CVisioConnect, ToSheet);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioConnect::FromCell(CVisioCell FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVCell FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioConnect, FromCell);
    if (NULL!=GetIP())
        hr= GetIP()->get_FromCell(&lpObj);
    CHECK_HRESULT(hr, CVisioConnect, FromCell);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioConnect::ToCell(CVisioCell FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVCell FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioConnect, ToCell);
    if (NULL!=GetIP())
        hr= GetIP()->get_ToCell(&lpObj);
    CHECK_HRESULT(hr, CVisioConnect, ToCell);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioConnect::FromPart(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioConnect, FromPart);
    if (NULL!=GetIP())
        hr= GetIP()->get_FromPart(lpRet);
    CHECK_HRESULT(hr, CVisioConnect, FromPart);
    return hr;
}


VW_INLINE HRESULT CVisioConnect::ToPart(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioConnect, ToPart);
    if (NULL!=GetIP())
        hr= GetIP()->get_ToPart(lpRet);
    CHECK_HRESULT(hr, CVisioConnect, ToPart);
    return hr;
}


VW_INLINE HRESULT CVisioConnect::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioConnect, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioConnect, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioConnect::Index(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioConnect, Index);
    if (NULL!=GetIP())
        hr= GetIP()->get_Index(lpRet);
    CHECK_HRESULT(hr, CVisioConnect, Index);
    return hr;
}


VW_INLINE HRESULT CVisioConnect::Document(CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioConnect, Document);
    if (NULL!=GetIP())
        hr= GetIP()->get_Document(&lpObj);
    CHECK_HRESULT(hr, CVisioConnect, Document);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioConnects

VW_INLINE HRESULT CVisioConnects::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioConnects, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioConnects, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioConnects::Item(short Index, CVisioConnect FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVConnect FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioConnects, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(Index, &lpObj);
    CHECK_HRESULT(hr, CVisioConnects, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioConnects::Count(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioConnects, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioConnects, Count);
    return hr;
}


VW_INLINE HRESULT CVisioConnects::FromSheet(CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioConnects, FromSheet);
    if (NULL!=GetIP())
        hr= GetIP()->get_FromSheet(&lpObj);
    CHECK_HRESULT(hr, CVisioConnects, FromSheet);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioConnects::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioConnects, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioConnects, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioConnects::Document(CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioConnects, Document);
    if (NULL!=GetIP())
        hr= GetIP()->get_Document(&lpObj);
    CHECK_HRESULT(hr, CVisioConnects, Document);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioConnects::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioConnects, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioConnects, Stat);
    return hr;
}


VW_INLINE HRESULT CVisioConnects::ToSheet(CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioConnects, ToSheet);
    if (NULL!=GetIP())
        hr= GetIP()->get_ToSheet(&lpObj);
    CHECK_HRESULT(hr, CVisioConnects, ToSheet);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioDocument

VW_INLINE HRESULT CVisioDocument::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioDocument::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioDocument, Stat);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioDocument, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::InPlace(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, InPlace);
    if (NULL!=GetIP())
        hr= GetIP()->get_InPlace(lpRet);
    CHECK_HRESULT(hr, CVisioDocument, InPlace);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::Masters(CVisioMasters FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMasters FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, Masters);
    if (NULL!=GetIP())
        hr= GetIP()->get_Masters(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, Masters);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioDocument::Pages(CVisioPages FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVPages FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, Pages);
    if (NULL!=GetIP())
        hr= GetIP()->get_Pages(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, Pages);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioDocument::Styles(CVisioStyles FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVStyles FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, Styles);
    if (NULL!=GetIP())
        hr= GetIP()->get_Styles(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, Styles);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioDocument::Name(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, Name);
    if (NULL!=GetIP())
        hr= GetIP()->get_Name(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, Name);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioDocument::Path(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, Path);
    if (NULL!=GetIP())
        hr= GetIP()->get_Path(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, Path);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioDocument::FullName(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, FullName);
    if (NULL!=GetIP())
        hr= GetIP()->get_FullName(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, FullName);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioDocument::Drop(IUnknown FAR *ObjectToDrop, short xPos, short yPos, CVisioMaster FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMaster FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, Drop);
    if (NULL!=GetIP())
        hr= GetIP()->Drop(ObjectToDrop, xPos, yPos, &lpObj);
    CHECK_HRESULT(hr, CVisioDocument, Drop);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioDocument::Index(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, Index);
    if (NULL!=GetIP())
        hr= GetIP()->get_Index(lpRet);
    CHECK_HRESULT(hr, CVisioDocument, Index);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getSaved(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, getSaved);
    if (NULL!=GetIP())
        hr= GetIP()->get_Saved(lpRet);
    CHECK_HRESULT(hr, CVisioDocument, getSaved);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::putSaved(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putSaved);
    if (NULL!=GetIP())
        hr= GetIP()->put_Saved(param01);
    CHECK_HRESULT(hr, CVisioDocument, putSaved);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::ReadOnly(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, ReadOnly);
    if (NULL!=GetIP())
        hr= GetIP()->get_ReadOnly(lpRet);
    CHECK_HRESULT(hr, CVisioDocument, ReadOnly);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::Save(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, Save);
    if (NULL!=GetIP())
        hr= GetIP()->Save(lpRet);
    CHECK_HRESULT(hr, CVisioDocument, Save);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::SaveAs(BSTR_HELPER_CLASS FAR &FileName, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, SaveAs);
    if (NULL!=GetIP())
        hr= GetIP()->SaveAs(FileName, lpRet);
    CHECK_HRESULT(hr, CVisioDocument, SaveAs);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getVersion(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, getVersion);
    if (NULL!=GetIP())
        hr= GetIP()->get_Version(lpRet);
    CHECK_HRESULT(hr, CVisioDocument, getVersion);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::putVersion(VW_CONST long param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putVersion);
    if (NULL!=GetIP())
        hr= GetIP()->put_Version(param01);
    CHECK_HRESULT(hr, CVisioDocument, putVersion);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getTitle(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, getTitle);
    if (NULL!=GetIP())
        hr= GetIP()->get_Title(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, getTitle);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioDocument::putTitle(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putTitle);
    if (NULL!=GetIP())
        hr= GetIP()->put_Title(param01);
    CHECK_HRESULT(hr, CVisioDocument, putTitle);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getSubject(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, getSubject);
    if (NULL!=GetIP())
        hr= GetIP()->get_Subject(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, getSubject);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioDocument::putSubject(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putSubject);
    if (NULL!=GetIP())
        hr= GetIP()->put_Subject(param01);
    CHECK_HRESULT(hr, CVisioDocument, putSubject);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getCreator(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, getCreator);
    if (NULL!=GetIP())
        hr= GetIP()->get_Creator(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, getCreator);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioDocument::putCreator(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putCreator);
    if (NULL!=GetIP())
        hr= GetIP()->put_Creator(param01);
    CHECK_HRESULT(hr, CVisioDocument, putCreator);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getKeywords(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, getKeywords);
    if (NULL!=GetIP())
        hr= GetIP()->get_Keywords(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, getKeywords);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioDocument::putKeywords(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putKeywords);
    if (NULL!=GetIP())
        hr= GetIP()->put_Keywords(param01);
    CHECK_HRESULT(hr, CVisioDocument, putKeywords);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getDescription(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, getDescription);
    if (NULL!=GetIP())
        hr= GetIP()->get_Description(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, getDescription);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioDocument::putDescription(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putDescription);
    if (NULL!=GetIP())
        hr= GetIP()->put_Description(param01);
    CHECK_HRESULT(hr, CVisioDocument, putDescription);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::Print()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, Print);
    if (NULL!=GetIP())
        hr= GetIP()->Print();
    CHECK_HRESULT(hr, CVisioDocument, Print);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::Close()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, Close);
    if (NULL!=GetIP())
        hr= GetIP()->Close();
    CHECK_HRESULT(hr, CVisioDocument, Close);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::CustomMenus(CVisioUIObject FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVUIObject FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, CustomMenus);
    if (NULL!=GetIP())
        hr= GetIP()->get_CustomMenus(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, CustomMenus);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioDocument::SetCustomMenus(CVisioUIObject FAR &MenusObject)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, SetCustomMenus);
    if (NULL!=GetIP())
        hr= GetIP()->SetCustomMenus(MenusObject);
    CHECK_HRESULT(hr, CVisioDocument, SetCustomMenus);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getCustomMenusFile(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, getCustomMenusFile);
    if (NULL!=GetIP())
        hr= GetIP()->get_CustomMenusFile(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, getCustomMenusFile);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioDocument::putCustomMenusFile(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putCustomMenusFile);
    if (NULL!=GetIP())
        hr= GetIP()->put_CustomMenusFile(param01);
    CHECK_HRESULT(hr, CVisioDocument, putCustomMenusFile);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::ClearCustomMenus()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, ClearCustomMenus);
    if (NULL!=GetIP())
        hr= GetIP()->ClearCustomMenus();
    CHECK_HRESULT(hr, CVisioDocument, ClearCustomMenus);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::CustomToolbars(CVisioUIObject FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVUIObject FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, CustomToolbars);
    if (NULL!=GetIP())
        hr= GetIP()->get_CustomToolbars(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, CustomToolbars);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioDocument::SetCustomToolbars(CVisioUIObject FAR &ToolbarsObject)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, SetCustomToolbars);
    if (NULL!=GetIP())
        hr= GetIP()->SetCustomToolbars(ToolbarsObject);
    CHECK_HRESULT(hr, CVisioDocument, SetCustomToolbars);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getCustomToolbarsFile(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, getCustomToolbarsFile);
    if (NULL!=GetIP())
        hr= GetIP()->get_CustomToolbarsFile(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, getCustomToolbarsFile);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioDocument::putCustomToolbarsFile(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putCustomToolbarsFile);
    if (NULL!=GetIP())
        hr= GetIP()->put_CustomToolbarsFile(param01);
    CHECK_HRESULT(hr, CVisioDocument, putCustomToolbarsFile);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::ClearCustomToolbars()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, ClearCustomToolbars);
    if (NULL!=GetIP())
        hr= GetIP()->ClearCustomToolbars();
    CHECK_HRESULT(hr, CVisioDocument, ClearCustomToolbars);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::Fonts(CVisioFonts FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVFonts FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, Fonts);
    if (NULL!=GetIP())
        hr= GetIP()->get_Fonts(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, Fonts);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioDocument::Colors(CVisioColors FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVColors FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, Colors);
    if (NULL!=GetIP())
        hr= GetIP()->get_Colors(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, Colors);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioDocument::EventList(CVisioEventList FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEventList FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, EventList);
    if (NULL!=GetIP())
        hr= GetIP()->get_EventList(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, EventList);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioDocument::Template(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, Template);
    if (NULL!=GetIP())
        hr= GetIP()->get_Template(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, Template);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioDocument::SaveAsEx(BSTR_HELPER_CLASS FAR &FileName, short SaveFlags)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, SaveAsEx);
    if (NULL!=GetIP())
        hr= GetIP()->SaveAsEx(FileName, SaveFlags);
    CHECK_HRESULT(hr, CVisioDocument, SaveAsEx);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getSavePreviewMode(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, getSavePreviewMode);
    if (NULL!=GetIP())
        hr= GetIP()->get_SavePreviewMode(lpRet);
    CHECK_HRESULT(hr, CVisioDocument, getSavePreviewMode);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::putSavePreviewMode(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putSavePreviewMode);
    if (NULL!=GetIP())
        hr= GetIP()->put_SavePreviewMode(param01);
    CHECK_HRESULT(hr, CVisioDocument, putSavePreviewMode);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::GetIcon(short ID, BSTR_HELPER_CLASS FAR &FileName)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, GetIcon);
    if (NULL!=GetIP())
        hr= GetIP()->GetIcon(ID, FileName);
    CHECK_HRESULT(hr, CVisioDocument, GetIcon);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::SetIcon(short ID, short Index, BSTR_HELPER_CLASS FAR &FileName)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, SetIcon);
    if (NULL!=GetIP())
        hr= GetIP()->SetIcon(ID, Index, FileName);
    CHECK_HRESULT(hr, CVisioDocument, SetIcon);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getLeftMargin(VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, double FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, getLeftMargin);
    if (NULL!=GetIP())
        hr= GetIP()->get_LeftMargin(UnitsNameOrCode, lpRet);
    CHECK_HRESULT(hr, CVisioDocument, getLeftMargin);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::putLeftMargin(VW_CONST VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, VW_CONST double param02)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putLeftMargin);
    if (NULL!=GetIP())
        hr= GetIP()->put_LeftMargin(UnitsNameOrCode, param02);
    CHECK_HRESULT(hr, CVisioDocument, putLeftMargin);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getRightMargin(VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, double FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, getRightMargin);
    if (NULL!=GetIP())
        hr= GetIP()->get_RightMargin(UnitsNameOrCode, lpRet);
    CHECK_HRESULT(hr, CVisioDocument, getRightMargin);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::putRightMargin(VW_CONST VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, VW_CONST double param02)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putRightMargin);
    if (NULL!=GetIP())
        hr= GetIP()->put_RightMargin(UnitsNameOrCode, param02);
    CHECK_HRESULT(hr, CVisioDocument, putRightMargin);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getTopMargin(VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, double FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, getTopMargin);
    if (NULL!=GetIP())
        hr= GetIP()->get_TopMargin(UnitsNameOrCode, lpRet);
    CHECK_HRESULT(hr, CVisioDocument, getTopMargin);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::putTopMargin(VW_CONST VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, VW_CONST double param02)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putTopMargin);
    if (NULL!=GetIP())
        hr= GetIP()->put_TopMargin(UnitsNameOrCode, param02);
    CHECK_HRESULT(hr, CVisioDocument, putTopMargin);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getBottomMargin(VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, double FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, getBottomMargin);
    if (NULL!=GetIP())
        hr= GetIP()->get_BottomMargin(UnitsNameOrCode, lpRet);
    CHECK_HRESULT(hr, CVisioDocument, getBottomMargin);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::putBottomMargin(VW_CONST VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, VW_CONST double param02)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putBottomMargin);
    if (NULL!=GetIP())
        hr= GetIP()->put_BottomMargin(UnitsNameOrCode, param02);
    CHECK_HRESULT(hr, CVisioDocument, putBottomMargin);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getPrintLandscape(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, getPrintLandscape);
    if (NULL!=GetIP())
        hr= GetIP()->get_PrintLandscape(lpRet);
    CHECK_HRESULT(hr, CVisioDocument, getPrintLandscape);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::putPrintLandscape(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putPrintLandscape);
    if (NULL!=GetIP())
        hr= GetIP()->put_PrintLandscape(param01);
    CHECK_HRESULT(hr, CVisioDocument, putPrintLandscape);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getPrintCenteredH(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, getPrintCenteredH);
    if (NULL!=GetIP())
        hr= GetIP()->get_PrintCenteredH(lpRet);
    CHECK_HRESULT(hr, CVisioDocument, getPrintCenteredH);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::putPrintCenteredH(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putPrintCenteredH);
    if (NULL!=GetIP())
        hr= GetIP()->put_PrintCenteredH(param01);
    CHECK_HRESULT(hr, CVisioDocument, putPrintCenteredH);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getPrintCenteredV(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, getPrintCenteredV);
    if (NULL!=GetIP())
        hr= GetIP()->get_PrintCenteredV(lpRet);
    CHECK_HRESULT(hr, CVisioDocument, getPrintCenteredV);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::putPrintCenteredV(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putPrintCenteredV);
    if (NULL!=GetIP())
        hr= GetIP()->put_PrintCenteredV(param01);
    CHECK_HRESULT(hr, CVisioDocument, putPrintCenteredV);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getPrintScale(double FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, getPrintScale);
    if (NULL!=GetIP())
        hr= GetIP()->get_PrintScale(lpRet);
    CHECK_HRESULT(hr, CVisioDocument, getPrintScale);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::putPrintScale(VW_CONST double param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putPrintScale);
    if (NULL!=GetIP())
        hr= GetIP()->put_PrintScale(param01);
    CHECK_HRESULT(hr, CVisioDocument, putPrintScale);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getPrintFitOnPages(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, getPrintFitOnPages);
    if (NULL!=GetIP())
        hr= GetIP()->get_PrintFitOnPages(lpRet);
    CHECK_HRESULT(hr, CVisioDocument, getPrintFitOnPages);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::putPrintFitOnPages(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putPrintFitOnPages);
    if (NULL!=GetIP())
        hr= GetIP()->put_PrintFitOnPages(param01);
    CHECK_HRESULT(hr, CVisioDocument, putPrintFitOnPages);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getPrintPagesAcross(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, getPrintPagesAcross);
    if (NULL!=GetIP())
        hr= GetIP()->get_PrintPagesAcross(lpRet);
    CHECK_HRESULT(hr, CVisioDocument, getPrintPagesAcross);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::putPrintPagesAcross(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putPrintPagesAcross);
    if (NULL!=GetIP())
        hr= GetIP()->put_PrintPagesAcross(param01);
    CHECK_HRESULT(hr, CVisioDocument, putPrintPagesAcross);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getPrintPagesDown(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, getPrintPagesDown);
    if (NULL!=GetIP())
        hr= GetIP()->get_PrintPagesDown(lpRet);
    CHECK_HRESULT(hr, CVisioDocument, getPrintPagesDown);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::putPrintPagesDown(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putPrintPagesDown);
    if (NULL!=GetIP())
        hr= GetIP()->put_PrintPagesDown(param01);
    CHECK_HRESULT(hr, CVisioDocument, putPrintPagesDown);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getDefaultStyle(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, getDefaultStyle);
    if (NULL!=GetIP())
        hr= GetIP()->get_DefaultStyle(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, getDefaultStyle);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioDocument::putDefaultStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putDefaultStyle);
    if (NULL!=GetIP())
        hr= GetIP()->put_DefaultStyle(param01);
    CHECK_HRESULT(hr, CVisioDocument, putDefaultStyle);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getDefaultLineStyle(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, getDefaultLineStyle);
    if (NULL!=GetIP())
        hr= GetIP()->get_DefaultLineStyle(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, getDefaultLineStyle);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioDocument::putDefaultLineStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putDefaultLineStyle);
    if (NULL!=GetIP())
        hr= GetIP()->put_DefaultLineStyle(param01);
    CHECK_HRESULT(hr, CVisioDocument, putDefaultLineStyle);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getDefaultFillStyle(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, getDefaultFillStyle);
    if (NULL!=GetIP())
        hr= GetIP()->get_DefaultFillStyle(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, getDefaultFillStyle);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioDocument::putDefaultFillStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putDefaultFillStyle);
    if (NULL!=GetIP())
        hr= GetIP()->put_DefaultFillStyle(param01);
    CHECK_HRESULT(hr, CVisioDocument, putDefaultFillStyle);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getDefaultTextStyle(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, getDefaultTextStyle);
    if (NULL!=GetIP())
        hr= GetIP()->get_DefaultTextStyle(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, getDefaultTextStyle);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioDocument::putDefaultTextStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putDefaultTextStyle);
    if (NULL!=GetIP())
        hr= GetIP()->put_DefaultTextStyle(param01);
    CHECK_HRESULT(hr, CVisioDocument, putDefaultTextStyle);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::PersistsEvents(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, PersistsEvents);
    if (NULL!=GetIP())
        hr= GetIP()->get_PersistsEvents(lpRet);
    CHECK_HRESULT(hr, CVisioDocument, PersistsEvents);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::OpenStencilWindow(CVisioWindow FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVWindow FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, OpenStencilWindow);
    if (NULL!=GetIP())
        hr= GetIP()->OpenStencilWindow(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, OpenStencilWindow);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioDocument::ParseLine(BSTR_HELPER_CLASS FAR &Line)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, ParseLine);
    if (NULL!=GetIP())
        hr= GetIP()->ParseLine(Line);
    CHECK_HRESULT(hr, CVisioDocument, ParseLine);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::ExecuteLine(BSTR_HELPER_CLASS FAR &Line)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, ExecuteLine);
    if (NULL!=GetIP())
        hr= GetIP()->ExecuteLine(Line);
    CHECK_HRESULT(hr, CVisioDocument, ExecuteLine);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::VBProject(IDispatch FAR *FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, VBProject);
    if (NULL!=GetIP())
        hr= GetIP()->get_VBProject(lpRet);
    CHECK_HRESULT(hr, CVisioDocument, VBProject);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::PaperWidth(VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, double FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, PaperWidth);
    if (NULL!=GetIP())
        hr= GetIP()->get_PaperWidth(UnitsNameOrCode, lpRet);
    CHECK_HRESULT(hr, CVisioDocument, PaperWidth);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::PaperHeight(VARIANT_HELPER_CLASS FAR &UnitsNameOrCode, double FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, PaperHeight);
    if (NULL!=GetIP())
        hr= GetIP()->get_PaperHeight(UnitsNameOrCode, lpRet);
    CHECK_HRESULT(hr, CVisioDocument, PaperHeight);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getPaperSize(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, getPaperSize);
    if (NULL!=GetIP())
        hr= GetIP()->get_PaperSize(lpRet);
    CHECK_HRESULT(hr, CVisioDocument, getPaperSize);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::putPaperSize(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putPaperSize);
    if (NULL!=GetIP())
        hr= GetIP()->put_PaperSize(param01);
    CHECK_HRESULT(hr, CVisioDocument, putPaperSize);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::FollowHyperlink45(BSTR_HELPER_CLASS FAR &Target, BSTR_HELPER_CLASS FAR &Location)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, FollowHyperlink45);
    if (NULL!=GetIP())
        hr= GetIP()->FollowHyperlink45(Target, Location);
    CHECK_HRESULT(hr, CVisioDocument, FollowHyperlink45);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::CodeName(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, CodeName);
    if (NULL!=GetIP())
        hr= GetIP()->get_CodeName(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, CodeName);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioDocument::getMode(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, getMode);
    if (NULL!=GetIP())
        hr= GetIP()->get_Mode(lpRet);
    CHECK_HRESULT(hr, CVisioDocument, getMode);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::putMode(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putMode);
    if (NULL!=GetIP())
        hr= GetIP()->put_Mode(param01);
    CHECK_HRESULT(hr, CVisioDocument, putMode);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::OLEObjects(CVisioOLEObjects FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVOLEObjects FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, OLEObjects);
    if (NULL!=GetIP())
        hr= GetIP()->get_OLEObjects(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, OLEObjects);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioDocument::FollowHyperlink(BSTR_HELPER_CLASS FAR &Address, BSTR_HELPER_CLASS FAR &SubAddress, VARIANT_HELPER_CLASS FAR &ExtraInfo, VARIANT_HELPER_CLASS FAR &Frame, VARIANT_HELPER_CLASS FAR &NewWindow, VARIANT_HELPER_CLASS FAR &res1, VARIANT_HELPER_CLASS FAR &res2, VARIANT_HELPER_CLASS FAR &res3)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, FollowHyperlink);
    if (NULL!=GetIP())
        hr= GetIP()->FollowHyperlink(Address, SubAddress, ExtraInfo, Frame, NewWindow, res1, res2, res3);
    CHECK_HRESULT(hr, CVisioDocument, FollowHyperlink);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getManager(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, getManager);
    if (NULL!=GetIP())
        hr= GetIP()->get_Manager(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, getManager);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioDocument::putManager(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putManager);
    if (NULL!=GetIP())
        hr= GetIP()->put_Manager(param01);
    CHECK_HRESULT(hr, CVisioDocument, putManager);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getCompany(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, getCompany);
    if (NULL!=GetIP())
        hr= GetIP()->get_Company(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, getCompany);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioDocument::putCompany(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putCompany);
    if (NULL!=GetIP())
        hr= GetIP()->put_Company(param01);
    CHECK_HRESULT(hr, CVisioDocument, putCompany);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getCategory(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, getCategory);
    if (NULL!=GetIP())
        hr= GetIP()->get_Category(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, getCategory);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioDocument::putCategory(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putCategory);
    if (NULL!=GetIP())
        hr= GetIP()->put_Category(param01);
    CHECK_HRESULT(hr, CVisioDocument, putCategory);
    return hr;
}


VW_INLINE HRESULT CVisioDocument::getHyperlinkBase(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocument, getHyperlinkBase);
    if (NULL!=GetIP())
        hr= GetIP()->get_HyperlinkBase(&lpObj);
    CHECK_HRESULT(hr, CVisioDocument, getHyperlinkBase);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioDocument::putHyperlinkBase(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocument, putHyperlinkBase);
    if (NULL!=GetIP())
        hr= GetIP()->put_HyperlinkBase(param01);
    CHECK_HRESULT(hr, CVisioDocument, putHyperlinkBase);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioDocuments

VW_INLINE HRESULT CVisioDocuments::Add(BSTR_HELPER_CLASS FAR &FileName, CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocuments, Add);
    if (NULL!=GetIP())
        hr= GetIP()->Add(FileName, &lpObj);
    CHECK_HRESULT(hr, CVisioDocuments, Add);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioDocuments::Open(BSTR_HELPER_CLASS FAR &FileName, CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocuments, Open);
    if (NULL!=GetIP())
        hr= GetIP()->Open(FileName, &lpObj);
    CHECK_HRESULT(hr, CVisioDocuments, Open);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioDocuments::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocuments, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioDocuments, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioDocuments::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocuments, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioDocuments, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioDocuments::Item(VARIANT_HELPER_CLASS FAR &NameOrIndex, CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocuments, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(NameOrIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioDocuments, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioDocuments::Count(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocuments, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioDocuments, Count);
    return hr;
}


VW_INLINE HRESULT CVisioDocuments::OpenEx(BSTR_HELPER_CLASS FAR &FileName, short Flags, CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocuments, OpenEx);
    if (NULL!=GetIP())
        hr= GetIP()->OpenEx(FileName, Flags, &lpObj);
    CHECK_HRESULT(hr, CVisioDocuments, OpenEx);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioDocuments::EventList(CVisioEventList FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEventList FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioDocuments, EventList);
    if (NULL!=GetIP())
        hr= GetIP()->get_EventList(&lpObj);
    CHECK_HRESULT(hr, CVisioDocuments, EventList);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioDocuments::PersistsEvents(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocuments, PersistsEvents);
    if (NULL!=GetIP())
        hr= GetIP()->get_PersistsEvents(lpRet);
    CHECK_HRESULT(hr, CVisioDocuments, PersistsEvents);
    return hr;
}


VW_INLINE HRESULT CVisioDocuments::GetNames(/*BSTR*/ SAFEARRAY FAR * FAR *NameArray)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioDocuments, GetNames);
    if (NULL!=GetIP())
        hr= GetIP()->GetNames(NameArray);
    CHECK_HRESULT(hr, CVisioDocuments, GetNames);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioMaster

VW_INLINE HRESULT CVisioMaster::Document(CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, Document);
    if (NULL!=GetIP())
        hr= GetIP()->get_Document(&lpObj);
    CHECK_HRESULT(hr, CVisioMaster, Document);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMaster::getPrompt(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, getPrompt);
    if (NULL!=GetIP())
        hr= GetIP()->get_Prompt(&lpObj);
    CHECK_HRESULT(hr, CVisioMaster, getPrompt);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioMaster::putPrompt(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, putPrompt);
    if (NULL!=GetIP())
        hr= GetIP()->put_Prompt(param01);
    CHECK_HRESULT(hr, CVisioMaster, putPrompt);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::getAlignName(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, getAlignName);
    if (NULL!=GetIP())
        hr= GetIP()->get_AlignName(lpRet);
    CHECK_HRESULT(hr, CVisioMaster, getAlignName);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::putAlignName(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, putAlignName);
    if (NULL!=GetIP())
        hr= GetIP()->put_AlignName(param01);
    CHECK_HRESULT(hr, CVisioMaster, putAlignName);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::getIconSize(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, getIconSize);
    if (NULL!=GetIP())
        hr= GetIP()->get_IconSize(lpRet);
    CHECK_HRESULT(hr, CVisioMaster, getIconSize);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::putIconSize(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, putIconSize);
    if (NULL!=GetIP())
        hr= GetIP()->put_IconSize(param01);
    CHECK_HRESULT(hr, CVisioMaster, putIconSize);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::getIconUpdate(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, getIconUpdate);
    if (NULL!=GetIP())
        hr= GetIP()->get_IconUpdate(lpRet);
    CHECK_HRESULT(hr, CVisioMaster, getIconUpdate);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::putIconUpdate(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, putIconUpdate);
    if (NULL!=GetIP())
        hr= GetIP()->put_IconUpdate(param01);
    CHECK_HRESULT(hr, CVisioMaster, putIconUpdate);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioMaster, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMaster::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioMaster, Stat);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioMaster, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::getName(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, getName);
    if (NULL!=GetIP())
        hr= GetIP()->get_Name(&lpObj);
    CHECK_HRESULT(hr, CVisioMaster, getName);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioMaster::putName(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, putName);
    if (NULL!=GetIP())
        hr= GetIP()->put_Name(param01);
    CHECK_HRESULT(hr, CVisioMaster, putName);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::Shapes(CVisioShapes FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShapes FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, Shapes);
    if (NULL!=GetIP())
        hr= GetIP()->get_Shapes(&lpObj);
    CHECK_HRESULT(hr, CVisioMaster, Shapes);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMaster::Index(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, Index);
    if (NULL!=GetIP())
        hr= GetIP()->get_Index(lpRet);
    CHECK_HRESULT(hr, CVisioMaster, Index);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::OneD(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, OneD);
    if (NULL!=GetIP())
        hr= GetIP()->get_OneD(lpRet);
    CHECK_HRESULT(hr, CVisioMaster, OneD);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::Delete()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, Delete);
    if (NULL!=GetIP())
        hr= GetIP()->Delete();
    CHECK_HRESULT(hr, CVisioMaster, Delete);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::UniqueID(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, UniqueID);
    if (NULL!=GetIP())
        hr= GetIP()->get_UniqueID(&lpObj);
    CHECK_HRESULT(hr, CVisioMaster, UniqueID);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioMaster::Layers(CVisioLayers FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVLayers FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, Layers);
    if (NULL!=GetIP())
        hr= GetIP()->get_Layers(&lpObj);
    CHECK_HRESULT(hr, CVisioMaster, Layers);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMaster::PageSheet(CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, PageSheet);
    if (NULL!=GetIP())
        hr= GetIP()->get_PageSheet(&lpObj);
    CHECK_HRESULT(hr, CVisioMaster, PageSheet);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMaster::Drop(IUnknown FAR *ObjectToDrop, double xPos, double yPos, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, Drop);
    if (NULL!=GetIP())
        hr= GetIP()->Drop(ObjectToDrop, xPos, yPos, &lpObj);
    CHECK_HRESULT(hr, CVisioMaster, Drop);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMaster::CenterDrawing()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, CenterDrawing);
    if (NULL!=GetIP())
        hr= GetIP()->CenterDrawing();
    CHECK_HRESULT(hr, CVisioMaster, CenterDrawing);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::EventList(CVisioEventList FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEventList FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, EventList);
    if (NULL!=GetIP())
        hr= GetIP()->get_EventList(&lpObj);
    CHECK_HRESULT(hr, CVisioMaster, EventList);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMaster::PersistsEvents(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, PersistsEvents);
    if (NULL!=GetIP())
        hr= GetIP()->get_PersistsEvents(lpRet);
    CHECK_HRESULT(hr, CVisioMaster, PersistsEvents);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::DrawLine(double xLeft, double yTop, double xRight, double yBottom, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, DrawLine);
    if (NULL!=GetIP())
        hr= GetIP()->DrawLine(xLeft, yTop, xRight, yBottom, &lpObj);
    CHECK_HRESULT(hr, CVisioMaster, DrawLine);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMaster::DrawRectangle(double xLeft, double yTop, double xRight, double yBottom, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, DrawRectangle);
    if (NULL!=GetIP())
        hr= GetIP()->DrawRectangle(xLeft, yTop, xRight, yBottom, &lpObj);
    CHECK_HRESULT(hr, CVisioMaster, DrawRectangle);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMaster::DrawOval(double xLeft, double yTop, double xRight, double yBottom, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, DrawOval);
    if (NULL!=GetIP())
        hr= GetIP()->DrawOval(xLeft, yTop, xRight, yBottom, &lpObj);
    CHECK_HRESULT(hr, CVisioMaster, DrawOval);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMaster::DrawSpline(/*double*/ SAFEARRAY FAR * FAR *xyArray, double Tolerance, short Flags, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, DrawSpline);
    if (NULL!=GetIP())
        hr= GetIP()->DrawSpline(xyArray, Tolerance, Flags, &lpObj);
    CHECK_HRESULT(hr, CVisioMaster, DrawSpline);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMaster::DrawBezier(/*double*/ SAFEARRAY FAR * FAR *xyArray, short degree, short Flags, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, DrawBezier);
    if (NULL!=GetIP())
        hr= GetIP()->DrawBezier(xyArray, degree, Flags, &lpObj);
    CHECK_HRESULT(hr, CVisioMaster, DrawBezier);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMaster::DrawPolyline(/*double*/ SAFEARRAY FAR * FAR *xyArray, short Flags, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, DrawPolyline);
    if (NULL!=GetIP())
        hr= GetIP()->DrawPolyline(xyArray, Flags, &lpObj);
    CHECK_HRESULT(hr, CVisioMaster, DrawPolyline);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMaster::Import(BSTR_HELPER_CLASS FAR &FileName, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, Import);
    if (NULL!=GetIP())
        hr= GetIP()->Import(FileName, &lpObj);
    CHECK_HRESULT(hr, CVisioMaster, Import);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMaster::Export(BSTR_HELPER_CLASS FAR &FileName)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, Export);
    if (NULL!=GetIP())
        hr= GetIP()->Export(FileName);
    CHECK_HRESULT(hr, CVisioMaster, Export);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::InsertFromFile(BSTR_HELPER_CLASS FAR &FileName, short Flags, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, InsertFromFile);
    if (NULL!=GetIP())
        hr= GetIP()->InsertFromFile(FileName, Flags, &lpObj);
    CHECK_HRESULT(hr, CVisioMaster, InsertFromFile);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMaster::InsertObject(BSTR_HELPER_CLASS FAR &ClassOrProgID, short Flags, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, InsertObject);
    if (NULL!=GetIP())
        hr= GetIP()->InsertObject(ClassOrProgID, Flags, &lpObj);
    CHECK_HRESULT(hr, CVisioMaster, InsertObject);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMaster::OpenDrawWindow(CVisioWindow FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVWindow FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, OpenDrawWindow);
    if (NULL!=GetIP())
        hr= GetIP()->OpenDrawWindow(&lpObj);
    CHECK_HRESULT(hr, CVisioMaster, OpenDrawWindow);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMaster::OpenIconWindow(CVisioWindow FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVWindow FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, OpenIconWindow);
    if (NULL!=GetIP())
        hr= GetIP()->OpenIconWindow(&lpObj);
    CHECK_HRESULT(hr, CVisioMaster, OpenIconWindow);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMaster::Open(CVisioMaster FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMaster FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, Open);
    if (NULL!=GetIP())
        hr= GetIP()->Open(&lpObj);
    CHECK_HRESULT(hr, CVisioMaster, Open);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMaster::Close()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, Close);
    if (NULL!=GetIP())
        hr= GetIP()->Close();
    CHECK_HRESULT(hr, CVisioMaster, Close);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::DropMany(/*VARIANT*/ SAFEARRAY FAR * FAR *ObjectsToInstance, /*double*/ SAFEARRAY FAR * FAR *xyArray, /*short*/ SAFEARRAY FAR * FAR *IDArray, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, DropMany);
    if (NULL!=GetIP())
        hr= GetIP()->DropMany(ObjectsToInstance, xyArray, IDArray, lpRet);
    CHECK_HRESULT(hr, CVisioMaster, DropMany);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::GetFormulas(/*short*/ SAFEARRAY FAR * FAR *SID_SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *formulaArray)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, GetFormulas);
    if (NULL!=GetIP())
        hr= GetIP()->GetFormulas(SID_SRCStream, formulaArray);
    CHECK_HRESULT(hr, CVisioMaster, GetFormulas);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::GetResults(/*short*/ SAFEARRAY FAR * FAR *SID_SRCStream, short Flags, /*VARIANT*/ SAFEARRAY FAR * FAR *UnitsNamesOrCodes, /*VARIANT*/ SAFEARRAY FAR * FAR *resultArray)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, GetResults);
    if (NULL!=GetIP())
        hr= GetIP()->GetResults(SID_SRCStream, Flags, UnitsNamesOrCodes, resultArray);
    CHECK_HRESULT(hr, CVisioMaster, GetResults);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::SetFormulas(/*short*/ SAFEARRAY FAR * FAR *SID_SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *formulaArray, short Flags, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, SetFormulas);
    if (NULL!=GetIP())
        hr= GetIP()->SetFormulas(SID_SRCStream, formulaArray, Flags, lpRet);
    CHECK_HRESULT(hr, CVisioMaster, SetFormulas);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::SetResults(/*short*/ SAFEARRAY FAR * FAR *SID_SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *UnitsNamesOrCodes, /*VARIANT*/ SAFEARRAY FAR * FAR *resultArray, short Flags, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, SetResults);
    if (NULL!=GetIP())
        hr= GetIP()->SetResults(SID_SRCStream, UnitsNamesOrCodes, resultArray, Flags, lpRet);
    CHECK_HRESULT(hr, CVisioMaster, SetResults);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::Connects(CVisioConnects FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVConnects FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, Connects);
    if (NULL!=GetIP())
        hr= GetIP()->get_Connects(&lpObj);
    CHECK_HRESULT(hr, CVisioMaster, Connects);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMaster::ImportIcon(BSTR_HELPER_CLASS FAR &FileName)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, ImportIcon);
    if (NULL!=GetIP())
        hr= GetIP()->ImportIcon(FileName);
    CHECK_HRESULT(hr, CVisioMaster, ImportIcon);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::ExportIcon(BSTR_HELPER_CLASS FAR &FileName, short Flags)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, ExportIcon);
    if (NULL!=GetIP())
        hr= GetIP()->ExportIcon(FileName, Flags);
    CHECK_HRESULT(hr, CVisioMaster, ExportIcon);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::Layout()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, Layout);
    if (NULL!=GetIP())
        hr= GetIP()->Layout();
    CHECK_HRESULT(hr, CVisioMaster, Layout);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::BoundingBox(short Flags, double FAR *lpr8Left, double FAR *lpr8Bottom, double FAR *lpr8Right, double FAR *lpr8Top)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, BoundingBox);
    if (NULL!=GetIP())
        hr= GetIP()->BoundingBox(Flags, lpr8Left, lpr8Bottom, lpr8Right, lpr8Top);
    CHECK_HRESULT(hr, CVisioMaster, BoundingBox);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::ID(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, ID);
    if (NULL!=GetIP())
        hr= GetIP()->get_ID(lpRet);
    CHECK_HRESULT(hr, CVisioMaster, ID);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::OLEObjects(CVisioOLEObjects FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVOLEObjects FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMaster, OLEObjects);
    if (NULL!=GetIP())
        hr= GetIP()->get_OLEObjects(&lpObj);
    CHECK_HRESULT(hr, CVisioMaster, OLEObjects);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMaster::getPatternFlags(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, getPatternFlags);
    if (NULL!=GetIP())
        hr= GetIP()->get_PatternFlags(lpRet);
    CHECK_HRESULT(hr, CVisioMaster, getPatternFlags);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::putPatternFlags(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, putPatternFlags);
    if (NULL!=GetIP())
        hr= GetIP()->put_PatternFlags(param01);
    CHECK_HRESULT(hr, CVisioMaster, putPatternFlags);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::getMatchByName(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, getMatchByName);
    if (NULL!=GetIP())
        hr= GetIP()->get_MatchByName(lpRet);
    CHECK_HRESULT(hr, CVisioMaster, getMatchByName);
    return hr;
}


VW_INLINE HRESULT CVisioMaster::putMatchByName(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMaster, putMatchByName);
    if (NULL!=GetIP())
        hr= GetIP()->put_MatchByName(param01);
    CHECK_HRESULT(hr, CVisioMaster, putMatchByName);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioMasters

VW_INLINE HRESULT CVisioMasters::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMasters, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioMasters, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMasters::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMasters, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioMasters, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioMasters::Item(VARIANT_HELPER_CLASS FAR &NameUIDOrIndex, CVisioMaster FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMaster FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMasters, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(NameUIDOrIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioMasters, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMasters::Count(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMasters, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioMasters, Count);
    return hr;
}


VW_INLINE HRESULT CVisioMasters::Document(CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMasters, Document);
    if (NULL!=GetIP())
        hr= GetIP()->get_Document(&lpObj);
    CHECK_HRESULT(hr, CVisioMasters, Document);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMasters::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMasters, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioMasters, Stat);
    return hr;
}


VW_INLINE HRESULT CVisioMasters::EventList(CVisioEventList FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEventList FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMasters, EventList);
    if (NULL!=GetIP())
        hr= GetIP()->get_EventList(&lpObj);
    CHECK_HRESULT(hr, CVisioMasters, EventList);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMasters::PersistsEvents(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMasters, PersistsEvents);
    if (NULL!=GetIP())
        hr= GetIP()->get_PersistsEvents(lpRet);
    CHECK_HRESULT(hr, CVisioMasters, PersistsEvents);
    return hr;
}


VW_INLINE HRESULT CVisioMasters::Add(CVisioMaster FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMaster FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMasters, Add);
    if (NULL!=GetIP())
        hr= GetIP()->Add(&lpObj);
    CHECK_HRESULT(hr, CVisioMasters, Add);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMasters::GetNames(/*BSTR*/ SAFEARRAY FAR * FAR *NameArray)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMasters, GetNames);
    if (NULL!=GetIP())
        hr= GetIP()->GetNames(NameArray);
    CHECK_HRESULT(hr, CVisioMasters, GetNames);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioPage

VW_INLINE HRESULT CVisioPage::Document(CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPage, Document);
    if (NULL!=GetIP())
        hr= GetIP()->get_Document(&lpObj);
    CHECK_HRESULT(hr, CVisioPage, Document);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPage::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPage, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioPage, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPage::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPage, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioPage, Stat);
    return hr;
}


VW_INLINE HRESULT CVisioPage::getBackground(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPage, getBackground);
    if (NULL!=GetIP())
        hr= GetIP()->get_Background(lpRet);
    CHECK_HRESULT(hr, CVisioPage, getBackground);
    return hr;
}


VW_INLINE HRESULT CVisioPage::putBackground(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPage, putBackground);
    if (NULL!=GetIP())
        hr= GetIP()->put_Background(param01);
    CHECK_HRESULT(hr, CVisioPage, putBackground);
    return hr;
}


VW_INLINE HRESULT CVisioPage::Paste()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPage, Paste);
    if (NULL!=GetIP())
        hr= GetIP()->Paste();
    CHECK_HRESULT(hr, CVisioPage, Paste);
    return hr;
}


VW_INLINE HRESULT CVisioPage::PasteSpecial(short Format)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPage, PasteSpecial);
    if (NULL!=GetIP())
        hr= GetIP()->PasteSpecial(Format);
    CHECK_HRESULT(hr, CVisioPage, PasteSpecial);
    return hr;
}


VW_INLINE HRESULT CVisioPage::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPage, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioPage, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioPage::DrawLine(double xLeft, double yTop, double xRight, double yBottom, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPage, DrawLine);
    if (NULL!=GetIP())
        hr= GetIP()->DrawLine(xLeft, yTop, xRight, yBottom, &lpObj);
    CHECK_HRESULT(hr, CVisioPage, DrawLine);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPage::DrawRectangle(double xLeft, double yTop, double xRight, double yBottom, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPage, DrawRectangle);
    if (NULL!=GetIP())
        hr= GetIP()->DrawRectangle(xLeft, yTop, xRight, yBottom, &lpObj);
    CHECK_HRESULT(hr, CVisioPage, DrawRectangle);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPage::DrawOval(double xLeft, double yTop, double xRight, double yBottom, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPage, DrawOval);
    if (NULL!=GetIP())
        hr= GetIP()->DrawOval(xLeft, yTop, xRight, yBottom, &lpObj);
    CHECK_HRESULT(hr, CVisioPage, DrawOval);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPage::Index(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPage, Index);
    if (NULL!=GetIP())
        hr= GetIP()->get_Index(lpRet);
    CHECK_HRESULT(hr, CVisioPage, Index);
    return hr;
}


VW_INLINE HRESULT CVisioPage::getName(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPage, getName);
    if (NULL!=GetIP())
        hr= GetIP()->get_Name(&lpObj);
    CHECK_HRESULT(hr, CVisioPage, getName);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioPage::putName(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPage, putName);
    if (NULL!=GetIP())
        hr= GetIP()->put_Name(param01);
    CHECK_HRESULT(hr, CVisioPage, putName);
    return hr;
}


VW_INLINE HRESULT CVisioPage::Shapes(CVisioShapes FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShapes FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPage, Shapes);
    if (NULL!=GetIP())
        hr= GetIP()->get_Shapes(&lpObj);
    CHECK_HRESULT(hr, CVisioPage, Shapes);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPage::Drop(IUnknown FAR *ObjectToDrop, double xPos, double yPos, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPage, Drop);
    if (NULL!=GetIP())
        hr= GetIP()->Drop(ObjectToDrop, xPos, yPos, &lpObj);
    CHECK_HRESULT(hr, CVisioPage, Drop);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPage::AddGuide(short Type, double xPos, double yPos, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPage, AddGuide);
    if (NULL!=GetIP())
        hr= GetIP()->AddGuide(Type, xPos, yPos, &lpObj);
    CHECK_HRESULT(hr, CVisioPage, AddGuide);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPage::BackPageAsObj(CVisioPage FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVPage FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPage, BackPageAsObj);
    if (NULL!=GetIP())
        hr= GetIP()->get_BackPageAsObj(&lpObj);
    CHECK_HRESULT(hr, CVisioPage, BackPageAsObj);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPage::BackPageFromName(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPage, BackPageFromName);
    if (NULL!=GetIP())
        hr= GetIP()->put_BackPageFromName(param01);
    CHECK_HRESULT(hr, CVisioPage, BackPageFromName);
    return hr;
}


VW_INLINE HRESULT CVisioPage::Print()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPage, Print);
    if (NULL!=GetIP())
        hr= GetIP()->Print();
    CHECK_HRESULT(hr, CVisioPage, Print);
    return hr;
}


VW_INLINE HRESULT CVisioPage::Import(BSTR_HELPER_CLASS FAR &FileName, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPage, Import);
    if (NULL!=GetIP())
        hr= GetIP()->Import(FileName, &lpObj);
    CHECK_HRESULT(hr, CVisioPage, Import);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPage::Export(BSTR_HELPER_CLASS FAR &FileName)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPage, Export);
    if (NULL!=GetIP())
        hr= GetIP()->Export(FileName);
    CHECK_HRESULT(hr, CVisioPage, Export);
    return hr;
}


VW_INLINE HRESULT CVisioPage::Layers(CVisioLayers FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVLayers FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPage, Layers);
    if (NULL!=GetIP())
        hr= GetIP()->get_Layers(&lpObj);
    CHECK_HRESULT(hr, CVisioPage, Layers);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPage::PageSheet(CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPage, PageSheet);
    if (NULL!=GetIP())
        hr= GetIP()->get_PageSheet(&lpObj);
    CHECK_HRESULT(hr, CVisioPage, PageSheet);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPage::Delete(short fRenumberPages)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPage, Delete);
    if (NULL!=GetIP())
        hr= GetIP()->Delete(fRenumberPages);
    CHECK_HRESULT(hr, CVisioPage, Delete);
    return hr;
}


VW_INLINE HRESULT CVisioPage::CenterDrawing()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPage, CenterDrawing);
    if (NULL!=GetIP())
        hr= GetIP()->CenterDrawing();
    CHECK_HRESULT(hr, CVisioPage, CenterDrawing);
    return hr;
}


VW_INLINE HRESULT CVisioPage::EventList(CVisioEventList FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEventList FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPage, EventList);
    if (NULL!=GetIP())
        hr= GetIP()->get_EventList(&lpObj);
    CHECK_HRESULT(hr, CVisioPage, EventList);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPage::PersistsEvents(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPage, PersistsEvents);
    if (NULL!=GetIP())
        hr= GetIP()->get_PersistsEvents(lpRet);
    CHECK_HRESULT(hr, CVisioPage, PersistsEvents);
    return hr;
}


VW_INLINE HRESULT CVisioPage::DrawSpline(/*double*/ SAFEARRAY FAR * FAR *xyArray, double Tolerance, short Flags, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPage, DrawSpline);
    if (NULL!=GetIP())
        hr= GetIP()->DrawSpline(xyArray, Tolerance, Flags, &lpObj);
    CHECK_HRESULT(hr, CVisioPage, DrawSpline);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPage::DrawBezier(/*double*/ SAFEARRAY FAR * FAR *xyArray, short degree, short Flags, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPage, DrawBezier);
    if (NULL!=GetIP())
        hr= GetIP()->DrawBezier(xyArray, degree, Flags, &lpObj);
    CHECK_HRESULT(hr, CVisioPage, DrawBezier);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPage::DrawPolyline(/*double*/ SAFEARRAY FAR * FAR *xyArray, short Flags, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPage, DrawPolyline);
    if (NULL!=GetIP())
        hr= GetIP()->DrawPolyline(xyArray, Flags, &lpObj);
    CHECK_HRESULT(hr, CVisioPage, DrawPolyline);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPage::InsertFromFile(BSTR_HELPER_CLASS FAR &FileName, short Flags, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPage, InsertFromFile);
    if (NULL!=GetIP())
        hr= GetIP()->InsertFromFile(FileName, Flags, &lpObj);
    CHECK_HRESULT(hr, CVisioPage, InsertFromFile);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPage::InsertObject(BSTR_HELPER_CLASS FAR &ClassOrProgID, short Flags, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPage, InsertObject);
    if (NULL!=GetIP())
        hr= GetIP()->InsertObject(ClassOrProgID, Flags, &lpObj);
    CHECK_HRESULT(hr, CVisioPage, InsertObject);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPage::OpenDrawWindow(CVisioWindow FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVWindow FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPage, OpenDrawWindow);
    if (NULL!=GetIP())
        hr= GetIP()->OpenDrawWindow(&lpObj);
    CHECK_HRESULT(hr, CVisioPage, OpenDrawWindow);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPage::DropMany(/*VARIANT*/ SAFEARRAY FAR * FAR *ObjectsToInstance, /*double*/ SAFEARRAY FAR * FAR *xyArray, /*short*/ SAFEARRAY FAR * FAR *IDArray, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPage, DropMany);
    if (NULL!=GetIP())
        hr= GetIP()->DropMany(ObjectsToInstance, xyArray, IDArray, lpRet);
    CHECK_HRESULT(hr, CVisioPage, DropMany);
    return hr;
}


VW_INLINE HRESULT CVisioPage::GetFormulas(/*short*/ SAFEARRAY FAR * FAR *SID_SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *formulaArray)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPage, GetFormulas);
    if (NULL!=GetIP())
        hr= GetIP()->GetFormulas(SID_SRCStream, formulaArray);
    CHECK_HRESULT(hr, CVisioPage, GetFormulas);
    return hr;
}


VW_INLINE HRESULT CVisioPage::GetResults(/*short*/ SAFEARRAY FAR * FAR *SID_SRCStream, short Flags, /*VARIANT*/ SAFEARRAY FAR * FAR *UnitsNamesOrCodes, /*VARIANT*/ SAFEARRAY FAR * FAR *resultArray)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPage, GetResults);
    if (NULL!=GetIP())
        hr= GetIP()->GetResults(SID_SRCStream, Flags, UnitsNamesOrCodes, resultArray);
    CHECK_HRESULT(hr, CVisioPage, GetResults);
    return hr;
}


VW_INLINE HRESULT CVisioPage::SetFormulas(/*short*/ SAFEARRAY FAR * FAR *SID_SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *formulaArray, short Flags, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPage, SetFormulas);
    if (NULL!=GetIP())
        hr= GetIP()->SetFormulas(SID_SRCStream, formulaArray, Flags, lpRet);
    CHECK_HRESULT(hr, CVisioPage, SetFormulas);
    return hr;
}


VW_INLINE HRESULT CVisioPage::SetResults(/*short*/ SAFEARRAY FAR * FAR *SID_SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *UnitsNamesOrCodes, /*VARIANT*/ SAFEARRAY FAR * FAR *resultArray, short Flags, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPage, SetResults);
    if (NULL!=GetIP())
        hr= GetIP()->SetResults(SID_SRCStream, UnitsNamesOrCodes, resultArray, Flags, lpRet);
    CHECK_HRESULT(hr, CVisioPage, SetResults);
    return hr;
}


VW_INLINE HRESULT CVisioPage::Connects(CVisioConnects FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVConnects FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPage, Connects);
    if (NULL!=GetIP())
        hr= GetIP()->get_Connects(&lpObj);
    CHECK_HRESULT(hr, CVisioPage, Connects);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPage::getBackPage(VARIANT_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    VARIANT lpObj;
    VariantInit(&lpObj);

    CHECK_IP(GetIP(), CVisioPage, getBackPage);
    if (NULL!=GetIP())
        hr= GetIP()->get_BackPage(&lpObj);
    CHECK_HRESULT(hr, CVisioPage, getBackPage);

#ifdef NO_VARIANT_HELPER
    VariantCopy(&rWrap, &lpObj);
#else
    rWrap= lpObj;
#endif  //  NO_VARIANT_HELPER

    VariantClear(&lpObj);

    return hr;
}


VW_INLINE HRESULT CVisioPage::putBackPage(VW_CONST VARIANT_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPage, putBackPage);
    if (NULL!=GetIP())
        hr= GetIP()->put_BackPage(param01);
    CHECK_HRESULT(hr, CVisioPage, putBackPage);
    return hr;
}


VW_INLINE HRESULT CVisioPage::Layout()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPage, Layout);
    if (NULL!=GetIP())
        hr= GetIP()->Layout();
    CHECK_HRESULT(hr, CVisioPage, Layout);
    return hr;
}


VW_INLINE HRESULT CVisioPage::BoundingBox(short Flags, double FAR *lpr8Left, double FAR *lpr8Bottom, double FAR *lpr8Right, double FAR *lpr8Top)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPage, BoundingBox);
    if (NULL!=GetIP())
        hr= GetIP()->BoundingBox(Flags, lpr8Left, lpr8Bottom, lpr8Right, lpr8Top);
    CHECK_HRESULT(hr, CVisioPage, BoundingBox);
    return hr;
}


VW_INLINE HRESULT CVisioPage::ID(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPage, ID);
    if (NULL!=GetIP())
        hr= GetIP()->get_ID(lpRet);
    CHECK_HRESULT(hr, CVisioPage, ID);
    return hr;
}


VW_INLINE HRESULT CVisioPage::OLEObjects(CVisioOLEObjects FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVOLEObjects FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPage, OLEObjects);
    if (NULL!=GetIP())
        hr= GetIP()->get_OLEObjects(&lpObj);
    CHECK_HRESULT(hr, CVisioPage, OLEObjects);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioPages

VW_INLINE HRESULT CVisioPages::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPages, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioPages, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPages::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPages, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioPages, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioPages::Item(VARIANT_HELPER_CLASS FAR &NameOrIndex, CVisioPage FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVPage FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPages, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(NameOrIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioPages, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPages::Count(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPages, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioPages, Count);
    return hr;
}


VW_INLINE HRESULT CVisioPages::Add(CVisioPage FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVPage FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPages, Add);
    if (NULL!=GetIP())
        hr= GetIP()->Add(&lpObj);
    CHECK_HRESULT(hr, CVisioPages, Add);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPages::Document(CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPages, Document);
    if (NULL!=GetIP())
        hr= GetIP()->get_Document(&lpObj);
    CHECK_HRESULT(hr, CVisioPages, Document);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPages::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPages, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioPages, Stat);
    return hr;
}


VW_INLINE HRESULT CVisioPages::EventList(CVisioEventList FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEventList FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPages, EventList);
    if (NULL!=GetIP())
        hr= GetIP()->get_EventList(&lpObj);
    CHECK_HRESULT(hr, CVisioPages, EventList);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPages::PersistsEvents(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPages, PersistsEvents);
    if (NULL!=GetIP())
        hr= GetIP()->get_PersistsEvents(lpRet);
    CHECK_HRESULT(hr, CVisioPages, PersistsEvents);
    return hr;
}


VW_INLINE HRESULT CVisioPages::GetNames(/*BSTR*/ SAFEARRAY FAR * FAR *NameArray)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPages, GetNames);
    if (NULL!=GetIP())
        hr= GetIP()->GetNames(NameArray);
    CHECK_HRESULT(hr, CVisioPages, GetNames);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioSelection

VW_INLINE HRESULT CVisioSelection::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioSelection, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioSelection, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioSelection::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioSelection, Stat);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioSelection, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::Item(short Index, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioSelection, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(Index, &lpObj);
    CHECK_HRESULT(hr, CVisioSelection, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioSelection::Count(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioSelection, Count);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::Export(BSTR_HELPER_CLASS FAR &FileName)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, Export);
    if (NULL!=GetIP())
        hr= GetIP()->Export(FileName);
    CHECK_HRESULT(hr, CVisioSelection, Export);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::Document(CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioSelection, Document);
    if (NULL!=GetIP())
        hr= GetIP()->get_Document(&lpObj);
    CHECK_HRESULT(hr, CVisioSelection, Document);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioSelection::ContainingPage(CVisioPage FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVPage FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioSelection, ContainingPage);
    if (NULL!=GetIP())
        hr= GetIP()->get_ContainingPage(&lpObj);
    CHECK_HRESULT(hr, CVisioSelection, ContainingPage);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioSelection::ContainingMaster(CVisioMaster FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMaster FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioSelection, ContainingMaster);
    if (NULL!=GetIP())
        hr= GetIP()->get_ContainingMaster(&lpObj);
    CHECK_HRESULT(hr, CVisioSelection, ContainingMaster);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioSelection::ContainingShape(CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioSelection, ContainingShape);
    if (NULL!=GetIP())
        hr= GetIP()->get_ContainingShape(&lpObj);
    CHECK_HRESULT(hr, CVisioSelection, ContainingShape);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioSelection::BringForward()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, BringForward);
    if (NULL!=GetIP())
        hr= GetIP()->BringForward();
    CHECK_HRESULT(hr, CVisioSelection, BringForward);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::BringToFront()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, BringToFront);
    if (NULL!=GetIP())
        hr= GetIP()->BringToFront();
    CHECK_HRESULT(hr, CVisioSelection, BringToFront);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::SendBackward()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, SendBackward);
    if (NULL!=GetIP())
        hr= GetIP()->SendBackward();
    CHECK_HRESULT(hr, CVisioSelection, SendBackward);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::SendToBack()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, SendToBack);
    if (NULL!=GetIP())
        hr= GetIP()->SendToBack();
    CHECK_HRESULT(hr, CVisioSelection, SendToBack);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::getStyle(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioSelection, getStyle);
    if (NULL!=GetIP())
        hr= GetIP()->get_Style(&lpObj);
    CHECK_HRESULT(hr, CVisioSelection, getStyle);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioSelection::putStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, putStyle);
    if (NULL!=GetIP())
        hr= GetIP()->put_Style(param01);
    CHECK_HRESULT(hr, CVisioSelection, putStyle);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::StyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, StyleKeepFmt);
    if (NULL!=GetIP())
        hr= GetIP()->put_StyleKeepFmt(param01);
    CHECK_HRESULT(hr, CVisioSelection, StyleKeepFmt);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::getLineStyle(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioSelection, getLineStyle);
    if (NULL!=GetIP())
        hr= GetIP()->get_LineStyle(&lpObj);
    CHECK_HRESULT(hr, CVisioSelection, getLineStyle);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioSelection::putLineStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, putLineStyle);
    if (NULL!=GetIP())
        hr= GetIP()->put_LineStyle(param01);
    CHECK_HRESULT(hr, CVisioSelection, putLineStyle);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::LineStyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, LineStyleKeepFmt);
    if (NULL!=GetIP())
        hr= GetIP()->put_LineStyleKeepFmt(param01);
    CHECK_HRESULT(hr, CVisioSelection, LineStyleKeepFmt);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::getFillStyle(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioSelection, getFillStyle);
    if (NULL!=GetIP())
        hr= GetIP()->get_FillStyle(&lpObj);
    CHECK_HRESULT(hr, CVisioSelection, getFillStyle);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioSelection::putFillStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, putFillStyle);
    if (NULL!=GetIP())
        hr= GetIP()->put_FillStyle(param01);
    CHECK_HRESULT(hr, CVisioSelection, putFillStyle);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::FillStyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, FillStyleKeepFmt);
    if (NULL!=GetIP())
        hr= GetIP()->put_FillStyleKeepFmt(param01);
    CHECK_HRESULT(hr, CVisioSelection, FillStyleKeepFmt);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::getTextStyle(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioSelection, getTextStyle);
    if (NULL!=GetIP())
        hr= GetIP()->get_TextStyle(&lpObj);
    CHECK_HRESULT(hr, CVisioSelection, getTextStyle);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioSelection::putTextStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, putTextStyle);
    if (NULL!=GetIP())
        hr= GetIP()->put_TextStyle(param01);
    CHECK_HRESULT(hr, CVisioSelection, putTextStyle);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::TextStyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, TextStyleKeepFmt);
    if (NULL!=GetIP())
        hr= GetIP()->put_TextStyleKeepFmt(param01);
    CHECK_HRESULT(hr, CVisioSelection, TextStyleKeepFmt);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::Combine()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, Combine);
    if (NULL!=GetIP())
        hr= GetIP()->Combine();
    CHECK_HRESULT(hr, CVisioSelection, Combine);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::Fragment()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, Fragment);
    if (NULL!=GetIP())
        hr= GetIP()->Fragment();
    CHECK_HRESULT(hr, CVisioSelection, Fragment);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::Intersect()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, Intersect);
    if (NULL!=GetIP())
        hr= GetIP()->Intersect();
    CHECK_HRESULT(hr, CVisioSelection, Intersect);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::Subtract()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, Subtract);
    if (NULL!=GetIP())
        hr= GetIP()->Subtract();
    CHECK_HRESULT(hr, CVisioSelection, Subtract);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::Union()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, Union);
    if (NULL!=GetIP())
        hr= GetIP()->Union();
    CHECK_HRESULT(hr, CVisioSelection, Union);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::FlipHorizontal()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, FlipHorizontal);
    if (NULL!=GetIP())
        hr= GetIP()->FlipHorizontal();
    CHECK_HRESULT(hr, CVisioSelection, FlipHorizontal);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::FlipVertical()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, FlipVertical);
    if (NULL!=GetIP())
        hr= GetIP()->FlipVertical();
    CHECK_HRESULT(hr, CVisioSelection, FlipVertical);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::ReverseEnds()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, ReverseEnds);
    if (NULL!=GetIP())
        hr= GetIP()->ReverseEnds();
    CHECK_HRESULT(hr, CVisioSelection, ReverseEnds);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::Rotate90()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, Rotate90);
    if (NULL!=GetIP())
        hr= GetIP()->Rotate90();
    CHECK_HRESULT(hr, CVisioSelection, Rotate90);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::Copy()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, Copy);
    if (NULL!=GetIP())
        hr= GetIP()->Copy();
    CHECK_HRESULT(hr, CVisioSelection, Copy);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::Cut()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, Cut);
    if (NULL!=GetIP())
        hr= GetIP()->Cut();
    CHECK_HRESULT(hr, CVisioSelection, Cut);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::Delete()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, Delete);
    if (NULL!=GetIP())
        hr= GetIP()->Delete();
    CHECK_HRESULT(hr, CVisioSelection, Delete);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::Duplicate()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, Duplicate);
    if (NULL!=GetIP())
        hr= GetIP()->Duplicate();
    CHECK_HRESULT(hr, CVisioSelection, Duplicate);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::Group()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, Group);
    if (NULL!=GetIP())
        hr= GetIP()->Group();
    CHECK_HRESULT(hr, CVisioSelection, Group);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::ConvertToGroup()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, ConvertToGroup);
    if (NULL!=GetIP())
        hr= GetIP()->ConvertToGroup();
    CHECK_HRESULT(hr, CVisioSelection, ConvertToGroup);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::Ungroup()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, Ungroup);
    if (NULL!=GetIP())
        hr= GetIP()->Ungroup();
    CHECK_HRESULT(hr, CVisioSelection, Ungroup);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::SelectAll()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, SelectAll);
    if (NULL!=GetIP())
        hr= GetIP()->SelectAll();
    CHECK_HRESULT(hr, CVisioSelection, SelectAll);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::DeselectAll()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, DeselectAll);
    if (NULL!=GetIP())
        hr= GetIP()->DeselectAll();
    CHECK_HRESULT(hr, CVisioSelection, DeselectAll);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::Select(CVisioShape FAR &SheetObject, short SelectAction)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, Select);
    if (NULL!=GetIP())
        hr= GetIP()->Select(SheetObject, SelectAction);
    CHECK_HRESULT(hr, CVisioSelection, Select);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::EventList(CVisioEventList FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEventList FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioSelection, EventList);
    if (NULL!=GetIP())
        hr= GetIP()->get_EventList(&lpObj);
    CHECK_HRESULT(hr, CVisioSelection, EventList);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioSelection::PersistsEvents(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, PersistsEvents);
    if (NULL!=GetIP())
        hr= GetIP()->get_PersistsEvents(lpRet);
    CHECK_HRESULT(hr, CVisioSelection, PersistsEvents);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::Trim()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, Trim);
    if (NULL!=GetIP())
        hr= GetIP()->Trim();
    CHECK_HRESULT(hr, CVisioSelection, Trim);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::Join()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, Join);
    if (NULL!=GetIP())
        hr= GetIP()->Join();
    CHECK_HRESULT(hr, CVisioSelection, Join);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::FitCurve(double Tolerance, short Flags)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, FitCurve);
    if (NULL!=GetIP())
        hr= GetIP()->FitCurve(Tolerance, Flags);
    CHECK_HRESULT(hr, CVisioSelection, FitCurve);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::Layout()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, Layout);
    if (NULL!=GetIP())
        hr= GetIP()->Layout();
    CHECK_HRESULT(hr, CVisioSelection, Layout);
    return hr;
}


VW_INLINE HRESULT CVisioSelection::BoundingBox(short Flags, double FAR *lpr8Left, double FAR *lpr8Bottom, double FAR *lpr8Right, double FAR *lpr8Top)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioSelection, BoundingBox);
    if (NULL!=GetIP())
        hr= GetIP()->BoundingBox(Flags, lpr8Left, lpr8Bottom, lpr8Right, lpr8Top);
    CHECK_HRESULT(hr, CVisioSelection, BoundingBox);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioShape

VW_INLINE HRESULT CVisioShape::Group()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, Group);
    if (NULL!=GetIP())
        hr= GetIP()->Group();
    CHECK_HRESULT(hr, CVisioShape, Group);
    return hr;
}


VW_INLINE HRESULT CVisioShape::BringForward()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, BringForward);
    if (NULL!=GetIP())
        hr= GetIP()->BringForward();
    CHECK_HRESULT(hr, CVisioShape, BringForward);
    return hr;
}


VW_INLINE HRESULT CVisioShape::BringToFront()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, BringToFront);
    if (NULL!=GetIP())
        hr= GetIP()->BringToFront();
    CHECK_HRESULT(hr, CVisioShape, BringToFront);
    return hr;
}


VW_INLINE HRESULT CVisioShape::ConvertToGroup()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, ConvertToGroup);
    if (NULL!=GetIP())
        hr= GetIP()->ConvertToGroup();
    CHECK_HRESULT(hr, CVisioShape, ConvertToGroup);
    return hr;
}


VW_INLINE HRESULT CVisioShape::FlipHorizontal()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, FlipHorizontal);
    if (NULL!=GetIP())
        hr= GetIP()->FlipHorizontal();
    CHECK_HRESULT(hr, CVisioShape, FlipHorizontal);
    return hr;
}


VW_INLINE HRESULT CVisioShape::FlipVertical()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, FlipVertical);
    if (NULL!=GetIP())
        hr= GetIP()->FlipVertical();
    CHECK_HRESULT(hr, CVisioShape, FlipVertical);
    return hr;
}


VW_INLINE HRESULT CVisioShape::ReverseEnds()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, ReverseEnds);
    if (NULL!=GetIP())
        hr= GetIP()->ReverseEnds();
    CHECK_HRESULT(hr, CVisioShape, ReverseEnds);
    return hr;
}


VW_INLINE HRESULT CVisioShape::SendBackward()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, SendBackward);
    if (NULL!=GetIP())
        hr= GetIP()->SendBackward();
    CHECK_HRESULT(hr, CVisioShape, SendBackward);
    return hr;
}


VW_INLINE HRESULT CVisioShape::SendToBack()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, SendToBack);
    if (NULL!=GetIP())
        hr= GetIP()->SendToBack();
    CHECK_HRESULT(hr, CVisioShape, SendToBack);
    return hr;
}


VW_INLINE HRESULT CVisioShape::Rotate90()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, Rotate90);
    if (NULL!=GetIP())
        hr= GetIP()->Rotate90();
    CHECK_HRESULT(hr, CVisioShape, Rotate90);
    return hr;
}


VW_INLINE HRESULT CVisioShape::Ungroup()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, Ungroup);
    if (NULL!=GetIP())
        hr= GetIP()->Ungroup();
    CHECK_HRESULT(hr, CVisioShape, Ungroup);
    return hr;
}


VW_INLINE HRESULT CVisioShape::Document(CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, Document);
    if (NULL!=GetIP())
        hr= GetIP()->get_Document(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, Document);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::Parent(IDispatch FAR *FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, Parent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Parent(lpRet);
    CHECK_HRESULT(hr, CVisioShape, Parent);
    return hr;
}


VW_INLINE HRESULT CVisioShape::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioShape, Stat);
    return hr;
}


VW_INLINE HRESULT CVisioShape::Master(CVisioMaster FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMaster FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, Master);
    if (NULL!=GetIP())
        hr= GetIP()->get_Master(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, Master);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::Type(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, Type);
    if (NULL!=GetIP())
        hr= GetIP()->get_Type(lpRet);
    CHECK_HRESULT(hr, CVisioShape, Type);
    return hr;
}


VW_INLINE HRESULT CVisioShape::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioShape, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioShape::Cells(BSTR_HELPER_CLASS FAR &CellName, CVisioCell FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVCell FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, Cells);
    if (NULL!=GetIP())
        hr= GetIP()->get_Cells(CellName, &lpObj);
    CHECK_HRESULT(hr, CVisioShape, Cells);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::CellsSRC(short Section, short Row, short Column, CVisioCell FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVCell FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, CellsSRC);
    if (NULL!=GetIP())
        hr= GetIP()->get_CellsSRC(Section, Row, Column, &lpObj);
    CHECK_HRESULT(hr, CVisioShape, CellsSRC);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::Shapes(CVisioShapes FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShapes FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, Shapes);
    if (NULL!=GetIP())
        hr= GetIP()->get_Shapes(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, Shapes);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::getData1(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, getData1);
    if (NULL!=GetIP())
        hr= GetIP()->get_Data1(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, getData1);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioShape::putData1(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, putData1);
    if (NULL!=GetIP())
        hr= GetIP()->put_Data1(param01);
    CHECK_HRESULT(hr, CVisioShape, putData1);
    return hr;
}


VW_INLINE HRESULT CVisioShape::getData2(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, getData2);
    if (NULL!=GetIP())
        hr= GetIP()->get_Data2(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, getData2);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioShape::putData2(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, putData2);
    if (NULL!=GetIP())
        hr= GetIP()->put_Data2(param01);
    CHECK_HRESULT(hr, CVisioShape, putData2);
    return hr;
}


VW_INLINE HRESULT CVisioShape::getData3(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, getData3);
    if (NULL!=GetIP())
        hr= GetIP()->get_Data3(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, getData3);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioShape::putData3(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, putData3);
    if (NULL!=GetIP())
        hr= GetIP()->put_Data3(param01);
    CHECK_HRESULT(hr, CVisioShape, putData3);
    return hr;
}


VW_INLINE HRESULT CVisioShape::getHelp(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, getHelp);
    if (NULL!=GetIP())
        hr= GetIP()->get_Help(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, getHelp);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioShape::putHelp(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, putHelp);
    if (NULL!=GetIP())
        hr= GetIP()->put_Help(param01);
    CHECK_HRESULT(hr, CVisioShape, putHelp);
    return hr;
}


VW_INLINE HRESULT CVisioShape::NameID(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, NameID);
    if (NULL!=GetIP())
        hr= GetIP()->get_NameID(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, NameID);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioShape::getName(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, getName);
    if (NULL!=GetIP())
        hr= GetIP()->get_Name(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, getName);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioShape::putName(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, putName);
    if (NULL!=GetIP())
        hr= GetIP()->put_Name(param01);
    CHECK_HRESULT(hr, CVisioShape, putName);
    return hr;
}


VW_INLINE HRESULT CVisioShape::getText(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, getText);
    if (NULL!=GetIP())
        hr= GetIP()->get_Text(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, getText);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioShape::putText(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, putText);
    if (NULL!=GetIP())
        hr= GetIP()->put_Text(param01);
    CHECK_HRESULT(hr, CVisioShape, putText);
    return hr;
}


VW_INLINE HRESULT CVisioShape::CharCount(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, CharCount);
    if (NULL!=GetIP())
        hr= GetIP()->get_CharCount(lpRet);
    CHECK_HRESULT(hr, CVisioShape, CharCount);
    return hr;
}


VW_INLINE HRESULT CVisioShape::Characters(CVisioCharacters FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVCharacters FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, Characters);
    if (NULL!=GetIP())
        hr= GetIP()->get_Characters(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, Characters);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::Copy()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, Copy);
    if (NULL!=GetIP())
        hr= GetIP()->Copy();
    CHECK_HRESULT(hr, CVisioShape, Copy);
    return hr;
}


VW_INLINE HRESULT CVisioShape::Cut()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, Cut);
    if (NULL!=GetIP())
        hr= GetIP()->Cut();
    CHECK_HRESULT(hr, CVisioShape, Cut);
    return hr;
}


VW_INLINE HRESULT CVisioShape::Delete()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, Delete);
    if (NULL!=GetIP())
        hr= GetIP()->Delete();
    CHECK_HRESULT(hr, CVisioShape, Delete);
    return hr;
}


VW_INLINE HRESULT CVisioShape::Duplicate()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, Duplicate);
    if (NULL!=GetIP())
        hr= GetIP()->Duplicate();
    CHECK_HRESULT(hr, CVisioShape, Duplicate);
    return hr;
}


VW_INLINE HRESULT CVisioShape::Drop(IUnknown FAR *ObjectToDrop, double xPos, double yPos, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, Drop);
    if (NULL!=GetIP())
        hr= GetIP()->Drop(ObjectToDrop, xPos, yPos, &lpObj);
    CHECK_HRESULT(hr, CVisioShape, Drop);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::getOneD(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, getOneD);
    if (NULL!=GetIP())
        hr= GetIP()->get_OneD(lpRet);
    CHECK_HRESULT(hr, CVisioShape, getOneD);
    return hr;
}


VW_INLINE HRESULT CVisioShape::putOneD(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, putOneD);
    if (NULL!=GetIP())
        hr= GetIP()->put_OneD(param01);
    CHECK_HRESULT(hr, CVisioShape, putOneD);
    return hr;
}


VW_INLINE HRESULT CVisioShape::GeometryCount(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, GeometryCount);
    if (NULL!=GetIP())
        hr= GetIP()->get_GeometryCount(lpRet);
    CHECK_HRESULT(hr, CVisioShape, GeometryCount);
    return hr;
}


VW_INLINE HRESULT CVisioShape::RowCount(short Section, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, RowCount);
    if (NULL!=GetIP())
        hr= GetIP()->get_RowCount(Section, lpRet);
    CHECK_HRESULT(hr, CVisioShape, RowCount);
    return hr;
}


VW_INLINE HRESULT CVisioShape::AddSection(short Section, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, AddSection);
    if (NULL!=GetIP())
        hr= GetIP()->AddSection(Section, lpRet);
    CHECK_HRESULT(hr, CVisioShape, AddSection);
    return hr;
}


VW_INLINE HRESULT CVisioShape::DeleteSection(short Section)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, DeleteSection);
    if (NULL!=GetIP())
        hr= GetIP()->DeleteSection(Section);
    CHECK_HRESULT(hr, CVisioShape, DeleteSection);
    return hr;
}


VW_INLINE HRESULT CVisioShape::AddRow(short Section, short Row, short RowTag, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, AddRow);
    if (NULL!=GetIP())
        hr= GetIP()->AddRow(Section, Row, RowTag, lpRet);
    CHECK_HRESULT(hr, CVisioShape, AddRow);
    return hr;
}


VW_INLINE HRESULT CVisioShape::DeleteRow(short Section, short Row)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, DeleteRow);
    if (NULL!=GetIP())
        hr= GetIP()->DeleteRow(Section, Row);
    CHECK_HRESULT(hr, CVisioShape, DeleteRow);
    return hr;
}


VW_INLINE HRESULT CVisioShape::RowsCellCount(short Section, short Row, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, RowsCellCount);
    if (NULL!=GetIP())
        hr= GetIP()->get_RowsCellCount(Section, Row, lpRet);
    CHECK_HRESULT(hr, CVisioShape, RowsCellCount);
    return hr;
}


VW_INLINE HRESULT CVisioShape::getRowType(short Section, short Row, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, getRowType);
    if (NULL!=GetIP())
        hr= GetIP()->get_RowType(Section, Row, lpRet);
    CHECK_HRESULT(hr, CVisioShape, getRowType);
    return hr;
}


VW_INLINE HRESULT CVisioShape::putRowType(VW_CONST short Section, VW_CONST short Row, VW_CONST short param03)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, putRowType);
    if (NULL!=GetIP())
        hr= GetIP()->put_RowType(Section, Row, param03);
    CHECK_HRESULT(hr, CVisioShape, putRowType);
    return hr;
}


VW_INLINE HRESULT CVisioShape::SetCenter(double xPos, double yPos)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, SetCenter);
    if (NULL!=GetIP())
        hr= GetIP()->SetCenter(xPos, yPos);
    CHECK_HRESULT(hr, CVisioShape, SetCenter);
    return hr;
}


VW_INLINE HRESULT CVisioShape::SetBegin(double xPos, double yPos)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, SetBegin);
    if (NULL!=GetIP())
        hr= GetIP()->SetBegin(xPos, yPos);
    CHECK_HRESULT(hr, CVisioShape, SetBegin);
    return hr;
}


VW_INLINE HRESULT CVisioShape::SetEnd(double xPos, double yPos)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, SetEnd);
    if (NULL!=GetIP())
        hr= GetIP()->SetEnd(xPos, yPos);
    CHECK_HRESULT(hr, CVisioShape, SetEnd);
    return hr;
}


VW_INLINE HRESULT CVisioShape::Connects(CVisioConnects FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVConnects FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, Connects);
    if (NULL!=GetIP())
        hr= GetIP()->get_Connects(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, Connects);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::Index(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, Index);
    if (NULL!=GetIP())
        hr= GetIP()->get_Index(lpRet);
    CHECK_HRESULT(hr, CVisioShape, Index);
    return hr;
}


VW_INLINE HRESULT CVisioShape::getStyle(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, getStyle);
    if (NULL!=GetIP())
        hr= GetIP()->get_Style(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, getStyle);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioShape::putStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, putStyle);
    if (NULL!=GetIP())
        hr= GetIP()->put_Style(param01);
    CHECK_HRESULT(hr, CVisioShape, putStyle);
    return hr;
}


VW_INLINE HRESULT CVisioShape::StyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, StyleKeepFmt);
    if (NULL!=GetIP())
        hr= GetIP()->put_StyleKeepFmt(param01);
    CHECK_HRESULT(hr, CVisioShape, StyleKeepFmt);
    return hr;
}


VW_INLINE HRESULT CVisioShape::getLineStyle(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, getLineStyle);
    if (NULL!=GetIP())
        hr= GetIP()->get_LineStyle(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, getLineStyle);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioShape::putLineStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, putLineStyle);
    if (NULL!=GetIP())
        hr= GetIP()->put_LineStyle(param01);
    CHECK_HRESULT(hr, CVisioShape, putLineStyle);
    return hr;
}


VW_INLINE HRESULT CVisioShape::LineStyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, LineStyleKeepFmt);
    if (NULL!=GetIP())
        hr= GetIP()->put_LineStyleKeepFmt(param01);
    CHECK_HRESULT(hr, CVisioShape, LineStyleKeepFmt);
    return hr;
}


VW_INLINE HRESULT CVisioShape::getFillStyle(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, getFillStyle);
    if (NULL!=GetIP())
        hr= GetIP()->get_FillStyle(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, getFillStyle);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioShape::putFillStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, putFillStyle);
    if (NULL!=GetIP())
        hr= GetIP()->put_FillStyle(param01);
    CHECK_HRESULT(hr, CVisioShape, putFillStyle);
    return hr;
}


VW_INLINE HRESULT CVisioShape::FillStyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, FillStyleKeepFmt);
    if (NULL!=GetIP())
        hr= GetIP()->put_FillStyleKeepFmt(param01);
    CHECK_HRESULT(hr, CVisioShape, FillStyleKeepFmt);
    return hr;
}


VW_INLINE HRESULT CVisioShape::getTextStyle(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, getTextStyle);
    if (NULL!=GetIP())
        hr= GetIP()->get_TextStyle(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, getTextStyle);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioShape::putTextStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, putTextStyle);
    if (NULL!=GetIP())
        hr= GetIP()->put_TextStyle(param01);
    CHECK_HRESULT(hr, CVisioShape, putTextStyle);
    return hr;
}


VW_INLINE HRESULT CVisioShape::TextStyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, TextStyleKeepFmt);
    if (NULL!=GetIP())
        hr= GetIP()->put_TextStyleKeepFmt(param01);
    CHECK_HRESULT(hr, CVisioShape, TextStyleKeepFmt);
    return hr;
}


VW_INLINE HRESULT CVisioShape::Export(BSTR_HELPER_CLASS FAR &FileName)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, Export);
    if (NULL!=GetIP())
        hr= GetIP()->Export(FileName);
    CHECK_HRESULT(hr, CVisioShape, Export);
    return hr;
}


VW_INLINE HRESULT CVisioShape::AreaIU(double FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, AreaIU);
    if (NULL!=GetIP())
        hr= GetIP()->get_AreaIU(lpRet);
    CHECK_HRESULT(hr, CVisioShape, AreaIU);
    return hr;
}


VW_INLINE HRESULT CVisioShape::LengthIU(double FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, LengthIU);
    if (NULL!=GetIP())
        hr= GetIP()->get_LengthIU(lpRet);
    CHECK_HRESULT(hr, CVisioShape, LengthIU);
    return hr;
}


VW_INLINE HRESULT CVisioShape::GeomExIf(short fFill, double LineRes, IUnknown FAR *FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, GeomExIf);
    if (NULL!=GetIP())
        hr= GetIP()->get_GeomExIf(fFill, LineRes, lpRet);
    CHECK_HRESULT(hr, CVisioShape, GeomExIf);
    return hr;
}


VW_INLINE HRESULT CVisioShape::UniqueID(short fUniqueID, BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, UniqueID);
    if (NULL!=GetIP())
        hr= GetIP()->get_UniqueID(fUniqueID, &lpObj);
    CHECK_HRESULT(hr, CVisioShape, UniqueID);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioShape::ContainingPage(CVisioPage FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVPage FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, ContainingPage);
    if (NULL!=GetIP())
        hr= GetIP()->get_ContainingPage(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, ContainingPage);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::ContainingMaster(CVisioMaster FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMaster FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, ContainingMaster);
    if (NULL!=GetIP())
        hr= GetIP()->get_ContainingMaster(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, ContainingMaster);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::ContainingShape(CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, ContainingShape);
    if (NULL!=GetIP())
        hr= GetIP()->get_ContainingShape(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, ContainingShape);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::SectionExists(short Section, short fLocalExists, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, SectionExists);
    if (NULL!=GetIP())
        hr= GetIP()->get_SectionExists(Section, fLocalExists, lpRet);
    CHECK_HRESULT(hr, CVisioShape, SectionExists);
    return hr;
}


VW_INLINE HRESULT CVisioShape::RowExists(short Section, short Row, short fLocalExists, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, RowExists);
    if (NULL!=GetIP())
        hr= GetIP()->get_RowExists(Section, Row, fLocalExists, lpRet);
    CHECK_HRESULT(hr, CVisioShape, RowExists);
    return hr;
}


VW_INLINE HRESULT CVisioShape::CellExists(BSTR_HELPER_CLASS FAR &CellName, short fLocalExists, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, CellExists);
    if (NULL!=GetIP())
        hr= GetIP()->get_CellExists(CellName, fLocalExists, lpRet);
    CHECK_HRESULT(hr, CVisioShape, CellExists);
    return hr;
}


VW_INLINE HRESULT CVisioShape::CellsSRCExists(short Section, short Row, short Column, short fLocalExists, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, CellsSRCExists);
    if (NULL!=GetIP())
        hr= GetIP()->get_CellsSRCExists(Section, Row, Column, fLocalExists, lpRet);
    CHECK_HRESULT(hr, CVisioShape, CellsSRCExists);
    return hr;
}


VW_INLINE HRESULT CVisioShape::LayerCount(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, LayerCount);
    if (NULL!=GetIP())
        hr= GetIP()->get_LayerCount(lpRet);
    CHECK_HRESULT(hr, CVisioShape, LayerCount);
    return hr;
}


VW_INLINE HRESULT CVisioShape::Layer(short Index, CVisioLayer FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVLayer FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, Layer);
    if (NULL!=GetIP())
        hr= GetIP()->get_Layer(Index, &lpObj);
    CHECK_HRESULT(hr, CVisioShape, Layer);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::AddNamedRow(short Section, BSTR_HELPER_CLASS FAR &RowName, short RowTag, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, AddNamedRow);
    if (NULL!=GetIP())
        hr= GetIP()->AddNamedRow(Section, RowName, RowTag, lpRet);
    CHECK_HRESULT(hr, CVisioShape, AddNamedRow);
    return hr;
}


VW_INLINE HRESULT CVisioShape::AddRows(short Section, short Row, short RowTag, short RowCount, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, AddRows);
    if (NULL!=GetIP())
        hr= GetIP()->AddRows(Section, Row, RowTag, RowCount, lpRet);
    CHECK_HRESULT(hr, CVisioShape, AddRows);
    return hr;
}


VW_INLINE HRESULT CVisioShape::EventList(CVisioEventList FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEventList FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, EventList);
    if (NULL!=GetIP())
        hr= GetIP()->get_EventList(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, EventList);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::PersistsEvents(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, PersistsEvents);
    if (NULL!=GetIP())
        hr= GetIP()->get_PersistsEvents(lpRet);
    CHECK_HRESULT(hr, CVisioShape, PersistsEvents);
    return hr;
}


VW_INLINE HRESULT CVisioShape::DrawLine(double xLeft, double yTop, double xRight, double yBottom, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, DrawLine);
    if (NULL!=GetIP())
        hr= GetIP()->DrawLine(xLeft, yTop, xRight, yBottom, &lpObj);
    CHECK_HRESULT(hr, CVisioShape, DrawLine);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::DrawRectangle(double xLeft, double yTop, double xRight, double yBottom, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, DrawRectangle);
    if (NULL!=GetIP())
        hr= GetIP()->DrawRectangle(xLeft, yTop, xRight, yBottom, &lpObj);
    CHECK_HRESULT(hr, CVisioShape, DrawRectangle);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::DrawOval(double xLeft, double yTop, double xRight, double yBottom, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, DrawOval);
    if (NULL!=GetIP())
        hr= GetIP()->DrawOval(xLeft, yTop, xRight, yBottom, &lpObj);
    CHECK_HRESULT(hr, CVisioShape, DrawOval);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::DrawSpline(/*double*/ SAFEARRAY FAR * FAR *xyArray, double Tolerance, short Flags, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, DrawSpline);
    if (NULL!=GetIP())
        hr= GetIP()->DrawSpline(xyArray, Tolerance, Flags, &lpObj);
    CHECK_HRESULT(hr, CVisioShape, DrawSpline);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::DrawBezier(/*double*/ SAFEARRAY FAR * FAR *xyArray, short degree, short Flags, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, DrawBezier);
    if (NULL!=GetIP())
        hr= GetIP()->DrawBezier(xyArray, degree, Flags, &lpObj);
    CHECK_HRESULT(hr, CVisioShape, DrawBezier);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::DrawPolyline(/*double*/ SAFEARRAY FAR * FAR *xyArray, short Flags, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, DrawPolyline);
    if (NULL!=GetIP())
        hr= GetIP()->DrawPolyline(xyArray, Flags, &lpObj);
    CHECK_HRESULT(hr, CVisioShape, DrawPolyline);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::FitCurve(double Tolerance, short Flags)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, FitCurve);
    if (NULL!=GetIP())
        hr= GetIP()->FitCurve(Tolerance, Flags);
    CHECK_HRESULT(hr, CVisioShape, FitCurve);
    return hr;
}


VW_INLINE HRESULT CVisioShape::Import(BSTR_HELPER_CLASS FAR &FileName, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, Import);
    if (NULL!=GetIP())
        hr= GetIP()->Import(FileName, &lpObj);
    CHECK_HRESULT(hr, CVisioShape, Import);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::CenterDrawing()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, CenterDrawing);
    if (NULL!=GetIP())
        hr= GetIP()->CenterDrawing();
    CHECK_HRESULT(hr, CVisioShape, CenterDrawing);
    return hr;
}


VW_INLINE HRESULT CVisioShape::InsertFromFile(BSTR_HELPER_CLASS FAR &FileName, short Flags, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, InsertFromFile);
    if (NULL!=GetIP())
        hr= GetIP()->InsertFromFile(FileName, Flags, &lpObj);
    CHECK_HRESULT(hr, CVisioShape, InsertFromFile);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::InsertObject(BSTR_HELPER_CLASS FAR &ClassOrProgID, short Flags, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, InsertObject);
    if (NULL!=GetIP())
        hr= GetIP()->InsertObject(ClassOrProgID, Flags, &lpObj);
    CHECK_HRESULT(hr, CVisioShape, InsertObject);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::ClassID(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, ClassID);
    if (NULL!=GetIP())
        hr= GetIP()->get_ClassID(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, ClassID);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioShape::ForeignType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, ForeignType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ForeignType(lpRet);
    CHECK_HRESULT(hr, CVisioShape, ForeignType);
    return hr;
}


VW_INLINE HRESULT CVisioShape::Object(IDispatch FAR *FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, Object);
    if (NULL!=GetIP())
        hr= GetIP()->get_Object(lpRet);
    CHECK_HRESULT(hr, CVisioShape, Object);
    return hr;
}


VW_INLINE HRESULT CVisioShape::OpenDrawWindow(CVisioWindow FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVWindow FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, OpenDrawWindow);
    if (NULL!=GetIP())
        hr= GetIP()->OpenDrawWindow(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, OpenDrawWindow);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::OpenSheetWindow(CVisioWindow FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVWindow FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, OpenSheetWindow);
    if (NULL!=GetIP())
        hr= GetIP()->OpenSheetWindow(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, OpenSheetWindow);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::ID(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, ID);
    if (NULL!=GetIP())
        hr= GetIP()->get_ID(lpRet);
    CHECK_HRESULT(hr, CVisioShape, ID);
    return hr;
}


VW_INLINE HRESULT CVisioShape::DropMany(/*VARIANT*/ SAFEARRAY FAR * FAR *ObjectsToInstance, /*double*/ SAFEARRAY FAR * FAR *xyArray, /*short*/ SAFEARRAY FAR * FAR *IDArray, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, DropMany);
    if (NULL!=GetIP())
        hr= GetIP()->DropMany(ObjectsToInstance, xyArray, IDArray, lpRet);
    CHECK_HRESULT(hr, CVisioShape, DropMany);
    return hr;
}


VW_INLINE HRESULT CVisioShape::GetFormulas(/*short*/ SAFEARRAY FAR * FAR *SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *formulaArray)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, GetFormulas);
    if (NULL!=GetIP())
        hr= GetIP()->GetFormulas(SRCStream, formulaArray);
    CHECK_HRESULT(hr, CVisioShape, GetFormulas);
    return hr;
}


VW_INLINE HRESULT CVisioShape::GetResults(/*short*/ SAFEARRAY FAR * FAR *SRCStream, short Flags, /*VARIANT*/ SAFEARRAY FAR * FAR *UnitsNamesOrCodes, /*VARIANT*/ SAFEARRAY FAR * FAR *resultArray)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, GetResults);
    if (NULL!=GetIP())
        hr= GetIP()->GetResults(SRCStream, Flags, UnitsNamesOrCodes, resultArray);
    CHECK_HRESULT(hr, CVisioShape, GetResults);
    return hr;
}


VW_INLINE HRESULT CVisioShape::SetFormulas(/*short*/ SAFEARRAY FAR * FAR *SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *formulaArray, short Flags, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, SetFormulas);
    if (NULL!=GetIP())
        hr= GetIP()->SetFormulas(SRCStream, formulaArray, Flags, lpRet);
    CHECK_HRESULT(hr, CVisioShape, SetFormulas);
    return hr;
}


VW_INLINE HRESULT CVisioShape::SetResults(/*short*/ SAFEARRAY FAR * FAR *SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *UnitsNamesOrCodes, /*VARIANT*/ SAFEARRAY FAR * FAR *resultArray, short Flags, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, SetResults);
    if (NULL!=GetIP())
        hr= GetIP()->SetResults(SRCStream, UnitsNamesOrCodes, resultArray, Flags, lpRet);
    CHECK_HRESULT(hr, CVisioShape, SetResults);
    return hr;
}


VW_INLINE HRESULT CVisioShape::FromConnects(CVisioConnects FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVConnects FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, FromConnects);
    if (NULL!=GetIP())
        hr= GetIP()->get_FromConnects(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, FromConnects);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::Layout()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, Layout);
    if (NULL!=GetIP())
        hr= GetIP()->Layout();
    CHECK_HRESULT(hr, CVisioShape, Layout);
    return hr;
}


VW_INLINE HRESULT CVisioShape::BoundingBox(short Flags, double FAR *lpr8Left, double FAR *lpr8Bottom, double FAR *lpr8Right, double FAR *lpr8Top)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, BoundingBox);
    if (NULL!=GetIP())
        hr= GetIP()->BoundingBox(Flags, lpr8Left, lpr8Bottom, lpr8Right, lpr8Top);
    CHECK_HRESULT(hr, CVisioShape, BoundingBox);
    return hr;
}


VW_INLINE HRESULT CVisioShape::HitTest(double xPos, double yPos, double Tolerance, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, HitTest);
    if (NULL!=GetIP())
        hr= GetIP()->HitTest(xPos, yPos, Tolerance, lpRet);
    CHECK_HRESULT(hr, CVisioShape, HitTest);
    return hr;
}


VW_INLINE HRESULT CVisioShape::Hyperlink(CVisioHyperlink FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVHyperlink FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, Hyperlink);
    if (NULL!=GetIP())
        hr= GetIP()->get_Hyperlink(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, Hyperlink);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::ProgID(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, ProgID);
    if (NULL!=GetIP())
        hr= GetIP()->get_ProgID(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, ProgID);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioShape::ObjectIsInherited(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShape, ObjectIsInherited);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectIsInherited(lpRet);
    CHECK_HRESULT(hr, CVisioShape, ObjectIsInherited);
    return hr;
}


VW_INLINE HRESULT CVisioShape::Paths(CVisioPaths FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVPaths FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, Paths);
    if (NULL!=GetIP())
        hr= GetIP()->get_Paths(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, Paths);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::PathsLocal(CVisioPaths FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVPaths FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, PathsLocal);
    if (NULL!=GetIP())
        hr= GetIP()->get_PathsLocal(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, PathsLocal);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShape::AddHyperlink(CVisioHyperlink FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVHyperlink FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShape, AddHyperlink);
    if (NULL!=GetIP())
        hr= GetIP()->AddHyperlink(&lpObj);
    CHECK_HRESULT(hr, CVisioShape, AddHyperlink);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioShapes

VW_INLINE HRESULT CVisioShapes::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShapes, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioShapes, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShapes::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShapes, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioShapes, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioShapes::Item(VARIANT_HELPER_CLASS FAR &NameUIDOrIndex, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShapes, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(NameUIDOrIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioShapes, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShapes::Count(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShapes, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioShapes, Count);
    return hr;
}


VW_INLINE HRESULT CVisioShapes::Document(CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShapes, Document);
    if (NULL!=GetIP())
        hr= GetIP()->get_Document(&lpObj);
    CHECK_HRESULT(hr, CVisioShapes, Document);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShapes::ContainingPage(CVisioPage FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVPage FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShapes, ContainingPage);
    if (NULL!=GetIP())
        hr= GetIP()->get_ContainingPage(&lpObj);
    CHECK_HRESULT(hr, CVisioShapes, ContainingPage);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShapes::ContainingMaster(CVisioMaster FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMaster FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShapes, ContainingMaster);
    if (NULL!=GetIP())
        hr= GetIP()->get_ContainingMaster(&lpObj);
    CHECK_HRESULT(hr, CVisioShapes, ContainingMaster);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShapes::ContainingShape(CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShapes, ContainingShape);
    if (NULL!=GetIP())
        hr= GetIP()->get_ContainingShape(&lpObj);
    CHECK_HRESULT(hr, CVisioShapes, ContainingShape);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShapes::CenterDrawing()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShapes, CenterDrawing);
    if (NULL!=GetIP())
        hr= GetIP()->CenterDrawing();
    CHECK_HRESULT(hr, CVisioShapes, CenterDrawing);
    return hr;
}


VW_INLINE HRESULT CVisioShapes::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShapes, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioShapes, Stat);
    return hr;
}


VW_INLINE HRESULT CVisioShapes::EventList(CVisioEventList FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEventList FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShapes, EventList);
    if (NULL!=GetIP())
        hr= GetIP()->get_EventList(&lpObj);
    CHECK_HRESULT(hr, CVisioShapes, EventList);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioShapes::PersistsEvents(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioShapes, PersistsEvents);
    if (NULL!=GetIP())
        hr= GetIP()->get_PersistsEvents(lpRet);
    CHECK_HRESULT(hr, CVisioShapes, PersistsEvents);
    return hr;
}


VW_INLINE HRESULT CVisioShapes::ItemFromID(short ObjectID, CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioShapes, ItemFromID);
    if (NULL!=GetIP())
        hr= GetIP()->get_ItemFromID(ObjectID, &lpObj);
    CHECK_HRESULT(hr, CVisioShapes, ItemFromID);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioStyle

VW_INLINE HRESULT CVisioStyle::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStyle, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioStyle, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioStyle::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyle, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioStyle, Stat);
    return hr;
}


VW_INLINE HRESULT CVisioStyle::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyle, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioStyle, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioStyle::getName(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStyle, getName);
    if (NULL!=GetIP())
        hr= GetIP()->get_Name(&lpObj);
    CHECK_HRESULT(hr, CVisioStyle, getName);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioStyle::putName(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyle, putName);
    if (NULL!=GetIP())
        hr= GetIP()->put_Name(param01);
    CHECK_HRESULT(hr, CVisioStyle, putName);
    return hr;
}


VW_INLINE HRESULT CVisioStyle::Index(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyle, Index);
    if (NULL!=GetIP())
        hr= GetIP()->get_Index(lpRet);
    CHECK_HRESULT(hr, CVisioStyle, Index);
    return hr;
}


VW_INLINE HRESULT CVisioStyle::Document(CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStyle, Document);
    if (NULL!=GetIP())
        hr= GetIP()->get_Document(&lpObj);
    CHECK_HRESULT(hr, CVisioStyle, Document);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioStyle::getBasedOn(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStyle, getBasedOn);
    if (NULL!=GetIP())
        hr= GetIP()->get_BasedOn(&lpObj);
    CHECK_HRESULT(hr, CVisioStyle, getBasedOn);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioStyle::putBasedOn(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyle, putBasedOn);
    if (NULL!=GetIP())
        hr= GetIP()->put_BasedOn(param01);
    CHECK_HRESULT(hr, CVisioStyle, putBasedOn);
    return hr;
}


VW_INLINE HRESULT CVisioStyle::getTextBasedOn(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStyle, getTextBasedOn);
    if (NULL!=GetIP())
        hr= GetIP()->get_TextBasedOn(&lpObj);
    CHECK_HRESULT(hr, CVisioStyle, getTextBasedOn);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioStyle::putTextBasedOn(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyle, putTextBasedOn);
    if (NULL!=GetIP())
        hr= GetIP()->put_TextBasedOn(param01);
    CHECK_HRESULT(hr, CVisioStyle, putTextBasedOn);
    return hr;
}


VW_INLINE HRESULT CVisioStyle::getLineBasedOn(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStyle, getLineBasedOn);
    if (NULL!=GetIP())
        hr= GetIP()->get_LineBasedOn(&lpObj);
    CHECK_HRESULT(hr, CVisioStyle, getLineBasedOn);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioStyle::putLineBasedOn(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyle, putLineBasedOn);
    if (NULL!=GetIP())
        hr= GetIP()->put_LineBasedOn(param01);
    CHECK_HRESULT(hr, CVisioStyle, putLineBasedOn);
    return hr;
}


VW_INLINE HRESULT CVisioStyle::getFillBasedOn(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStyle, getFillBasedOn);
    if (NULL!=GetIP())
        hr= GetIP()->get_FillBasedOn(&lpObj);
    CHECK_HRESULT(hr, CVisioStyle, getFillBasedOn);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioStyle::putFillBasedOn(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyle, putFillBasedOn);
    if (NULL!=GetIP())
        hr= GetIP()->put_FillBasedOn(param01);
    CHECK_HRESULT(hr, CVisioStyle, putFillBasedOn);
    return hr;
}


VW_INLINE HRESULT CVisioStyle::getIncludesText(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyle, getIncludesText);
    if (NULL!=GetIP())
        hr= GetIP()->get_IncludesText(lpRet);
    CHECK_HRESULT(hr, CVisioStyle, getIncludesText);
    return hr;
}


VW_INLINE HRESULT CVisioStyle::putIncludesText(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyle, putIncludesText);
    if (NULL!=GetIP())
        hr= GetIP()->put_IncludesText(param01);
    CHECK_HRESULT(hr, CVisioStyle, putIncludesText);
    return hr;
}


VW_INLINE HRESULT CVisioStyle::getIncludesLine(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyle, getIncludesLine);
    if (NULL!=GetIP())
        hr= GetIP()->get_IncludesLine(lpRet);
    CHECK_HRESULT(hr, CVisioStyle, getIncludesLine);
    return hr;
}


VW_INLINE HRESULT CVisioStyle::putIncludesLine(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyle, putIncludesLine);
    if (NULL!=GetIP())
        hr= GetIP()->put_IncludesLine(param01);
    CHECK_HRESULT(hr, CVisioStyle, putIncludesLine);
    return hr;
}


VW_INLINE HRESULT CVisioStyle::getIncludesFill(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyle, getIncludesFill);
    if (NULL!=GetIP())
        hr= GetIP()->get_IncludesFill(lpRet);
    CHECK_HRESULT(hr, CVisioStyle, getIncludesFill);
    return hr;
}


VW_INLINE HRESULT CVisioStyle::putIncludesFill(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyle, putIncludesFill);
    if (NULL!=GetIP())
        hr= GetIP()->put_IncludesFill(param01);
    CHECK_HRESULT(hr, CVisioStyle, putIncludesFill);
    return hr;
}


VW_INLINE HRESULT CVisioStyle::Cells(BSTR_HELPER_CLASS FAR &CellName, CVisioCell FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVCell FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStyle, Cells);
    if (NULL!=GetIP())
        hr= GetIP()->get_Cells(CellName, &lpObj);
    CHECK_HRESULT(hr, CVisioStyle, Cells);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioStyle::Delete()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyle, Delete);
    if (NULL!=GetIP())
        hr= GetIP()->Delete();
    CHECK_HRESULT(hr, CVisioStyle, Delete);
    return hr;
}


VW_INLINE HRESULT CVisioStyle::EventList(CVisioEventList FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEventList FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStyle, EventList);
    if (NULL!=GetIP())
        hr= GetIP()->get_EventList(&lpObj);
    CHECK_HRESULT(hr, CVisioStyle, EventList);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioStyle::PersistsEvents(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyle, PersistsEvents);
    if (NULL!=GetIP())
        hr= GetIP()->get_PersistsEvents(lpRet);
    CHECK_HRESULT(hr, CVisioStyle, PersistsEvents);
    return hr;
}


VW_INLINE HRESULT CVisioStyle::ID(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyle, ID);
    if (NULL!=GetIP())
        hr= GetIP()->get_ID(lpRet);
    CHECK_HRESULT(hr, CVisioStyle, ID);
    return hr;
}


VW_INLINE HRESULT CVisioStyle::GetFormulas(/*short*/ SAFEARRAY FAR * FAR *SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *formulaArray)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyle, GetFormulas);
    if (NULL!=GetIP())
        hr= GetIP()->GetFormulas(SRCStream, formulaArray);
    CHECK_HRESULT(hr, CVisioStyle, GetFormulas);
    return hr;
}


VW_INLINE HRESULT CVisioStyle::GetResults(/*short*/ SAFEARRAY FAR * FAR *SRCStream, short Flags, /*VARIANT*/ SAFEARRAY FAR * FAR *UnitsNamesOrCodes, /*VARIANT*/ SAFEARRAY FAR * FAR *resultArray)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyle, GetResults);
    if (NULL!=GetIP())
        hr= GetIP()->GetResults(SRCStream, Flags, UnitsNamesOrCodes, resultArray);
    CHECK_HRESULT(hr, CVisioStyle, GetResults);
    return hr;
}


VW_INLINE HRESULT CVisioStyle::SetFormulas(/*short*/ SAFEARRAY FAR * FAR *SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *formulaArray, short Flags, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyle, SetFormulas);
    if (NULL!=GetIP())
        hr= GetIP()->SetFormulas(SRCStream, formulaArray, Flags, lpRet);
    CHECK_HRESULT(hr, CVisioStyle, SetFormulas);
    return hr;
}


VW_INLINE HRESULT CVisioStyle::SetResults(/*short*/ SAFEARRAY FAR * FAR *SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *UnitsNamesOrCodes, /*VARIANT*/ SAFEARRAY FAR * FAR *resultArray, short Flags, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyle, SetResults);
    if (NULL!=GetIP())
        hr= GetIP()->SetResults(SRCStream, UnitsNamesOrCodes, resultArray, Flags, lpRet);
    CHECK_HRESULT(hr, CVisioStyle, SetResults);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioStyles

VW_INLINE HRESULT CVisioStyles::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStyles, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioStyles, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioStyles::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyles, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioStyles, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioStyles::Item(VARIANT_HELPER_CLASS FAR &NameOrIndex, CVisioStyle FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVStyle FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStyles, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(NameOrIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioStyles, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioStyles::Count(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyles, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioStyles, Count);
    return hr;
}


VW_INLINE HRESULT CVisioStyles::Document(CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStyles, Document);
    if (NULL!=GetIP())
        hr= GetIP()->get_Document(&lpObj);
    CHECK_HRESULT(hr, CVisioStyles, Document);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioStyles::Add(BSTR_HELPER_CLASS FAR &StyleName, BSTR_HELPER_CLASS FAR &BasedOn, short fIncludesText, short fIncludesLine, short fIncludesFill, CVisioStyle FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVStyle FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStyles, Add);
    if (NULL!=GetIP())
        hr= GetIP()->Add(StyleName, BasedOn, fIncludesText, fIncludesLine, fIncludesFill, &lpObj);
    CHECK_HRESULT(hr, CVisioStyles, Add);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioStyles::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyles, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioStyles, Stat);
    return hr;
}


VW_INLINE HRESULT CVisioStyles::EventList(CVisioEventList FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEventList FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStyles, EventList);
    if (NULL!=GetIP())
        hr= GetIP()->get_EventList(&lpObj);
    CHECK_HRESULT(hr, CVisioStyles, EventList);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioStyles::PersistsEvents(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyles, PersistsEvents);
    if (NULL!=GetIP())
        hr= GetIP()->get_PersistsEvents(lpRet);
    CHECK_HRESULT(hr, CVisioStyles, PersistsEvents);
    return hr;
}


VW_INLINE HRESULT CVisioStyles::ItemFromID(short ObjectID, CVisioStyle FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVStyle FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStyles, ItemFromID);
    if (NULL!=GetIP())
        hr= GetIP()->get_ItemFromID(ObjectID, &lpObj);
    CHECK_HRESULT(hr, CVisioStyles, ItemFromID);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioStyles::GetNames(/*BSTR*/ SAFEARRAY FAR * FAR *NameArray)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStyles, GetNames);
    if (NULL!=GetIP())
        hr= GetIP()->GetNames(NameArray);
    CHECK_HRESULT(hr, CVisioStyles, GetNames);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioWindow

VW_INLINE HRESULT CVisioWindow::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioWindow, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioWindow, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioWindow::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioWindow, Stat);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioWindow, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::Activate()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, Activate);
    if (NULL!=GetIP())
        hr= GetIP()->Activate();
    CHECK_HRESULT(hr, CVisioWindow, Activate);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::Type(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, Type);
    if (NULL!=GetIP())
        hr= GetIP()->get_Type(lpRet);
    CHECK_HRESULT(hr, CVisioWindow, Type);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::Document(CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioWindow, Document);
    if (NULL!=GetIP())
        hr= GetIP()->get_Document(&lpObj);
    CHECK_HRESULT(hr, CVisioWindow, Document);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioWindow::PageAsObj(CVisioPage FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVPage FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioWindow, PageAsObj);
    if (NULL!=GetIP())
        hr= GetIP()->get_PageAsObj(&lpObj);
    CHECK_HRESULT(hr, CVisioWindow, PageAsObj);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioWindow::PageFromName(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, PageFromName);
    if (NULL!=GetIP())
        hr= GetIP()->put_PageFromName(param01);
    CHECK_HRESULT(hr, CVisioWindow, PageFromName);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::getZoom(double FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, getZoom);
    if (NULL!=GetIP())
        hr= GetIP()->get_Zoom(lpRet);
    CHECK_HRESULT(hr, CVisioWindow, getZoom);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::putZoom(VW_CONST double param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, putZoom);
    if (NULL!=GetIP())
        hr= GetIP()->put_Zoom(param01);
    CHECK_HRESULT(hr, CVisioWindow, putZoom);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::Close()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, Close);
    if (NULL!=GetIP())
        hr= GetIP()->Close();
    CHECK_HRESULT(hr, CVisioWindow, Close);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::SelectAll()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, SelectAll);
    if (NULL!=GetIP())
        hr= GetIP()->SelectAll();
    CHECK_HRESULT(hr, CVisioWindow, SelectAll);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::DeselectAll()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, DeselectAll);
    if (NULL!=GetIP())
        hr= GetIP()->DeselectAll();
    CHECK_HRESULT(hr, CVisioWindow, DeselectAll);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::Selection(CVisioSelection FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVSelection FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioWindow, Selection);
    if (NULL!=GetIP())
        hr= GetIP()->get_Selection(&lpObj);
    CHECK_HRESULT(hr, CVisioWindow, Selection);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioWindow::Select(CVisioShape FAR &SheetObject, short SelectAction)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, Select);
    if (NULL!=GetIP())
        hr= GetIP()->Select(SheetObject, SelectAction);
    CHECK_HRESULT(hr, CVisioWindow, Select);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::Index(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, Index);
    if (NULL!=GetIP())
        hr= GetIP()->get_Index(lpRet);
    CHECK_HRESULT(hr, CVisioWindow, Index);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::Cut()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, Cut);
    if (NULL!=GetIP())
        hr= GetIP()->Cut();
    CHECK_HRESULT(hr, CVisioWindow, Cut);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::Copy()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, Copy);
    if (NULL!=GetIP())
        hr= GetIP()->Copy();
    CHECK_HRESULT(hr, CVisioWindow, Copy);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::Paste()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, Paste);
    if (NULL!=GetIP())
        hr= GetIP()->Paste();
    CHECK_HRESULT(hr, CVisioWindow, Paste);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::Delete()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, Delete);
    if (NULL!=GetIP())
        hr= GetIP()->Delete();
    CHECK_HRESULT(hr, CVisioWindow, Delete);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::Duplicate()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, Duplicate);
    if (NULL!=GetIP())
        hr= GetIP()->Duplicate();
    CHECK_HRESULT(hr, CVisioWindow, Duplicate);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::Group()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, Group);
    if (NULL!=GetIP())
        hr= GetIP()->Group();
    CHECK_HRESULT(hr, CVisioWindow, Group);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::Union()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, Union);
    if (NULL!=GetIP())
        hr= GetIP()->Union();
    CHECK_HRESULT(hr, CVisioWindow, Union);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::Combine()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, Combine);
    if (NULL!=GetIP())
        hr= GetIP()->Combine();
    CHECK_HRESULT(hr, CVisioWindow, Combine);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::Fragment()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, Fragment);
    if (NULL!=GetIP())
        hr= GetIP()->Fragment();
    CHECK_HRESULT(hr, CVisioWindow, Fragment);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::AddToGroup()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, AddToGroup);
    if (NULL!=GetIP())
        hr= GetIP()->AddToGroup();
    CHECK_HRESULT(hr, CVisioWindow, AddToGroup);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::RemoveFromGroup()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, RemoveFromGroup);
    if (NULL!=GetIP())
        hr= GetIP()->RemoveFromGroup();
    CHECK_HRESULT(hr, CVisioWindow, RemoveFromGroup);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::SubType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, SubType);
    if (NULL!=GetIP())
        hr= GetIP()->get_SubType(lpRet);
    CHECK_HRESULT(hr, CVisioWindow, SubType);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::Intersect()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, Intersect);
    if (NULL!=GetIP())
        hr= GetIP()->Intersect();
    CHECK_HRESULT(hr, CVisioWindow, Intersect);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::Subtract()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, Subtract);
    if (NULL!=GetIP())
        hr= GetIP()->Subtract();
    CHECK_HRESULT(hr, CVisioWindow, Subtract);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::EventList(CVisioEventList FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEventList FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioWindow, EventList);
    if (NULL!=GetIP())
        hr= GetIP()->get_EventList(&lpObj);
    CHECK_HRESULT(hr, CVisioWindow, EventList);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioWindow::PersistsEvents(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, PersistsEvents);
    if (NULL!=GetIP())
        hr= GetIP()->get_PersistsEvents(lpRet);
    CHECK_HRESULT(hr, CVisioWindow, PersistsEvents);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::WindowHandle(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, WindowHandle);
    if (NULL!=GetIP())
        hr= GetIP()->get_WindowHandle(lpRet);
    CHECK_HRESULT(hr, CVisioWindow, WindowHandle);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::WindowHandle32(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, WindowHandle32);
    if (NULL!=GetIP())
        hr= GetIP()->get_WindowHandle32(lpRet);
    CHECK_HRESULT(hr, CVisioWindow, WindowHandle32);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::Trim()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, Trim);
    if (NULL!=GetIP())
        hr= GetIP()->Trim();
    CHECK_HRESULT(hr, CVisioWindow, Trim);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::Join()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, Join);
    if (NULL!=GetIP())
        hr= GetIP()->Join();
    CHECK_HRESULT(hr, CVisioWindow, Join);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::getShowRulers(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, getShowRulers);
    if (NULL!=GetIP())
        hr= GetIP()->get_ShowRulers(lpRet);
    CHECK_HRESULT(hr, CVisioWindow, getShowRulers);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::putShowRulers(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, putShowRulers);
    if (NULL!=GetIP())
        hr= GetIP()->put_ShowRulers(param01);
    CHECK_HRESULT(hr, CVisioWindow, putShowRulers);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::getShowGrid(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, getShowGrid);
    if (NULL!=GetIP())
        hr= GetIP()->get_ShowGrid(lpRet);
    CHECK_HRESULT(hr, CVisioWindow, getShowGrid);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::putShowGrid(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, putShowGrid);
    if (NULL!=GetIP())
        hr= GetIP()->put_ShowGrid(param01);
    CHECK_HRESULT(hr, CVisioWindow, putShowGrid);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::getShowGuides(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, getShowGuides);
    if (NULL!=GetIP())
        hr= GetIP()->get_ShowGuides(lpRet);
    CHECK_HRESULT(hr, CVisioWindow, getShowGuides);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::putShowGuides(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, putShowGuides);
    if (NULL!=GetIP())
        hr= GetIP()->put_ShowGuides(param01);
    CHECK_HRESULT(hr, CVisioWindow, putShowGuides);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::getShowConnectPoints(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, getShowConnectPoints);
    if (NULL!=GetIP())
        hr= GetIP()->get_ShowConnectPoints(lpRet);
    CHECK_HRESULT(hr, CVisioWindow, getShowConnectPoints);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::putShowConnectPoints(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, putShowConnectPoints);
    if (NULL!=GetIP())
        hr= GetIP()->put_ShowConnectPoints(param01);
    CHECK_HRESULT(hr, CVisioWindow, putShowConnectPoints);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::getShowPageBreaks(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, getShowPageBreaks);
    if (NULL!=GetIP())
        hr= GetIP()->get_ShowPageBreaks(lpRet);
    CHECK_HRESULT(hr, CVisioWindow, getShowPageBreaks);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::putShowPageBreaks(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, putShowPageBreaks);
    if (NULL!=GetIP())
        hr= GetIP()->put_ShowPageBreaks(param01);
    CHECK_HRESULT(hr, CVisioWindow, putShowPageBreaks);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::getPage(VARIANT_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    VARIANT lpObj;
    VariantInit(&lpObj);

    CHECK_IP(GetIP(), CVisioWindow, getPage);
    if (NULL!=GetIP())
        hr= GetIP()->get_Page(&lpObj);
    CHECK_HRESULT(hr, CVisioWindow, getPage);

#ifdef NO_VARIANT_HELPER
    VariantCopy(&rWrap, &lpObj);
#else
    rWrap= lpObj;
#endif  //  NO_VARIANT_HELPER

    VariantClear(&lpObj);

    return hr;
}


VW_INLINE HRESULT CVisioWindow::putPage(VW_CONST VARIANT_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, putPage);
    if (NULL!=GetIP())
        hr= GetIP()->put_Page(param01);
    CHECK_HRESULT(hr, CVisioWindow, putPage);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::DockedStencils(/*BSTR*/ SAFEARRAY FAR * FAR *NameArray)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, DockedStencils);
    if (NULL!=GetIP())
        hr= GetIP()->DockedStencils(NameArray);
    CHECK_HRESULT(hr, CVisioWindow, DockedStencils);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::Master(VARIANT_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    VARIANT lpObj;
    VariantInit(&lpObj);

    CHECK_IP(GetIP(), CVisioWindow, Master);
    if (NULL!=GetIP())
        hr= GetIP()->get_Master(&lpObj);
    CHECK_HRESULT(hr, CVisioWindow, Master);

#ifdef NO_VARIANT_HELPER
    VariantCopy(&rWrap, &lpObj);
#else
    rWrap= lpObj;
#endif  //  NO_VARIANT_HELPER

    VariantClear(&lpObj);

    return hr;
}


VW_INLINE HRESULT CVisioWindow::getShowScrollBars(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, getShowScrollBars);
    if (NULL!=GetIP())
        hr= GetIP()->get_ShowScrollBars(lpRet);
    CHECK_HRESULT(hr, CVisioWindow, getShowScrollBars);
    return hr;
}


VW_INLINE HRESULT CVisioWindow::putShowScrollBars(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindow, putShowScrollBars);
    if (NULL!=GetIP())
        hr= GetIP()->put_ShowScrollBars(param01);
    CHECK_HRESULT(hr, CVisioWindow, putShowScrollBars);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioWindows

VW_INLINE HRESULT CVisioWindows::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioWindows, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioWindows, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioWindows::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindows, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioWindows, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioWindows::Item(short Index, CVisioWindow FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVWindow FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioWindows, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(Index, &lpObj);
    CHECK_HRESULT(hr, CVisioWindows, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioWindows::Count(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindows, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioWindows, Count);
    return hr;
}


VW_INLINE HRESULT CVisioWindows::Arrange()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindows, Arrange);
    if (NULL!=GetIP())
        hr= GetIP()->Arrange();
    CHECK_HRESULT(hr, CVisioWindows, Arrange);
    return hr;
}


VW_INLINE HRESULT CVisioWindows::EventList(CVisioEventList FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEventList FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioWindows, EventList);
    if (NULL!=GetIP())
        hr= GetIP()->get_EventList(&lpObj);
    CHECK_HRESULT(hr, CVisioWindows, EventList);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioWindows::PersistsEvents(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioWindows, PersistsEvents);
    if (NULL!=GetIP())
        hr= GetIP()->get_PersistsEvents(lpRet);
    CHECK_HRESULT(hr, CVisioWindows, PersistsEvents);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioLayer

VW_INLINE HRESULT CVisioLayer::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioLayer, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioLayer, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioLayer::Document(CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioLayer, Document);
    if (NULL!=GetIP())
        hr= GetIP()->get_Document(&lpObj);
    CHECK_HRESULT(hr, CVisioLayer, Document);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioLayer::Page(CVisioPage FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVPage FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioLayer, Page);
    if (NULL!=GetIP())
        hr= GetIP()->get_Page(&lpObj);
    CHECK_HRESULT(hr, CVisioLayer, Page);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioLayer::Master(CVisioMaster FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMaster FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioLayer, Master);
    if (NULL!=GetIP())
        hr= GetIP()->get_Master(&lpObj);
    CHECK_HRESULT(hr, CVisioLayer, Master);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioLayer::Index(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioLayer, Index);
    if (NULL!=GetIP())
        hr= GetIP()->get_Index(lpRet);
    CHECK_HRESULT(hr, CVisioLayer, Index);
    return hr;
}


VW_INLINE HRESULT CVisioLayer::Row(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioLayer, Row);
    if (NULL!=GetIP())
        hr= GetIP()->get_Row(lpRet);
    CHECK_HRESULT(hr, CVisioLayer, Row);
    return hr;
}


VW_INLINE HRESULT CVisioLayer::Add(CVisioShape FAR &SheetObject, short fPresMems)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioLayer, Add);
    if (NULL!=GetIP())
        hr= GetIP()->Add(SheetObject, fPresMems);
    CHECK_HRESULT(hr, CVisioLayer, Add);
    return hr;
}


VW_INLINE HRESULT CVisioLayer::Remove(CVisioShape FAR &SheetObject, short fPresMems)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioLayer, Remove);
    if (NULL!=GetIP())
        hr= GetIP()->Remove(SheetObject, fPresMems);
    CHECK_HRESULT(hr, CVisioLayer, Remove);
    return hr;
}


VW_INLINE HRESULT CVisioLayer::Delete(short fDeleteShapes)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioLayer, Delete);
    if (NULL!=GetIP())
        hr= GetIP()->Delete(fDeleteShapes);
    CHECK_HRESULT(hr, CVisioLayer, Delete);
    return hr;
}


VW_INLINE HRESULT CVisioLayer::getName(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioLayer, getName);
    if (NULL!=GetIP())
        hr= GetIP()->get_Name(&lpObj);
    CHECK_HRESULT(hr, CVisioLayer, getName);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioLayer::putName(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioLayer, putName);
    if (NULL!=GetIP())
        hr= GetIP()->put_Name(param01);
    CHECK_HRESULT(hr, CVisioLayer, putName);
    return hr;
}


VW_INLINE HRESULT CVisioLayer::CellsC(short Column, CVisioCell FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVCell FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioLayer, CellsC);
    if (NULL!=GetIP())
        hr= GetIP()->get_CellsC(Column, &lpObj);
    CHECK_HRESULT(hr, CVisioLayer, CellsC);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioLayer::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioLayer, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioLayer, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioLayer::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioLayer, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioLayer, Stat);
    return hr;
}


VW_INLINE HRESULT CVisioLayer::EventList(CVisioEventList FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEventList FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioLayer, EventList);
    if (NULL!=GetIP())
        hr= GetIP()->get_EventList(&lpObj);
    CHECK_HRESULT(hr, CVisioLayer, EventList);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioLayer::PersistsEvents(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioLayer, PersistsEvents);
    if (NULL!=GetIP())
        hr= GetIP()->get_PersistsEvents(lpRet);
    CHECK_HRESULT(hr, CVisioLayer, PersistsEvents);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioLayers

VW_INLINE HRESULT CVisioLayers::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioLayers, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioLayers, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioLayers::Document(CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioLayers, Document);
    if (NULL!=GetIP())
        hr= GetIP()->get_Document(&lpObj);
    CHECK_HRESULT(hr, CVisioLayers, Document);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioLayers::Page(CVisioPage FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVPage FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioLayers, Page);
    if (NULL!=GetIP())
        hr= GetIP()->get_Page(&lpObj);
    CHECK_HRESULT(hr, CVisioLayers, Page);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioLayers::Master(CVisioMaster FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMaster FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioLayers, Master);
    if (NULL!=GetIP())
        hr= GetIP()->get_Master(&lpObj);
    CHECK_HRESULT(hr, CVisioLayers, Master);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioLayers::Count(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioLayers, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioLayers, Count);
    return hr;
}


VW_INLINE HRESULT CVisioLayers::Item(VARIANT_HELPER_CLASS FAR &NameOrIndex, CVisioLayer FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVLayer FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioLayers, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(NameOrIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioLayers, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioLayers::Add(BSTR_HELPER_CLASS FAR &LayerName, CVisioLayer FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVLayer FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioLayers, Add);
    if (NULL!=GetIP())
        hr= GetIP()->Add(LayerName, &lpObj);
    CHECK_HRESULT(hr, CVisioLayers, Add);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioLayers::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioLayers, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioLayers, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioLayers::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioLayers, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioLayers, Stat);
    return hr;
}


VW_INLINE HRESULT CVisioLayers::EventList(CVisioEventList FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEventList FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioLayers, EventList);
    if (NULL!=GetIP())
        hr= GetIP()->get_EventList(&lpObj);
    CHECK_HRESULT(hr, CVisioLayers, EventList);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioLayers::PersistsEvents(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioLayers, PersistsEvents);
    if (NULL!=GetIP())
        hr= GetIP()->get_PersistsEvents(lpRet);
    CHECK_HRESULT(hr, CVisioLayers, PersistsEvents);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioFont

VW_INLINE HRESULT CVisioFont::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioFont, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioFont, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioFont::Document(CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioFont, Document);
    if (NULL!=GetIP())
        hr= GetIP()->get_Document(&lpObj);
    CHECK_HRESULT(hr, CVisioFont, Document);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioFont::Index(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioFont, Index);
    if (NULL!=GetIP())
        hr= GetIP()->get_Index(lpRet);
    CHECK_HRESULT(hr, CVisioFont, Index);
    return hr;
}


VW_INLINE HRESULT CVisioFont::Name(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioFont, Name);
    if (NULL!=GetIP())
        hr= GetIP()->get_Name(&lpObj);
    CHECK_HRESULT(hr, CVisioFont, Name);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioFont::ID(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioFont, ID);
    if (NULL!=GetIP())
        hr= GetIP()->get_ID(lpRet);
    CHECK_HRESULT(hr, CVisioFont, ID);
    return hr;
}


VW_INLINE HRESULT CVisioFont::Attributes(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioFont, Attributes);
    if (NULL!=GetIP())
        hr= GetIP()->get_Attributes(lpRet);
    CHECK_HRESULT(hr, CVisioFont, Attributes);
    return hr;
}


VW_INLINE HRESULT CVisioFont::CharSet(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioFont, CharSet);
    if (NULL!=GetIP())
        hr= GetIP()->get_CharSet(lpRet);
    CHECK_HRESULT(hr, CVisioFont, CharSet);
    return hr;
}


VW_INLINE HRESULT CVisioFont::PitchAndFamily(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioFont, PitchAndFamily);
    if (NULL!=GetIP())
        hr= GetIP()->get_PitchAndFamily(lpRet);
    CHECK_HRESULT(hr, CVisioFont, PitchAndFamily);
    return hr;
}


VW_INLINE HRESULT CVisioFont::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioFont, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioFont, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioFont::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioFont, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioFont, Stat);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioFonts

VW_INLINE HRESULT CVisioFonts::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioFonts, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioFonts, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioFonts::Document(CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioFonts, Document);
    if (NULL!=GetIP())
        hr= GetIP()->get_Document(&lpObj);
    CHECK_HRESULT(hr, CVisioFonts, Document);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioFonts::Count(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioFonts, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioFonts, Count);
    return hr;
}


VW_INLINE HRESULT CVisioFonts::Item(VARIANT_HELPER_CLASS FAR &NameOrIndex, CVisioFont FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVFont FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioFonts, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(NameOrIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioFonts, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioFonts::ItemFromID(long ObjectID, CVisioFont FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVFont FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioFonts, ItemFromID);
    if (NULL!=GetIP())
        hr= GetIP()->get_ItemFromID(ObjectID, &lpObj);
    CHECK_HRESULT(hr, CVisioFonts, ItemFromID);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioFonts::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioFonts, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioFonts, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioFonts::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioFonts, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioFonts, Stat);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioColor

VW_INLINE HRESULT CVisioColor::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioColor, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioColor, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioColor::Document(CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioColor, Document);
    if (NULL!=GetIP())
        hr= GetIP()->get_Document(&lpObj);
    CHECK_HRESULT(hr, CVisioColor, Document);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioColor::Index(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioColor, Index);
    if (NULL!=GetIP())
        hr= GetIP()->get_Index(lpRet);
    CHECK_HRESULT(hr, CVisioColor, Index);
    return hr;
}


VW_INLINE HRESULT CVisioColor::getRed(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioColor, getRed);
    if (NULL!=GetIP())
        hr= GetIP()->get_Red(lpRet);
    CHECK_HRESULT(hr, CVisioColor, getRed);
    return hr;
}


VW_INLINE HRESULT CVisioColor::putRed(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioColor, putRed);
    if (NULL!=GetIP())
        hr= GetIP()->put_Red(param01);
    CHECK_HRESULT(hr, CVisioColor, putRed);
    return hr;
}


VW_INLINE HRESULT CVisioColor::getGreen(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioColor, getGreen);
    if (NULL!=GetIP())
        hr= GetIP()->get_Green(lpRet);
    CHECK_HRESULT(hr, CVisioColor, getGreen);
    return hr;
}


VW_INLINE HRESULT CVisioColor::putGreen(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioColor, putGreen);
    if (NULL!=GetIP())
        hr= GetIP()->put_Green(param01);
    CHECK_HRESULT(hr, CVisioColor, putGreen);
    return hr;
}


VW_INLINE HRESULT CVisioColor::getBlue(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioColor, getBlue);
    if (NULL!=GetIP())
        hr= GetIP()->get_Blue(lpRet);
    CHECK_HRESULT(hr, CVisioColor, getBlue);
    return hr;
}


VW_INLINE HRESULT CVisioColor::putBlue(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioColor, putBlue);
    if (NULL!=GetIP())
        hr= GetIP()->put_Blue(param01);
    CHECK_HRESULT(hr, CVisioColor, putBlue);
    return hr;
}


VW_INLINE HRESULT CVisioColor::getFlags(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioColor, getFlags);
    if (NULL!=GetIP())
        hr= GetIP()->get_Flags(lpRet);
    CHECK_HRESULT(hr, CVisioColor, getFlags);
    return hr;
}


VW_INLINE HRESULT CVisioColor::putFlags(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioColor, putFlags);
    if (NULL!=GetIP())
        hr= GetIP()->put_Flags(param01);
    CHECK_HRESULT(hr, CVisioColor, putFlags);
    return hr;
}


VW_INLINE HRESULT CVisioColor::getPaletteEntry(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioColor, getPaletteEntry);
    if (NULL!=GetIP())
        hr= GetIP()->get_PaletteEntry(lpRet);
    CHECK_HRESULT(hr, CVisioColor, getPaletteEntry);
    return hr;
}


VW_INLINE HRESULT CVisioColor::putPaletteEntry(VW_CONST long param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioColor, putPaletteEntry);
    if (NULL!=GetIP())
        hr= GetIP()->put_PaletteEntry(param01);
    CHECK_HRESULT(hr, CVisioColor, putPaletteEntry);
    return hr;
}


VW_INLINE HRESULT CVisioColor::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioColor, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioColor, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioColor::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioColor, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioColor, Stat);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioColors

VW_INLINE HRESULT CVisioColors::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioColors, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioColors, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioColors::Document(CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioColors, Document);
    if (NULL!=GetIP())
        hr= GetIP()->get_Document(&lpObj);
    CHECK_HRESULT(hr, CVisioColors, Document);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioColors::Count(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioColors, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioColors, Count);
    return hr;
}


VW_INLINE HRESULT CVisioColors::Item(short Index, CVisioColor FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVColor FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioColors, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(Index, &lpObj);
    CHECK_HRESULT(hr, CVisioColors, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioColors::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioColors, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioColors, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioColors::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioColors, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioColors, Stat);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioAddon

VW_INLINE HRESULT CVisioAddon::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioAddon, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioAddon, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioAddon::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAddon, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioAddon, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioAddon::Name(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioAddon, Name);
    if (NULL!=GetIP())
        hr= GetIP()->get_Name(&lpObj);
    CHECK_HRESULT(hr, CVisioAddon, Name);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioAddon::Index(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAddon, Index);
    if (NULL!=GetIP())
        hr= GetIP()->get_Index(lpRet);
    CHECK_HRESULT(hr, CVisioAddon, Index);
    return hr;
}


VW_INLINE HRESULT CVisioAddon::Enabled(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAddon, Enabled);
    if (NULL!=GetIP())
        hr= GetIP()->get_Enabled(lpRet);
    CHECK_HRESULT(hr, CVisioAddon, Enabled);
    return hr;
}


VW_INLINE HRESULT CVisioAddon::Run(BSTR_HELPER_CLASS FAR &ArgString)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAddon, Run);
    if (NULL!=GetIP())
        hr= GetIP()->Run(ArgString);
    CHECK_HRESULT(hr, CVisioAddon, Run);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioAddons

VW_INLINE HRESULT CVisioAddons::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioAddons, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioAddons, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioAddons::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAddons, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioAddons, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioAddons::Item(VARIANT_HELPER_CLASS FAR &NameOrIndex, CVisioAddon FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVAddon FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioAddons, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(NameOrIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioAddons, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioAddons::Count(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAddons, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioAddons, Count);
    return hr;
}


VW_INLINE HRESULT CVisioAddons::Add(BSTR_HELPER_CLASS FAR &FileName, CVisioAddon FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVAddon FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioAddons, Add);
    if (NULL!=GetIP())
        hr= GetIP()->Add(FileName, &lpObj);
    CHECK_HRESULT(hr, CVisioAddons, Add);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioAddons::GetNames(/*BSTR*/ SAFEARRAY FAR * FAR *NameArray)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAddons, GetNames);
    if (NULL!=GetIP())
        hr= GetIP()->GetNames(NameArray);
    CHECK_HRESULT(hr, CVisioAddons, GetNames);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioEvent

VW_INLINE HRESULT CVisioEvent::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioEvent, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioEvent, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioEvent::EventList(CVisioEventList FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEventList FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioEvent, EventList);
    if (NULL!=GetIP())
        hr= GetIP()->get_EventList(&lpObj);
    CHECK_HRESULT(hr, CVisioEvent, EventList);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioEvent::Index(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioEvent, Index);
    if (NULL!=GetIP())
        hr= GetIP()->get_Index(lpRet);
    CHECK_HRESULT(hr, CVisioEvent, Index);
    return hr;
}


VW_INLINE HRESULT CVisioEvent::getEvent(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioEvent, getEvent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Event(lpRet);
    CHECK_HRESULT(hr, CVisioEvent, getEvent);
    return hr;
}


VW_INLINE HRESULT CVisioEvent::putEvent(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioEvent, putEvent);
    if (NULL!=GetIP())
        hr= GetIP()->put_Event(param01);
    CHECK_HRESULT(hr, CVisioEvent, putEvent);
    return hr;
}


VW_INLINE HRESULT CVisioEvent::getAction(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioEvent, getAction);
    if (NULL!=GetIP())
        hr= GetIP()->get_Action(lpRet);
    CHECK_HRESULT(hr, CVisioEvent, getAction);
    return hr;
}


VW_INLINE HRESULT CVisioEvent::putAction(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioEvent, putAction);
    if (NULL!=GetIP())
        hr= GetIP()->put_Action(param01);
    CHECK_HRESULT(hr, CVisioEvent, putAction);
    return hr;
}


VW_INLINE HRESULT CVisioEvent::getTarget(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioEvent, getTarget);
    if (NULL!=GetIP())
        hr= GetIP()->get_Target(&lpObj);
    CHECK_HRESULT(hr, CVisioEvent, getTarget);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioEvent::putTarget(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioEvent, putTarget);
    if (NULL!=GetIP())
        hr= GetIP()->put_Target(param01);
    CHECK_HRESULT(hr, CVisioEvent, putTarget);
    return hr;
}


VW_INLINE HRESULT CVisioEvent::getTargetArgs(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioEvent, getTargetArgs);
    if (NULL!=GetIP())
        hr= GetIP()->get_TargetArgs(&lpObj);
    CHECK_HRESULT(hr, CVisioEvent, getTargetArgs);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioEvent::putTargetArgs(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioEvent, putTargetArgs);
    if (NULL!=GetIP())
        hr= GetIP()->put_TargetArgs(param01);
    CHECK_HRESULT(hr, CVisioEvent, putTargetArgs);
    return hr;
}


VW_INLINE HRESULT CVisioEvent::Trigger(BSTR_HELPER_CLASS FAR &ContextString)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioEvent, Trigger);
    if (NULL!=GetIP())
        hr= GetIP()->Trigger(ContextString);
    CHECK_HRESULT(hr, CVisioEvent, Trigger);
    return hr;
}


VW_INLINE HRESULT CVisioEvent::Delete()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioEvent, Delete);
    if (NULL!=GetIP())
        hr= GetIP()->Delete();
    CHECK_HRESULT(hr, CVisioEvent, Delete);
    return hr;
}


VW_INLINE HRESULT CVisioEvent::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioEvent, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioEvent, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioEvent::ID(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioEvent, ID);
    if (NULL!=GetIP())
        hr= GetIP()->get_ID(lpRet);
    CHECK_HRESULT(hr, CVisioEvent, ID);
    return hr;
}


VW_INLINE HRESULT CVisioEvent::getEnabled(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioEvent, getEnabled);
    if (NULL!=GetIP())
        hr= GetIP()->get_Enabled(lpRet);
    CHECK_HRESULT(hr, CVisioEvent, getEnabled);
    return hr;
}


VW_INLINE HRESULT CVisioEvent::putEnabled(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioEvent, putEnabled);
    if (NULL!=GetIP())
        hr= GetIP()->put_Enabled(param01);
    CHECK_HRESULT(hr, CVisioEvent, putEnabled);
    return hr;
}


VW_INLINE HRESULT CVisioEvent::Persistable(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioEvent, Persistable);
    if (NULL!=GetIP())
        hr= GetIP()->get_Persistable(lpRet);
    CHECK_HRESULT(hr, CVisioEvent, Persistable);
    return hr;
}


VW_INLINE HRESULT CVisioEvent::getPersistent(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioEvent, getPersistent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Persistent(lpRet);
    CHECK_HRESULT(hr, CVisioEvent, getPersistent);
    return hr;
}


VW_INLINE HRESULT CVisioEvent::putPersistent(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioEvent, putPersistent);
    if (NULL!=GetIP())
        hr= GetIP()->put_Persistent(param01);
    CHECK_HRESULT(hr, CVisioEvent, putPersistent);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioEventList

VW_INLINE HRESULT CVisioEventList::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioEventList, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioEventList, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioEventList::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioEventList, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioEventList, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioEventList::Item(short Index, CVisioEvent FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEvent FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioEventList, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(Index, &lpObj);
    CHECK_HRESULT(hr, CVisioEventList, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioEventList::Count(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioEventList, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioEventList, Count);
    return hr;
}


VW_INLINE HRESULT CVisioEventList::Add(short EventCode, short Action, BSTR_HELPER_CLASS FAR &Target, BSTR_HELPER_CLASS FAR &TargetArgs, CVisioEvent FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEvent FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioEventList, Add);
    if (NULL!=GetIP())
        hr= GetIP()->Add(EventCode, Action, Target, TargetArgs, &lpObj);
    CHECK_HRESULT(hr, CVisioEventList, Add);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioEventList::AddAdvise(short EventCode, VARIANT_HELPER_CLASS FAR &SinkIUnkOrIDisp, BSTR_HELPER_CLASS FAR &IIDSink, BSTR_HELPER_CLASS FAR &TargetArgs, CVisioEvent FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEvent FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioEventList, AddAdvise);
    if (NULL!=GetIP())
        hr= GetIP()->AddAdvise(EventCode, SinkIUnkOrIDisp, IIDSink, TargetArgs, &lpObj);
    CHECK_HRESULT(hr, CVisioEventList, AddAdvise);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioEventList::ItemFromID(long ObjectID, CVisioEvent FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEvent FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioEventList, ItemFromID);
    if (NULL!=GetIP())
        hr= GetIP()->get_ItemFromID(ObjectID, &lpObj);
    CHECK_HRESULT(hr, CVisioEventList, ItemFromID);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioGlobal

VW_INLINE HRESULT CVisioGlobal::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioGlobal, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioGlobal, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioGlobal::ActiveDocument(CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioGlobal, ActiveDocument);
    if (NULL!=GetIP())
        hr= GetIP()->get_ActiveDocument(&lpObj);
    CHECK_HRESULT(hr, CVisioGlobal, ActiveDocument);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioGlobal::ActivePage(CVisioPage FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVPage FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioGlobal, ActivePage);
    if (NULL!=GetIP())
        hr= GetIP()->get_ActivePage(&lpObj);
    CHECK_HRESULT(hr, CVisioGlobal, ActivePage);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioGlobal::ActiveWindow(CVisioWindow FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVWindow FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioGlobal, ActiveWindow);
    if (NULL!=GetIP())
        hr= GetIP()->get_ActiveWindow(&lpObj);
    CHECK_HRESULT(hr, CVisioGlobal, ActiveWindow);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioGlobal::Documents(CVisioDocuments FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocuments FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioGlobal, Documents);
    if (NULL!=GetIP())
        hr= GetIP()->get_Documents(&lpObj);
    CHECK_HRESULT(hr, CVisioGlobal, Documents);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioGlobal::Windows(CVisioWindows FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVWindows FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioGlobal, Windows);
    if (NULL!=GetIP())
        hr= GetIP()->get_Windows(&lpObj);
    CHECK_HRESULT(hr, CVisioGlobal, Windows);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioGlobal::Addons(CVisioAddons FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVAddons FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioGlobal, Addons);
    if (NULL!=GetIP())
        hr= GetIP()->get_Addons(&lpObj);
    CHECK_HRESULT(hr, CVisioGlobal, Addons);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioGlobal::Vbe(IDispatch FAR *FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioGlobal, Vbe);
    if (NULL!=GetIP())
        hr= GetIP()->get_Vbe(lpRet);
    CHECK_HRESULT(hr, CVisioGlobal, Vbe);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioEDocument


//  ***************************************************************************
//  Implementation of class CVisioEApplication


//  ***************************************************************************
//  Implementation of class CVisioEWindows


//  ***************************************************************************
//  Implementation of class CVisioEWindow


//  ***************************************************************************
//  Implementation of class CVisioEDocuments


//  ***************************************************************************
//  Implementation of class CVisioEStyles


//  ***************************************************************************
//  Implementation of class CVisioEStyle


//  ***************************************************************************
//  Implementation of class CVisioEMasters


//  ***************************************************************************
//  Implementation of class CVisioEMaster


//  ***************************************************************************
//  Implementation of class CVisioEPages


//  ***************************************************************************
//  Implementation of class CVisioEPage


//  ***************************************************************************
//  Implementation of class CVisioEShape


//  ***************************************************************************
//  Implementation of class CVisioECharacters


//  ***************************************************************************
//  Implementation of class CVisioECell


//  ***************************************************************************
//  Implementation of class CVisioMenuItem

VW_INLINE HRESULT CVisioMenuItem::Delete()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenuItem, Delete);
    if (NULL!=GetIP())
        hr= GetIP()->Delete();
    CHECK_HRESULT(hr, CVisioMenuItem, Delete);
    return hr;
}


VW_INLINE HRESULT CVisioMenuItem::Default(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenuItem, Default);
    if (NULL!=GetIP())
        hr= GetIP()->get_Default(&lpObj);
    CHECK_HRESULT(hr, CVisioMenuItem, Default);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioMenuItem::Index(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenuItem, Index);
    if (NULL!=GetIP())
        hr= GetIP()->get_Index(lpRet);
    CHECK_HRESULT(hr, CVisioMenuItem, Index);
    return hr;
}


VW_INLINE HRESULT CVisioMenuItem::MenuItems(CVisioMenuItems FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMenuItems FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenuItem, MenuItems);
    if (NULL!=GetIP())
        hr= GetIP()->get_MenuItems(&lpObj);
    CHECK_HRESULT(hr, CVisioMenuItem, MenuItems);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMenuItem::Parent(CVisioMenuItems FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMenuItems FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenuItem, Parent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Parent(&lpObj);
    CHECK_HRESULT(hr, CVisioMenuItem, Parent);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMenuItem::putCmdNum(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenuItem, putCmdNum);
    if (NULL!=GetIP())
        hr= GetIP()->put_CmdNum(param01);
    CHECK_HRESULT(hr, CVisioMenuItem, putCmdNum);
    return hr;
}


VW_INLINE HRESULT CVisioMenuItem::getCmdNum(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenuItem, getCmdNum);
    if (NULL!=GetIP())
        hr= GetIP()->get_CmdNum(lpRet);
    CHECK_HRESULT(hr, CVisioMenuItem, getCmdNum);
    return hr;
}


VW_INLINE HRESULT CVisioMenuItem::putHelpContextID(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenuItem, putHelpContextID);
    if (NULL!=GetIP())
        hr= GetIP()->put_HelpContextID(param01);
    CHECK_HRESULT(hr, CVisioMenuItem, putHelpContextID);
    return hr;
}


VW_INLINE HRESULT CVisioMenuItem::getHelpContextID(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenuItem, getHelpContextID);
    if (NULL!=GetIP())
        hr= GetIP()->get_HelpContextID(lpRet);
    CHECK_HRESULT(hr, CVisioMenuItem, getHelpContextID);
    return hr;
}


VW_INLINE HRESULT CVisioMenuItem::IsSeparator(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenuItem, IsSeparator);
    if (NULL!=GetIP())
        hr= GetIP()->get_IsSeparator(lpRet);
    CHECK_HRESULT(hr, CVisioMenuItem, IsSeparator);
    return hr;
}


VW_INLINE HRESULT CVisioMenuItem::IsHierarchical(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenuItem, IsHierarchical);
    if (NULL!=GetIP())
        hr= GetIP()->get_IsHierarchical(lpRet);
    CHECK_HRESULT(hr, CVisioMenuItem, IsHierarchical);
    return hr;
}


VW_INLINE HRESULT CVisioMenuItem::putCaption(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenuItem, putCaption);
    if (NULL!=GetIP())
        hr= GetIP()->put_Caption(param01);
    CHECK_HRESULT(hr, CVisioMenuItem, putCaption);
    return hr;
}


VW_INLINE HRESULT CVisioMenuItem::getCaption(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenuItem, getCaption);
    if (NULL!=GetIP())
        hr= GetIP()->get_Caption(&lpObj);
    CHECK_HRESULT(hr, CVisioMenuItem, getCaption);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioMenuItem::putActionText(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenuItem, putActionText);
    if (NULL!=GetIP())
        hr= GetIP()->put_ActionText(param01);
    CHECK_HRESULT(hr, CVisioMenuItem, putActionText);
    return hr;
}


VW_INLINE HRESULT CVisioMenuItem::getActionText(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenuItem, getActionText);
    if (NULL!=GetIP())
        hr= GetIP()->get_ActionText(&lpObj);
    CHECK_HRESULT(hr, CVisioMenuItem, getActionText);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioMenuItem::putMiniHelp(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenuItem, putMiniHelp);
    if (NULL!=GetIP())
        hr= GetIP()->put_MiniHelp(param01);
    CHECK_HRESULT(hr, CVisioMenuItem, putMiniHelp);
    return hr;
}


VW_INLINE HRESULT CVisioMenuItem::getMiniHelp(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenuItem, getMiniHelp);
    if (NULL!=GetIP())
        hr= GetIP()->get_MiniHelp(&lpObj);
    CHECK_HRESULT(hr, CVisioMenuItem, getMiniHelp);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioMenuItem::putAddOnName(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenuItem, putAddOnName);
    if (NULL!=GetIP())
        hr= GetIP()->put_AddOnName(param01);
    CHECK_HRESULT(hr, CVisioMenuItem, putAddOnName);
    return hr;
}


VW_INLINE HRESULT CVisioMenuItem::getAddOnName(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenuItem, getAddOnName);
    if (NULL!=GetIP())
        hr= GetIP()->get_AddOnName(&lpObj);
    CHECK_HRESULT(hr, CVisioMenuItem, getAddOnName);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioMenuItem::putAddOnArgs(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenuItem, putAddOnArgs);
    if (NULL!=GetIP())
        hr= GetIP()->put_AddOnArgs(param01);
    CHECK_HRESULT(hr, CVisioMenuItem, putAddOnArgs);
    return hr;
}


VW_INLINE HRESULT CVisioMenuItem::getAddOnArgs(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenuItem, getAddOnArgs);
    if (NULL!=GetIP())
        hr= GetIP()->get_AddOnArgs(&lpObj);
    CHECK_HRESULT(hr, CVisioMenuItem, getAddOnArgs);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioMenuItem::putHelpFile(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenuItem, putHelpFile);
    if (NULL!=GetIP())
        hr= GetIP()->put_HelpFile(param01);
    CHECK_HRESULT(hr, CVisioMenuItem, putHelpFile);
    return hr;
}


VW_INLINE HRESULT CVisioMenuItem::getHelpFile(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenuItem, getHelpFile);
    if (NULL!=GetIP())
        hr= GetIP()->get_HelpFile(&lpObj);
    CHECK_HRESULT(hr, CVisioMenuItem, getHelpFile);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioIEnumVMenuItem


//  ***************************************************************************
//  Implementation of class CVisioMenuItems

VW_INLINE HRESULT CVisioMenuItems::_NewEnum(IUnknown FAR *FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenuItems, _NewEnum);
    if (NULL!=GetIP())
        hr= GetIP()->get__NewEnum(lpRet);
    CHECK_HRESULT(hr, CVisioMenuItems, _NewEnum);
    return hr;
}


VW_INLINE HRESULT CVisioMenuItems::Item(long lIndex, CVisioMenuItem FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMenuItem FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenuItems, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(lIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioMenuItems, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMenuItems::Add(CVisioMenuItem FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMenuItem FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenuItems, Add);
    if (NULL!=GetIP())
        hr= GetIP()->Add(&lpObj);
    CHECK_HRESULT(hr, CVisioMenuItems, Add);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMenuItems::AddAt(long lIndex, CVisioMenuItem FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMenuItem FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenuItems, AddAt);
    if (NULL!=GetIP())
        hr= GetIP()->AddAt(lIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioMenuItems, AddAt);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMenuItems::Count(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenuItems, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioMenuItems, Count);
    return hr;
}


VW_INLINE HRESULT CVisioMenuItems::Parent(CVisioMenu FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMenu FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenuItems, Parent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Parent(&lpObj);
    CHECK_HRESULT(hr, CVisioMenuItems, Parent);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioMenu

VW_INLINE HRESULT CVisioMenu::Delete()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenu, Delete);
    if (NULL!=GetIP())
        hr= GetIP()->Delete();
    CHECK_HRESULT(hr, CVisioMenu, Delete);
    return hr;
}


VW_INLINE HRESULT CVisioMenu::Default(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenu, Default);
    if (NULL!=GetIP())
        hr= GetIP()->get_Default(&lpObj);
    CHECK_HRESULT(hr, CVisioMenu, Default);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioMenu::putCaption(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenu, putCaption);
    if (NULL!=GetIP())
        hr= GetIP()->put_Caption(param01);
    CHECK_HRESULT(hr, CVisioMenu, putCaption);
    return hr;
}


VW_INLINE HRESULT CVisioMenu::getCaption(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenu, getCaption);
    if (NULL!=GetIP())
        hr= GetIP()->get_Caption(&lpObj);
    CHECK_HRESULT(hr, CVisioMenu, getCaption);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioMenu::Index(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenu, Index);
    if (NULL!=GetIP())
        hr= GetIP()->get_Index(lpRet);
    CHECK_HRESULT(hr, CVisioMenu, Index);
    return hr;
}


VW_INLINE HRESULT CVisioMenu::putMDIWindowMenu(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenu, putMDIWindowMenu);
    if (NULL!=GetIP())
        hr= GetIP()->put_MDIWindowMenu(param01);
    CHECK_HRESULT(hr, CVisioMenu, putMDIWindowMenu);
    return hr;
}


VW_INLINE HRESULT CVisioMenu::getMDIWindowMenu(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenu, getMDIWindowMenu);
    if (NULL!=GetIP())
        hr= GetIP()->get_MDIWindowMenu(lpRet);
    CHECK_HRESULT(hr, CVisioMenu, getMDIWindowMenu);
    return hr;
}


VW_INLINE HRESULT CVisioMenu::MenuItems(CVisioMenuItems FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMenuItems FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenu, MenuItems);
    if (NULL!=GetIP())
        hr= GetIP()->get_MenuItems(&lpObj);
    CHECK_HRESULT(hr, CVisioMenu, MenuItems);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMenu::Parent(CVisioMenus FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMenus FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenu, Parent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Parent(&lpObj);
    CHECK_HRESULT(hr, CVisioMenu, Parent);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioIEnumVMenu


//  ***************************************************************************
//  Implementation of class CVisioMenus

VW_INLINE HRESULT CVisioMenus::_NewEnum(IUnknown FAR *FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenus, _NewEnum);
    if (NULL!=GetIP())
        hr= GetIP()->get__NewEnum(lpRet);
    CHECK_HRESULT(hr, CVisioMenus, _NewEnum);
    return hr;
}


VW_INLINE HRESULT CVisioMenus::Item(long lIndex, CVisioMenu FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMenu FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenus, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(lIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioMenus, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMenus::Add(CVisioMenu FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMenu FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenus, Add);
    if (NULL!=GetIP())
        hr= GetIP()->Add(&lpObj);
    CHECK_HRESULT(hr, CVisioMenus, Add);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMenus::AddAt(long lIndex, CVisioMenu FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMenu FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenus, AddAt);
    if (NULL!=GetIP())
        hr= GetIP()->AddAt(lIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioMenus, AddAt);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMenus::Count(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenus, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioMenus, Count);
    return hr;
}


VW_INLINE HRESULT CVisioMenus::Parent(CVisioMenuSet FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMenuSet FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenus, Parent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Parent(&lpObj);
    CHECK_HRESULT(hr, CVisioMenus, Parent);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioMenuSet

VW_INLINE HRESULT CVisioMenuSet::Delete()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenuSet, Delete);
    if (NULL!=GetIP())
        hr= GetIP()->Delete();
    CHECK_HRESULT(hr, CVisioMenuSet, Delete);
    return hr;
}


VW_INLINE HRESULT CVisioMenuSet::Default(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenuSet, Default);
    if (NULL!=GetIP())
        hr= GetIP()->get_Default(&lpObj);
    CHECK_HRESULT(hr, CVisioMenuSet, Default);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioMenuSet::putCaption(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenuSet, putCaption);
    if (NULL!=GetIP())
        hr= GetIP()->put_Caption(param01);
    CHECK_HRESULT(hr, CVisioMenuSet, putCaption);
    return hr;
}


VW_INLINE HRESULT CVisioMenuSet::getCaption(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenuSet, getCaption);
    if (NULL!=GetIP())
        hr= GetIP()->get_Caption(&lpObj);
    CHECK_HRESULT(hr, CVisioMenuSet, getCaption);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioMenuSet::SetID(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenuSet, SetID);
    if (NULL!=GetIP())
        hr= GetIP()->get_SetID(lpRet);
    CHECK_HRESULT(hr, CVisioMenuSet, SetID);
    return hr;
}


VW_INLINE HRESULT CVisioMenuSet::Menus(CVisioMenus FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMenus FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenuSet, Menus);
    if (NULL!=GetIP())
        hr= GetIP()->get_Menus(&lpObj);
    CHECK_HRESULT(hr, CVisioMenuSet, Menus);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMenuSet::Parent(CVisioMenuSets FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMenuSets FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenuSet, Parent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Parent(&lpObj);
    CHECK_HRESULT(hr, CVisioMenuSet, Parent);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioIEnumVMenuSet


//  ***************************************************************************
//  Implementation of class CVisioMenuSets

VW_INLINE HRESULT CVisioMenuSets::_NewEnum(IUnknown FAR *FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenuSets, _NewEnum);
    if (NULL!=GetIP())
        hr= GetIP()->get__NewEnum(lpRet);
    CHECK_HRESULT(hr, CVisioMenuSets, _NewEnum);
    return hr;
}


VW_INLINE HRESULT CVisioMenuSets::Item(long lIndex, CVisioMenuSet FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMenuSet FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenuSets, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(lIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioMenuSets, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMenuSets::ItemAtID(long lID, CVisioMenuSet FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMenuSet FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenuSets, ItemAtID);
    if (NULL!=GetIP())
        hr= GetIP()->get_ItemAtID(lID, &lpObj);
    CHECK_HRESULT(hr, CVisioMenuSets, ItemAtID);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMenuSets::Add(CVisioMenuSet FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMenuSet FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenuSets, Add);
    if (NULL!=GetIP())
        hr= GetIP()->Add(&lpObj);
    CHECK_HRESULT(hr, CVisioMenuSets, Add);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMenuSets::AddAtID(long lID, CVisioMenuSet FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMenuSet FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenuSets, AddAtID);
    if (NULL!=GetIP())
        hr= GetIP()->AddAtID(lID, &lpObj);
    CHECK_HRESULT(hr, CVisioMenuSets, AddAtID);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioMenuSets::Count(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioMenuSets, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioMenuSets, Count);
    return hr;
}


VW_INLINE HRESULT CVisioMenuSets::Parent(CVisioUIObject FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVUIObject FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioMenuSets, Parent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Parent(&lpObj);
    CHECK_HRESULT(hr, CVisioMenuSets, Parent);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioToolbarItem

VW_INLINE HRESULT CVisioToolbarItem::Delete()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItem, Delete);
    if (NULL!=GetIP())
        hr= GetIP()->Delete();
    CHECK_HRESULT(hr, CVisioToolbarItem, Delete);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::IconFileName(BSTR_HELPER_CLASS FAR &IconFileName)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItem, IconFileName);
    if (NULL!=GetIP())
        hr= GetIP()->IconFileName(IconFileName);
    CHECK_HRESULT(hr, CVisioToolbarItem, IconFileName);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::Default(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbarItem, Default);
    if (NULL!=GetIP())
        hr= GetIP()->get_Default(&lpObj);
    CHECK_HRESULT(hr, CVisioToolbarItem, Default);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::Index(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItem, Index);
    if (NULL!=GetIP())
        hr= GetIP()->get_Index(lpRet);
    CHECK_HRESULT(hr, CVisioToolbarItem, Index);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::Parent(CVisioToolbarItems FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVToolbarItems FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbarItem, Parent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Parent(&lpObj);
    CHECK_HRESULT(hr, CVisioToolbarItem, Parent);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::putCmdNum(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItem, putCmdNum);
    if (NULL!=GetIP())
        hr= GetIP()->put_CmdNum(param01);
    CHECK_HRESULT(hr, CVisioToolbarItem, putCmdNum);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::getCmdNum(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItem, getCmdNum);
    if (NULL!=GetIP())
        hr= GetIP()->get_CmdNum(lpRet);
    CHECK_HRESULT(hr, CVisioToolbarItem, getCmdNum);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::putHelpContextID(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItem, putHelpContextID);
    if (NULL!=GetIP())
        hr= GetIP()->put_HelpContextID(param01);
    CHECK_HRESULT(hr, CVisioToolbarItem, putHelpContextID);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::getHelpContextID(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItem, getHelpContextID);
    if (NULL!=GetIP())
        hr= GetIP()->get_HelpContextID(lpRet);
    CHECK_HRESULT(hr, CVisioToolbarItem, getHelpContextID);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::putActionText(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItem, putActionText);
    if (NULL!=GetIP())
        hr= GetIP()->put_ActionText(param01);
    CHECK_HRESULT(hr, CVisioToolbarItem, putActionText);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::getActionText(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbarItem, getActionText);
    if (NULL!=GetIP())
        hr= GetIP()->get_ActionText(&lpObj);
    CHECK_HRESULT(hr, CVisioToolbarItem, getActionText);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::putAddOnName(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItem, putAddOnName);
    if (NULL!=GetIP())
        hr= GetIP()->put_AddOnName(param01);
    CHECK_HRESULT(hr, CVisioToolbarItem, putAddOnName);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::getAddOnName(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbarItem, getAddOnName);
    if (NULL!=GetIP())
        hr= GetIP()->get_AddOnName(&lpObj);
    CHECK_HRESULT(hr, CVisioToolbarItem, getAddOnName);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::putAddOnArgs(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItem, putAddOnArgs);
    if (NULL!=GetIP())
        hr= GetIP()->put_AddOnArgs(param01);
    CHECK_HRESULT(hr, CVisioToolbarItem, putAddOnArgs);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::getAddOnArgs(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbarItem, getAddOnArgs);
    if (NULL!=GetIP())
        hr= GetIP()->get_AddOnArgs(&lpObj);
    CHECK_HRESULT(hr, CVisioToolbarItem, getAddOnArgs);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::putHelpFile(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItem, putHelpFile);
    if (NULL!=GetIP())
        hr= GetIP()->put_HelpFile(param01);
    CHECK_HRESULT(hr, CVisioToolbarItem, putHelpFile);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::getHelpFile(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbarItem, getHelpFile);
    if (NULL!=GetIP())
        hr= GetIP()->get_HelpFile(&lpObj);
    CHECK_HRESULT(hr, CVisioToolbarItem, getHelpFile);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::putCntrlType(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItem, putCntrlType);
    if (NULL!=GetIP())
        hr= GetIP()->put_CntrlType(param01);
    CHECK_HRESULT(hr, CVisioToolbarItem, putCntrlType);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::getCntrlType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItem, getCntrlType);
    if (NULL!=GetIP())
        hr= GetIP()->get_CntrlType(lpRet);
    CHECK_HRESULT(hr, CVisioToolbarItem, getCntrlType);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::putCntrlID(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItem, putCntrlID);
    if (NULL!=GetIP())
        hr= GetIP()->put_CntrlID(param01);
    CHECK_HRESULT(hr, CVisioToolbarItem, putCntrlID);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::getCntrlID(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItem, getCntrlID);
    if (NULL!=GetIP())
        hr= GetIP()->get_CntrlID(lpRet);
    CHECK_HRESULT(hr, CVisioToolbarItem, getCntrlID);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::putTypeSpecific1(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItem, putTypeSpecific1);
    if (NULL!=GetIP())
        hr= GetIP()->put_TypeSpecific1(param01);
    CHECK_HRESULT(hr, CVisioToolbarItem, putTypeSpecific1);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::getTypeSpecific1(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItem, getTypeSpecific1);
    if (NULL!=GetIP())
        hr= GetIP()->get_TypeSpecific1(lpRet);
    CHECK_HRESULT(hr, CVisioToolbarItem, getTypeSpecific1);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::putPriority(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItem, putPriority);
    if (NULL!=GetIP())
        hr= GetIP()->put_Priority(param01);
    CHECK_HRESULT(hr, CVisioToolbarItem, putPriority);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::getPriority(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItem, getPriority);
    if (NULL!=GetIP())
        hr= GetIP()->get_Priority(lpRet);
    CHECK_HRESULT(hr, CVisioToolbarItem, getPriority);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::putSpacing(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItem, putSpacing);
    if (NULL!=GetIP())
        hr= GetIP()->put_Spacing(param01);
    CHECK_HRESULT(hr, CVisioToolbarItem, putSpacing);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::getSpacing(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItem, getSpacing);
    if (NULL!=GetIP())
        hr= GetIP()->get_Spacing(lpRet);
    CHECK_HRESULT(hr, CVisioToolbarItem, getSpacing);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::putTypeSpecific2(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItem, putTypeSpecific2);
    if (NULL!=GetIP())
        hr= GetIP()->put_TypeSpecific2(param01);
    CHECK_HRESULT(hr, CVisioToolbarItem, putTypeSpecific2);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItem::getTypeSpecific2(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItem, getTypeSpecific2);
    if (NULL!=GetIP())
        hr= GetIP()->get_TypeSpecific2(lpRet);
    CHECK_HRESULT(hr, CVisioToolbarItem, getTypeSpecific2);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioIEnumVToolbarItem


//  ***************************************************************************
//  Implementation of class CVisioToolbarItems

VW_INLINE HRESULT CVisioToolbarItems::_NewEnum(IUnknown FAR *FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItems, _NewEnum);
    if (NULL!=GetIP())
        hr= GetIP()->get__NewEnum(lpRet);
    CHECK_HRESULT(hr, CVisioToolbarItems, _NewEnum);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItems::Item(long lIndex, CVisioToolbarItem FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVToolbarItem FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbarItems, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(lIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioToolbarItems, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioToolbarItems::Add(CVisioToolbarItem FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVToolbarItem FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbarItems, Add);
    if (NULL!=GetIP())
        hr= GetIP()->Add(&lpObj);
    CHECK_HRESULT(hr, CVisioToolbarItems, Add);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioToolbarItems::AddAt(long lIndex, CVisioToolbarItem FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVToolbarItem FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbarItems, AddAt);
    if (NULL!=GetIP())
        hr= GetIP()->AddAt(lIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioToolbarItems, AddAt);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioToolbarItems::Count(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarItems, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioToolbarItems, Count);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarItems::Parent(CVisioToolbar FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVToolbar FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbarItems, Parent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Parent(&lpObj);
    CHECK_HRESULT(hr, CVisioToolbarItems, Parent);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioToolbar

VW_INLINE HRESULT CVisioToolbar::Delete()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbar, Delete);
    if (NULL!=GetIP())
        hr= GetIP()->Delete();
    CHECK_HRESULT(hr, CVisioToolbar, Delete);
    return hr;
}


VW_INLINE HRESULT CVisioToolbar::Default(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbar, Default);
    if (NULL!=GetIP())
        hr= GetIP()->get_Default(&lpObj);
    CHECK_HRESULT(hr, CVisioToolbar, Default);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioToolbar::putCaption(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbar, putCaption);
    if (NULL!=GetIP())
        hr= GetIP()->put_Caption(param01);
    CHECK_HRESULT(hr, CVisioToolbar, putCaption);
    return hr;
}


VW_INLINE HRESULT CVisioToolbar::getCaption(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbar, getCaption);
    if (NULL!=GetIP())
        hr= GetIP()->get_Caption(&lpObj);
    CHECK_HRESULT(hr, CVisioToolbar, getCaption);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioToolbar::Index(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbar, Index);
    if (NULL!=GetIP())
        hr= GetIP()->get_Index(lpRet);
    CHECK_HRESULT(hr, CVisioToolbar, Index);
    return hr;
}


VW_INLINE HRESULT CVisioToolbar::ToolbarItems(CVisioToolbarItems FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVToolbarItems FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbar, ToolbarItems);
    if (NULL!=GetIP())
        hr= GetIP()->get_ToolbarItems(&lpObj);
    CHECK_HRESULT(hr, CVisioToolbar, ToolbarItems);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioToolbar::Parent(CVisioToolbars FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVToolbars FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbar, Parent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Parent(&lpObj);
    CHECK_HRESULT(hr, CVisioToolbar, Parent);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioIEnumVToolbar


//  ***************************************************************************
//  Implementation of class CVisioToolbars

VW_INLINE HRESULT CVisioToolbars::_NewEnum(IUnknown FAR *FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbars, _NewEnum);
    if (NULL!=GetIP())
        hr= GetIP()->get__NewEnum(lpRet);
    CHECK_HRESULT(hr, CVisioToolbars, _NewEnum);
    return hr;
}


VW_INLINE HRESULT CVisioToolbars::Item(long lIndex, CVisioToolbar FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVToolbar FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbars, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(lIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioToolbars, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioToolbars::Add(CVisioToolbar FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVToolbar FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbars, Add);
    if (NULL!=GetIP())
        hr= GetIP()->Add(&lpObj);
    CHECK_HRESULT(hr, CVisioToolbars, Add);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioToolbars::AddAt(long lIndex, CVisioToolbar FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVToolbar FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbars, AddAt);
    if (NULL!=GetIP())
        hr= GetIP()->AddAt(lIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioToolbars, AddAt);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioToolbars::Count(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbars, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioToolbars, Count);
    return hr;
}


VW_INLINE HRESULT CVisioToolbars::Parent(CVisioToolbarSet FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVToolbarSet FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbars, Parent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Parent(&lpObj);
    CHECK_HRESULT(hr, CVisioToolbars, Parent);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioToolbarSet

VW_INLINE HRESULT CVisioToolbarSet::Delete()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarSet, Delete);
    if (NULL!=GetIP())
        hr= GetIP()->Delete();
    CHECK_HRESULT(hr, CVisioToolbarSet, Delete);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarSet::Default(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbarSet, Default);
    if (NULL!=GetIP())
        hr= GetIP()->get_Default(&lpObj);
    CHECK_HRESULT(hr, CVisioToolbarSet, Default);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioToolbarSet::putCaption(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarSet, putCaption);
    if (NULL!=GetIP())
        hr= GetIP()->put_Caption(param01);
    CHECK_HRESULT(hr, CVisioToolbarSet, putCaption);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarSet::getCaption(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbarSet, getCaption);
    if (NULL!=GetIP())
        hr= GetIP()->get_Caption(&lpObj);
    CHECK_HRESULT(hr, CVisioToolbarSet, getCaption);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioToolbarSet::SetID(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarSet, SetID);
    if (NULL!=GetIP())
        hr= GetIP()->get_SetID(lpRet);
    CHECK_HRESULT(hr, CVisioToolbarSet, SetID);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarSet::Toolbars(CVisioToolbars FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVToolbars FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbarSet, Toolbars);
    if (NULL!=GetIP())
        hr= GetIP()->get_Toolbars(&lpObj);
    CHECK_HRESULT(hr, CVisioToolbarSet, Toolbars);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioToolbarSet::Parent(CVisioToolbarSets FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVToolbarSets FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbarSet, Parent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Parent(&lpObj);
    CHECK_HRESULT(hr, CVisioToolbarSet, Parent);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioIEnumVToolbarSet


//  ***************************************************************************
//  Implementation of class CVisioToolbarSets

VW_INLINE HRESULT CVisioToolbarSets::_NewEnum(IUnknown FAR *FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarSets, _NewEnum);
    if (NULL!=GetIP())
        hr= GetIP()->get__NewEnum(lpRet);
    CHECK_HRESULT(hr, CVisioToolbarSets, _NewEnum);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarSets::Item(long lIndex, CVisioToolbarSet FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVToolbarSet FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbarSets, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(lIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioToolbarSets, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioToolbarSets::ItemAtID(long lID, CVisioToolbarSet FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVToolbarSet FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbarSets, ItemAtID);
    if (NULL!=GetIP())
        hr= GetIP()->get_ItemAtID(lID, &lpObj);
    CHECK_HRESULT(hr, CVisioToolbarSets, ItemAtID);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioToolbarSets::Add(CVisioToolbarSet FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVToolbarSet FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbarSets, Add);
    if (NULL!=GetIP())
        hr= GetIP()->Add(&lpObj);
    CHECK_HRESULT(hr, CVisioToolbarSets, Add);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioToolbarSets::AddAtID(long lID, CVisioToolbarSet FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVToolbarSet FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbarSets, AddAtID);
    if (NULL!=GetIP())
        hr= GetIP()->AddAtID(lID, &lpObj);
    CHECK_HRESULT(hr, CVisioToolbarSets, AddAtID);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioToolbarSets::Count(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioToolbarSets, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioToolbarSets, Count);
    return hr;
}


VW_INLINE HRESULT CVisioToolbarSets::Parent(CVisioUIObject FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVUIObject FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioToolbarSets, Parent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Parent(&lpObj);
    CHECK_HRESULT(hr, CVisioToolbarSets, Parent);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioStatusBarItem

VW_INLINE HRESULT CVisioStatusBarItem::Delete()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItem, Delete);
    if (NULL!=GetIP())
        hr= GetIP()->Delete();
    CHECK_HRESULT(hr, CVisioStatusBarItem, Delete);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::IconFileName(BSTR_HELPER_CLASS FAR &IconFileName)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItem, IconFileName);
    if (NULL!=GetIP())
        hr= GetIP()->IconFileName(IconFileName);
    CHECK_HRESULT(hr, CVisioStatusBarItem, IconFileName);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::Default(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStatusBarItem, Default);
    if (NULL!=GetIP())
        hr= GetIP()->get_Default(&lpObj);
    CHECK_HRESULT(hr, CVisioStatusBarItem, Default);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::Index(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItem, Index);
    if (NULL!=GetIP())
        hr= GetIP()->get_Index(lpRet);
    CHECK_HRESULT(hr, CVisioStatusBarItem, Index);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::Parent(CVisioStatusBarItems FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVStatusBarItems FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStatusBarItem, Parent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Parent(&lpObj);
    CHECK_HRESULT(hr, CVisioStatusBarItem, Parent);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::putCmdNum(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItem, putCmdNum);
    if (NULL!=GetIP())
        hr= GetIP()->put_CmdNum(param01);
    CHECK_HRESULT(hr, CVisioStatusBarItem, putCmdNum);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::getCmdNum(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItem, getCmdNum);
    if (NULL!=GetIP())
        hr= GetIP()->get_CmdNum(lpRet);
    CHECK_HRESULT(hr, CVisioStatusBarItem, getCmdNum);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::putHelpContextID(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItem, putHelpContextID);
    if (NULL!=GetIP())
        hr= GetIP()->put_HelpContextID(param01);
    CHECK_HRESULT(hr, CVisioStatusBarItem, putHelpContextID);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::getHelpContextID(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItem, getHelpContextID);
    if (NULL!=GetIP())
        hr= GetIP()->get_HelpContextID(lpRet);
    CHECK_HRESULT(hr, CVisioStatusBarItem, getHelpContextID);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::putActionText(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItem, putActionText);
    if (NULL!=GetIP())
        hr= GetIP()->put_ActionText(param01);
    CHECK_HRESULT(hr, CVisioStatusBarItem, putActionText);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::getActionText(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStatusBarItem, getActionText);
    if (NULL!=GetIP())
        hr= GetIP()->get_ActionText(&lpObj);
    CHECK_HRESULT(hr, CVisioStatusBarItem, getActionText);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::putAddOnName(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItem, putAddOnName);
    if (NULL!=GetIP())
        hr= GetIP()->put_AddOnName(param01);
    CHECK_HRESULT(hr, CVisioStatusBarItem, putAddOnName);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::getAddOnName(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStatusBarItem, getAddOnName);
    if (NULL!=GetIP())
        hr= GetIP()->get_AddOnName(&lpObj);
    CHECK_HRESULT(hr, CVisioStatusBarItem, getAddOnName);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::putAddOnArgs(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItem, putAddOnArgs);
    if (NULL!=GetIP())
        hr= GetIP()->put_AddOnArgs(param01);
    CHECK_HRESULT(hr, CVisioStatusBarItem, putAddOnArgs);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::getAddOnArgs(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStatusBarItem, getAddOnArgs);
    if (NULL!=GetIP())
        hr= GetIP()->get_AddOnArgs(&lpObj);
    CHECK_HRESULT(hr, CVisioStatusBarItem, getAddOnArgs);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::putHelpFile(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItem, putHelpFile);
    if (NULL!=GetIP())
        hr= GetIP()->put_HelpFile(param01);
    CHECK_HRESULT(hr, CVisioStatusBarItem, putHelpFile);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::getHelpFile(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStatusBarItem, getHelpFile);
    if (NULL!=GetIP())
        hr= GetIP()->get_HelpFile(&lpObj);
    CHECK_HRESULT(hr, CVisioStatusBarItem, getHelpFile);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::putCntrlType(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItem, putCntrlType);
    if (NULL!=GetIP())
        hr= GetIP()->put_CntrlType(param01);
    CHECK_HRESULT(hr, CVisioStatusBarItem, putCntrlType);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::getCntrlType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItem, getCntrlType);
    if (NULL!=GetIP())
        hr= GetIP()->get_CntrlType(lpRet);
    CHECK_HRESULT(hr, CVisioStatusBarItem, getCntrlType);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::putCntrlID(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItem, putCntrlID);
    if (NULL!=GetIP())
        hr= GetIP()->put_CntrlID(param01);
    CHECK_HRESULT(hr, CVisioStatusBarItem, putCntrlID);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::getCntrlID(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItem, getCntrlID);
    if (NULL!=GetIP())
        hr= GetIP()->get_CntrlID(lpRet);
    CHECK_HRESULT(hr, CVisioStatusBarItem, getCntrlID);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::putTypeSpecific1(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItem, putTypeSpecific1);
    if (NULL!=GetIP())
        hr= GetIP()->put_TypeSpecific1(param01);
    CHECK_HRESULT(hr, CVisioStatusBarItem, putTypeSpecific1);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::getTypeSpecific1(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItem, getTypeSpecific1);
    if (NULL!=GetIP())
        hr= GetIP()->get_TypeSpecific1(lpRet);
    CHECK_HRESULT(hr, CVisioStatusBarItem, getTypeSpecific1);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::putPriority(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItem, putPriority);
    if (NULL!=GetIP())
        hr= GetIP()->put_Priority(param01);
    CHECK_HRESULT(hr, CVisioStatusBarItem, putPriority);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::getPriority(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItem, getPriority);
    if (NULL!=GetIP())
        hr= GetIP()->get_Priority(lpRet);
    CHECK_HRESULT(hr, CVisioStatusBarItem, getPriority);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::putSpacing(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItem, putSpacing);
    if (NULL!=GetIP())
        hr= GetIP()->put_Spacing(param01);
    CHECK_HRESULT(hr, CVisioStatusBarItem, putSpacing);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::getSpacing(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItem, getSpacing);
    if (NULL!=GetIP())
        hr= GetIP()->get_Spacing(lpRet);
    CHECK_HRESULT(hr, CVisioStatusBarItem, getSpacing);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::putTypeSpecific2(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItem, putTypeSpecific2);
    if (NULL!=GetIP())
        hr= GetIP()->put_TypeSpecific2(param01);
    CHECK_HRESULT(hr, CVisioStatusBarItem, putTypeSpecific2);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItem::getTypeSpecific2(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItem, getTypeSpecific2);
    if (NULL!=GetIP())
        hr= GetIP()->get_TypeSpecific2(lpRet);
    CHECK_HRESULT(hr, CVisioStatusBarItem, getTypeSpecific2);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioIEnumVStatusBarItem


//  ***************************************************************************
//  Implementation of class CVisioStatusBarItems

VW_INLINE HRESULT CVisioStatusBarItems::_NewEnum(IUnknown FAR *FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItems, _NewEnum);
    if (NULL!=GetIP())
        hr= GetIP()->get__NewEnum(lpRet);
    CHECK_HRESULT(hr, CVisioStatusBarItems, _NewEnum);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItems::Item(long lIndex, CVisioStatusBarItem FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVStatusBarItem FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStatusBarItems, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(lIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioStatusBarItems, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItems::Add(CVisioStatusBarItem FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVStatusBarItem FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStatusBarItems, Add);
    if (NULL!=GetIP())
        hr= GetIP()->Add(&lpObj);
    CHECK_HRESULT(hr, CVisioStatusBarItems, Add);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItems::AddAt(long lIndex, CVisioStatusBarItem FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVStatusBarItem FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStatusBarItems, AddAt);
    if (NULL!=GetIP())
        hr= GetIP()->AddAt(lIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioStatusBarItems, AddAt);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItems::Count(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBarItems, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioStatusBarItems, Count);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBarItems::Parent(CVisioStatusBar FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVStatusBar FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStatusBarItems, Parent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Parent(&lpObj);
    CHECK_HRESULT(hr, CVisioStatusBarItems, Parent);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioStatusBar

VW_INLINE HRESULT CVisioStatusBar::Delete()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBar, Delete);
    if (NULL!=GetIP())
        hr= GetIP()->Delete();
    CHECK_HRESULT(hr, CVisioStatusBar, Delete);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBar::Default(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStatusBar, Default);
    if (NULL!=GetIP())
        hr= GetIP()->get_Default(&lpObj);
    CHECK_HRESULT(hr, CVisioStatusBar, Default);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioStatusBar::putCaption(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBar, putCaption);
    if (NULL!=GetIP())
        hr= GetIP()->put_Caption(param01);
    CHECK_HRESULT(hr, CVisioStatusBar, putCaption);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBar::getCaption(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStatusBar, getCaption);
    if (NULL!=GetIP())
        hr= GetIP()->get_Caption(&lpObj);
    CHECK_HRESULT(hr, CVisioStatusBar, getCaption);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioStatusBar::SetID(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBar, SetID);
    if (NULL!=GetIP())
        hr= GetIP()->get_SetID(lpRet);
    CHECK_HRESULT(hr, CVisioStatusBar, SetID);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBar::StatusBarItems(CVisioStatusBarItems FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVStatusBarItems FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStatusBar, StatusBarItems);
    if (NULL!=GetIP())
        hr= GetIP()->get_StatusBarItems(&lpObj);
    CHECK_HRESULT(hr, CVisioStatusBar, StatusBarItems);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioStatusBar::Parent(CVisioStatusBars FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVStatusBars FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStatusBar, Parent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Parent(&lpObj);
    CHECK_HRESULT(hr, CVisioStatusBar, Parent);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioIEnumVStatusBar


//  ***************************************************************************
//  Implementation of class CVisioStatusBars

VW_INLINE HRESULT CVisioStatusBars::_NewEnum(IUnknown FAR *FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBars, _NewEnum);
    if (NULL!=GetIP())
        hr= GetIP()->get__NewEnum(lpRet);
    CHECK_HRESULT(hr, CVisioStatusBars, _NewEnum);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBars::Item(long lIndex, CVisioStatusBar FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVStatusBar FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStatusBars, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(lIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioStatusBars, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioStatusBars::ItemAtID(long lID, CVisioStatusBar FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVStatusBar FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStatusBars, ItemAtID);
    if (NULL!=GetIP())
        hr= GetIP()->get_ItemAtID(lID, &lpObj);
    CHECK_HRESULT(hr, CVisioStatusBars, ItemAtID);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioStatusBars::Add(CVisioStatusBar FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVStatusBar FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStatusBars, Add);
    if (NULL!=GetIP())
        hr= GetIP()->Add(&lpObj);
    CHECK_HRESULT(hr, CVisioStatusBars, Add);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioStatusBars::AddAtID(long lID, CVisioStatusBar FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVStatusBar FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStatusBars, AddAtID);
    if (NULL!=GetIP())
        hr= GetIP()->AddAtID(lID, &lpObj);
    CHECK_HRESULT(hr, CVisioStatusBars, AddAtID);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioStatusBars::Count(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioStatusBars, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioStatusBars, Count);
    return hr;
}


VW_INLINE HRESULT CVisioStatusBars::Parent(CVisioUIObject FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVUIObject FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioStatusBars, Parent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Parent(&lpObj);
    CHECK_HRESULT(hr, CVisioStatusBars, Parent);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioAccelItem

VW_INLINE HRESULT CVisioAccelItem::Delete()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAccelItem, Delete);
    if (NULL!=GetIP())
        hr= GetIP()->Delete();
    CHECK_HRESULT(hr, CVisioAccelItem, Delete);
    return hr;
}


VW_INLINE HRESULT CVisioAccelItem::Default(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAccelItem, Default);
    if (NULL!=GetIP())
        hr= GetIP()->get_Default(lpRet);
    CHECK_HRESULT(hr, CVisioAccelItem, Default);
    return hr;
}


VW_INLINE HRESULT CVisioAccelItem::putCmdNum(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAccelItem, putCmdNum);
    if (NULL!=GetIP())
        hr= GetIP()->put_CmdNum(param01);
    CHECK_HRESULT(hr, CVisioAccelItem, putCmdNum);
    return hr;
}


VW_INLINE HRESULT CVisioAccelItem::getCmdNum(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAccelItem, getCmdNum);
    if (NULL!=GetIP())
        hr= GetIP()->get_CmdNum(lpRet);
    CHECK_HRESULT(hr, CVisioAccelItem, getCmdNum);
    return hr;
}


VW_INLINE HRESULT CVisioAccelItem::putKey(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAccelItem, putKey);
    if (NULL!=GetIP())
        hr= GetIP()->put_Key(param01);
    CHECK_HRESULT(hr, CVisioAccelItem, putKey);
    return hr;
}


VW_INLINE HRESULT CVisioAccelItem::getKey(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAccelItem, getKey);
    if (NULL!=GetIP())
        hr= GetIP()->get_Key(lpRet);
    CHECK_HRESULT(hr, CVisioAccelItem, getKey);
    return hr;
}


VW_INLINE HRESULT CVisioAccelItem::putAlt(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAccelItem, putAlt);
    if (NULL!=GetIP())
        hr= GetIP()->put_Alt(param01);
    CHECK_HRESULT(hr, CVisioAccelItem, putAlt);
    return hr;
}


VW_INLINE HRESULT CVisioAccelItem::getAlt(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAccelItem, getAlt);
    if (NULL!=GetIP())
        hr= GetIP()->get_Alt(lpRet);
    CHECK_HRESULT(hr, CVisioAccelItem, getAlt);
    return hr;
}


VW_INLINE HRESULT CVisioAccelItem::putShift(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAccelItem, putShift);
    if (NULL!=GetIP())
        hr= GetIP()->put_Shift(param01);
    CHECK_HRESULT(hr, CVisioAccelItem, putShift);
    return hr;
}


VW_INLINE HRESULT CVisioAccelItem::getShift(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAccelItem, getShift);
    if (NULL!=GetIP())
        hr= GetIP()->get_Shift(lpRet);
    CHECK_HRESULT(hr, CVisioAccelItem, getShift);
    return hr;
}


VW_INLINE HRESULT CVisioAccelItem::putControl(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAccelItem, putControl);
    if (NULL!=GetIP())
        hr= GetIP()->put_Control(param01);
    CHECK_HRESULT(hr, CVisioAccelItem, putControl);
    return hr;
}


VW_INLINE HRESULT CVisioAccelItem::getControl(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAccelItem, getControl);
    if (NULL!=GetIP())
        hr= GetIP()->get_Control(lpRet);
    CHECK_HRESULT(hr, CVisioAccelItem, getControl);
    return hr;
}


VW_INLINE HRESULT CVisioAccelItem::Parent(CVisioAccelItems FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVAccelItems FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioAccelItem, Parent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Parent(&lpObj);
    CHECK_HRESULT(hr, CVisioAccelItem, Parent);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioIEnumVAccelItem


//  ***************************************************************************
//  Implementation of class CVisioAccelItems

VW_INLINE HRESULT CVisioAccelItems::_NewEnum(IUnknown FAR *FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAccelItems, _NewEnum);
    if (NULL!=GetIP())
        hr= GetIP()->get__NewEnum(lpRet);
    CHECK_HRESULT(hr, CVisioAccelItems, _NewEnum);
    return hr;
}


VW_INLINE HRESULT CVisioAccelItems::Item(long lIndex, CVisioAccelItem FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVAccelItem FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioAccelItems, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(lIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioAccelItems, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioAccelItems::Add(CVisioAccelItem FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVAccelItem FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioAccelItems, Add);
    if (NULL!=GetIP())
        hr= GetIP()->Add(&lpObj);
    CHECK_HRESULT(hr, CVisioAccelItems, Add);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioAccelItems::Count(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAccelItems, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioAccelItems, Count);
    return hr;
}


VW_INLINE HRESULT CVisioAccelItems::Parent(CVisioAccelTable FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVAccelTable FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioAccelItems, Parent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Parent(&lpObj);
    CHECK_HRESULT(hr, CVisioAccelItems, Parent);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioAccelTable

VW_INLINE HRESULT CVisioAccelTable::Delete()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAccelTable, Delete);
    if (NULL!=GetIP())
        hr= GetIP()->Delete();
    CHECK_HRESULT(hr, CVisioAccelTable, Delete);
    return hr;
}


VW_INLINE HRESULT CVisioAccelTable::Default(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioAccelTable, Default);
    if (NULL!=GetIP())
        hr= GetIP()->get_Default(&lpObj);
    CHECK_HRESULT(hr, CVisioAccelTable, Default);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioAccelTable::putTableName(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAccelTable, putTableName);
    if (NULL!=GetIP())
        hr= GetIP()->put_TableName(param01);
    CHECK_HRESULT(hr, CVisioAccelTable, putTableName);
    return hr;
}


VW_INLINE HRESULT CVisioAccelTable::getTableName(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioAccelTable, getTableName);
    if (NULL!=GetIP())
        hr= GetIP()->get_TableName(&lpObj);
    CHECK_HRESULT(hr, CVisioAccelTable, getTableName);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioAccelTable::SetID(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAccelTable, SetID);
    if (NULL!=GetIP())
        hr= GetIP()->get_SetID(lpRet);
    CHECK_HRESULT(hr, CVisioAccelTable, SetID);
    return hr;
}


VW_INLINE HRESULT CVisioAccelTable::AccelItems(CVisioAccelItems FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVAccelItems FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioAccelTable, AccelItems);
    if (NULL!=GetIP())
        hr= GetIP()->get_AccelItems(&lpObj);
    CHECK_HRESULT(hr, CVisioAccelTable, AccelItems);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioAccelTable::Parent(CVisioAccelTables FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVAccelTables FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioAccelTable, Parent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Parent(&lpObj);
    CHECK_HRESULT(hr, CVisioAccelTable, Parent);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioIEnumVAccelTable


//  ***************************************************************************
//  Implementation of class CVisioAccelTables

VW_INLINE HRESULT CVisioAccelTables::_NewEnum(IUnknown FAR *FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAccelTables, _NewEnum);
    if (NULL!=GetIP())
        hr= GetIP()->get__NewEnum(lpRet);
    CHECK_HRESULT(hr, CVisioAccelTables, _NewEnum);
    return hr;
}


VW_INLINE HRESULT CVisioAccelTables::Item(long lIndex, CVisioAccelTable FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVAccelTable FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioAccelTables, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(lIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioAccelTables, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioAccelTables::ItemAtID(long lID, CVisioAccelTable FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVAccelTable FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioAccelTables, ItemAtID);
    if (NULL!=GetIP())
        hr= GetIP()->get_ItemAtID(lID, &lpObj);
    CHECK_HRESULT(hr, CVisioAccelTables, ItemAtID);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioAccelTables::Add(CVisioAccelTable FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVAccelTable FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioAccelTables, Add);
    if (NULL!=GetIP())
        hr= GetIP()->Add(&lpObj);
    CHECK_HRESULT(hr, CVisioAccelTables, Add);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioAccelTables::AddAtID(long lID, CVisioAccelTable FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVAccelTable FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioAccelTables, AddAtID);
    if (NULL!=GetIP())
        hr= GetIP()->AddAtID(lID, &lpObj);
    CHECK_HRESULT(hr, CVisioAccelTables, AddAtID);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioAccelTables::Count(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAccelTables, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioAccelTables, Count);
    return hr;
}


VW_INLINE HRESULT CVisioAccelTables::Parent(CVisioUIObject FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVUIObject FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioAccelTables, Parent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Parent(&lpObj);
    CHECK_HRESULT(hr, CVisioAccelTables, Parent);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioUIObject

VW_INLINE HRESULT CVisioUIObject::Delete()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioUIObject, Delete);
    if (NULL!=GetIP())
        hr= GetIP()->Delete();
    CHECK_HRESULT(hr, CVisioUIObject, Delete);
    return hr;
}


VW_INLINE HRESULT CVisioUIObject::Default(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioUIObject, Default);
    if (NULL!=GetIP())
        hr= GetIP()->get_Default(&lpObj);
    CHECK_HRESULT(hr, CVisioUIObject, Default);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioUIObject::putName(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioUIObject, putName);
    if (NULL!=GetIP())
        hr= GetIP()->put_Name(param01);
    CHECK_HRESULT(hr, CVisioUIObject, putName);
    return hr;
}


VW_INLINE HRESULT CVisioUIObject::getName(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioUIObject, getName);
    if (NULL!=GetIP())
        hr= GetIP()->get_Name(&lpObj);
    CHECK_HRESULT(hr, CVisioUIObject, getName);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioUIObject::putFlavor(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioUIObject, putFlavor);
    if (NULL!=GetIP())
        hr= GetIP()->put_Flavor(param01);
    CHECK_HRESULT(hr, CVisioUIObject, putFlavor);
    return hr;
}


VW_INLINE HRESULT CVisioUIObject::getFlavor(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioUIObject, getFlavor);
    if (NULL!=GetIP())
        hr= GetIP()->get_Flavor(lpRet);
    CHECK_HRESULT(hr, CVisioUIObject, getFlavor);
    return hr;
}


VW_INLINE HRESULT CVisioUIObject::MenuSets(CVisioMenuSets FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMenuSets FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioUIObject, MenuSets);
    if (NULL!=GetIP())
        hr= GetIP()->get_MenuSets(&lpObj);
    CHECK_HRESULT(hr, CVisioUIObject, MenuSets);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioUIObject::ToolbarSets(CVisioToolbarSets FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVToolbarSets FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioUIObject, ToolbarSets);
    if (NULL!=GetIP())
        hr= GetIP()->get_ToolbarSets(&lpObj);
    CHECK_HRESULT(hr, CVisioUIObject, ToolbarSets);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioUIObject::StatusBars(CVisioStatusBars FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVStatusBars FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioUIObject, StatusBars);
    if (NULL!=GetIP())
        hr= GetIP()->get_StatusBars(&lpObj);
    CHECK_HRESULT(hr, CVisioUIObject, StatusBars);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioUIObject::AccelTables(CVisioAccelTables FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVAccelTables FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioUIObject, AccelTables);
    if (NULL!=GetIP())
        hr= GetIP()->get_AccelTables(&lpObj);
    CHECK_HRESULT(hr, CVisioUIObject, AccelTables);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioUIObject::SaveToFile(BSTR_HELPER_CLASS FAR &FileName)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioUIObject, SaveToFile);
    if (NULL!=GetIP())
        hr= GetIP()->SaveToFile(FileName);
    CHECK_HRESULT(hr, CVisioUIObject, SaveToFile);
    return hr;
}


VW_INLINE HRESULT CVisioUIObject::LoadFromFile(BSTR_HELPER_CLASS FAR &FileName)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioUIObject, LoadFromFile);
    if (NULL!=GetIP())
        hr= GetIP()->LoadFromFile(FileName);
    CHECK_HRESULT(hr, CVisioUIObject, LoadFromFile);
    return hr;
}


VW_INLINE HRESULT CVisioUIObject::UpdateUI()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioUIObject, UpdateUI);
    if (NULL!=GetIP())
        hr= GetIP()->UpdateUI();
    CHECK_HRESULT(hr, CVisioUIObject, UpdateUI);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioHyperlink

VW_INLINE HRESULT CVisioHyperlink::getDescription(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioHyperlink, getDescription);
    if (NULL!=GetIP())
        hr= GetIP()->get_Description(&lpObj);
    CHECK_HRESULT(hr, CVisioHyperlink, getDescription);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioHyperlink::putDescription(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioHyperlink, putDescription);
    if (NULL!=GetIP())
        hr= GetIP()->put_Description(param01);
    CHECK_HRESULT(hr, CVisioHyperlink, putDescription);
    return hr;
}


VW_INLINE HRESULT CVisioHyperlink::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioHyperlink, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioHyperlink, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioHyperlink::Shape(CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioHyperlink, Shape);
    if (NULL!=GetIP())
        hr= GetIP()->get_Shape(&lpObj);
    CHECK_HRESULT(hr, CVisioHyperlink, Shape);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioHyperlink::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioHyperlink, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioHyperlink, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioHyperlink::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioHyperlink, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioHyperlink, Stat);
    return hr;
}


VW_INLINE HRESULT CVisioHyperlink::getAddress(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioHyperlink, getAddress);
    if (NULL!=GetIP())
        hr= GetIP()->get_Address(&lpObj);
    CHECK_HRESULT(hr, CVisioHyperlink, getAddress);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioHyperlink::putAddress(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioHyperlink, putAddress);
    if (NULL!=GetIP())
        hr= GetIP()->put_Address(param01);
    CHECK_HRESULT(hr, CVisioHyperlink, putAddress);
    return hr;
}


VW_INLINE HRESULT CVisioHyperlink::getSubAddress(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioHyperlink, getSubAddress);
    if (NULL!=GetIP())
        hr= GetIP()->get_SubAddress(&lpObj);
    CHECK_HRESULT(hr, CVisioHyperlink, getSubAddress);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioHyperlink::putSubAddress(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioHyperlink, putSubAddress);
    if (NULL!=GetIP())
        hr= GetIP()->put_SubAddress(param01);
    CHECK_HRESULT(hr, CVisioHyperlink, putSubAddress);
    return hr;
}


VW_INLINE HRESULT CVisioHyperlink::getNewWindow(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioHyperlink, getNewWindow);
    if (NULL!=GetIP())
        hr= GetIP()->get_NewWindow(lpRet);
    CHECK_HRESULT(hr, CVisioHyperlink, getNewWindow);
    return hr;
}


VW_INLINE HRESULT CVisioHyperlink::putNewWindow(VW_CONST short param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioHyperlink, putNewWindow);
    if (NULL!=GetIP())
        hr= GetIP()->put_NewWindow(param01);
    CHECK_HRESULT(hr, CVisioHyperlink, putNewWindow);
    return hr;
}


VW_INLINE HRESULT CVisioHyperlink::getExtraInfo(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioHyperlink, getExtraInfo);
    if (NULL!=GetIP())
        hr= GetIP()->get_ExtraInfo(&lpObj);
    CHECK_HRESULT(hr, CVisioHyperlink, getExtraInfo);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioHyperlink::putExtraInfo(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioHyperlink, putExtraInfo);
    if (NULL!=GetIP())
        hr= GetIP()->put_ExtraInfo(param01);
    CHECK_HRESULT(hr, CVisioHyperlink, putExtraInfo);
    return hr;
}


VW_INLINE HRESULT CVisioHyperlink::getFrame(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioHyperlink, getFrame);
    if (NULL!=GetIP())
        hr= GetIP()->get_Frame(&lpObj);
    CHECK_HRESULT(hr, CVisioHyperlink, getFrame);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioHyperlink::putFrame(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioHyperlink, putFrame);
    if (NULL!=GetIP())
        hr= GetIP()->put_Frame(param01);
    CHECK_HRESULT(hr, CVisioHyperlink, putFrame);
    return hr;
}


VW_INLINE HRESULT CVisioHyperlink::AddToFavorites(VARIANT_HELPER_CLASS FAR &FavoritesTitle)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioHyperlink, AddToFavorites);
    if (NULL!=GetIP())
        hr= GetIP()->AddToFavorites(FavoritesTitle);
    CHECK_HRESULT(hr, CVisioHyperlink, AddToFavorites);
    return hr;
}


VW_INLINE HRESULT CVisioHyperlink::Follow()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioHyperlink, Follow);
    if (NULL!=GetIP())
        hr= GetIP()->Follow();
    CHECK_HRESULT(hr, CVisioHyperlink, Follow);
    return hr;
}


VW_INLINE HRESULT CVisioHyperlink::Delete()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioHyperlink, Delete);
    if (NULL!=GetIP())
        hr= GetIP()->Delete();
    CHECK_HRESULT(hr, CVisioHyperlink, Delete);
    return hr;
}


VW_INLINE HRESULT CVisioHyperlink::Copy()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioHyperlink, Copy);
    if (NULL!=GetIP())
        hr= GetIP()->Copy();
    CHECK_HRESULT(hr, CVisioHyperlink, Copy);
    return hr;
}


VW_INLINE HRESULT CVisioHyperlink::CreateURL(short CanonicalForm, BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioHyperlink, CreateURL);
    if (NULL!=GetIP())
        hr= GetIP()->CreateURL(CanonicalForm, &lpObj);
    CHECK_HRESULT(hr, CVisioHyperlink, CreateURL);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioOLEObjects

VW_INLINE HRESULT CVisioOLEObjects::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioOLEObjects, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioOLEObjects, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioOLEObjects::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioOLEObjects, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioOLEObjects, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioOLEObjects::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioOLEObjects, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioOLEObjects, Stat);
    return hr;
}


VW_INLINE HRESULT CVisioOLEObjects::Item(VARIANT_HELPER_CLASS FAR &NameOrIndex, CVisioOLEObject FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVOLEObject FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioOLEObjects, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(NameOrIndex, &lpObj);
    CHECK_HRESULT(hr, CVisioOLEObjects, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioOLEObjects::Count(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioOLEObjects, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioOLEObjects, Count);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioOLEObject

VW_INLINE HRESULT CVisioOLEObject::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioOLEObject, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioOLEObject, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioOLEObject::Shape(CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioOLEObject, Shape);
    if (NULL!=GetIP())
        hr= GetIP()->get_Shape(&lpObj);
    CHECK_HRESULT(hr, CVisioOLEObject, Shape);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioOLEObject::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioOLEObject, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioOLEObject, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioOLEObject::Stat(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioOLEObject, Stat);
    if (NULL!=GetIP())
        hr= GetIP()->get_Stat(lpRet);
    CHECK_HRESULT(hr, CVisioOLEObject, Stat);
    return hr;
}


VW_INLINE HRESULT CVisioOLEObject::ClassID(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioOLEObject, ClassID);
    if (NULL!=GetIP())
        hr= GetIP()->get_ClassID(&lpObj);
    CHECK_HRESULT(hr, CVisioOLEObject, ClassID);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioOLEObject::ProgID(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioOLEObject, ProgID);
    if (NULL!=GetIP())
        hr= GetIP()->get_ProgID(&lpObj);
    CHECK_HRESULT(hr, CVisioOLEObject, ProgID);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioOLEObject::ForeignType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioOLEObject, ForeignType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ForeignType(lpRet);
    CHECK_HRESULT(hr, CVisioOLEObject, ForeignType);
    return hr;
}


VW_INLINE HRESULT CVisioOLEObject::Object(IDispatch FAR *FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioOLEObject, Object);
    if (NULL!=GetIP())
        hr= GetIP()->get_Object(lpRet);
    CHECK_HRESULT(hr, CVisioOLEObject, Object);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioPaths

VW_INLINE HRESULT CVisioPaths::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPaths, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioPaths, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPaths::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPaths, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioPaths, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioPaths::Item(short Index, CVisioPath FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVPath FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPaths, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(Index, &lpObj);
    CHECK_HRESULT(hr, CVisioPaths, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPaths::Count(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPaths, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioPaths, Count);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioPath

VW_INLINE HRESULT CVisioPath::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPath, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioPath, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPath::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPath, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioPath, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioPath::Item(short Index, CVisioCurve FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVCurve FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioPath, Item);
    if (NULL!=GetIP())
        hr= GetIP()->get_Item(Index, &lpObj);
    CHECK_HRESULT(hr, CVisioPath, Item);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioPath::Count(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPath, Count);
    if (NULL!=GetIP())
        hr= GetIP()->get_Count(lpRet);
    CHECK_HRESULT(hr, CVisioPath, Count);
    return hr;
}


VW_INLINE HRESULT CVisioPath::Closed(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPath, Closed);
    if (NULL!=GetIP())
        hr= GetIP()->get_Closed(lpRet);
    CHECK_HRESULT(hr, CVisioPath, Closed);
    return hr;
}


VW_INLINE HRESULT CVisioPath::Points(double Tolerance, /*double*/ SAFEARRAY FAR * FAR *xyArray)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioPath, Points);
    if (NULL!=GetIP())
        hr= GetIP()->Points(Tolerance, xyArray);
    CHECK_HRESULT(hr, CVisioPath, Points);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioCurve

VW_INLINE HRESULT CVisioCurve::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioCurve, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioCurve, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioCurve::ObjectType(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCurve, ObjectType);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectType(lpRet);
    CHECK_HRESULT(hr, CVisioCurve, ObjectType);
    return hr;
}


VW_INLINE HRESULT CVisioCurve::Closed(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCurve, Closed);
    if (NULL!=GetIP())
        hr= GetIP()->get_Closed(lpRet);
    CHECK_HRESULT(hr, CVisioCurve, Closed);
    return hr;
}


VW_INLINE HRESULT CVisioCurve::Points(double Tolerance, /*double*/ SAFEARRAY FAR * FAR *xyArray)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCurve, Points);
    if (NULL!=GetIP())
        hr= GetIP()->Points(Tolerance, xyArray);
    CHECK_HRESULT(hr, CVisioCurve, Points);
    return hr;
}


VW_INLINE HRESULT CVisioCurve::Start(double FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCurve, Start);
    if (NULL!=GetIP())
        hr= GetIP()->get_Start(lpRet);
    CHECK_HRESULT(hr, CVisioCurve, Start);
    return hr;
}


VW_INLINE HRESULT CVisioCurve::End(double FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCurve, End);
    if (NULL!=GetIP())
        hr= GetIP()->get_End(lpRet);
    CHECK_HRESULT(hr, CVisioCurve, End);
    return hr;
}


VW_INLINE HRESULT CVisioCurve::Point(double t, double FAR *x, double FAR *y)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCurve, Point);
    if (NULL!=GetIP())
        hr= GetIP()->Point(t, x, y);
    CHECK_HRESULT(hr, CVisioCurve, Point);
    return hr;
}


VW_INLINE HRESULT CVisioCurve::PointAndDerivatives(double t, short n, double FAR *x, double FAR *y, double FAR *dxdt, double FAR *dydt, double FAR *ddxdt, double FAR *ddydt)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioCurve, PointAndDerivatives);
    if (NULL!=GetIP())
        hr= GetIP()->PointAndDerivatives(t, n, x, y, dxdt, dydt, ddxdt, ddydt);
    CHECK_HRESULT(hr, CVisioCurve, PointAndDerivatives);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioExtender

VW_INLINE HRESULT CVisioExtender::getName(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, getName);
    if (NULL!=GetIP())
        hr= GetIP()->get_Name(&lpObj);
    CHECK_HRESULT(hr, CVisioExtender, getName);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioExtender::putName(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, putName);
    if (NULL!=GetIP())
        hr= GetIP()->put_Name(param01);
    CHECK_HRESULT(hr, CVisioExtender, putName);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::Object(IUnknown FAR *FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, Object);
    if (NULL!=GetIP())
        hr= GetIP()->get_Object(lpRet);
    CHECK_HRESULT(hr, CVisioExtender, Object);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::Parent(IUnknown FAR *FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, Parent);
    if (NULL!=GetIP())
        hr= GetIP()->get_Parent(lpRet);
    CHECK_HRESULT(hr, CVisioExtender, Parent);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::Delete()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, Delete);
    if (NULL!=GetIP())
        hr= GetIP()->Delete();
    CHECK_HRESULT(hr, CVisioExtender, Delete);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::Index()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, Index);
    if (NULL!=GetIP())
        hr= GetIP()->Index();
    CHECK_HRESULT(hr, CVisioExtender, Index);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::Shape(CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, Shape);
    if (NULL!=GetIP())
        hr= GetIP()->get_Shape(&lpObj);
    CHECK_HRESULT(hr, CVisioExtender, Shape);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioExtender::Group()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, Group);
    if (NULL!=GetIP())
        hr= GetIP()->Group();
    CHECK_HRESULT(hr, CVisioExtender, Group);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::BringForward()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, BringForward);
    if (NULL!=GetIP())
        hr= GetIP()->BringForward();
    CHECK_HRESULT(hr, CVisioExtender, BringForward);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::BringToFront()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, BringToFront);
    if (NULL!=GetIP())
        hr= GetIP()->BringToFront();
    CHECK_HRESULT(hr, CVisioExtender, BringToFront);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::ConvertToGroup()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, ConvertToGroup);
    if (NULL!=GetIP())
        hr= GetIP()->ConvertToGroup();
    CHECK_HRESULT(hr, CVisioExtender, ConvertToGroup);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::SendBackward()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, SendBackward);
    if (NULL!=GetIP())
        hr= GetIP()->SendBackward();
    CHECK_HRESULT(hr, CVisioExtender, SendBackward);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::SendToBack()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, SendToBack);
    if (NULL!=GetIP())
        hr= GetIP()->SendToBack();
    CHECK_HRESULT(hr, CVisioExtender, SendToBack);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::Document(CVisioDocument FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVDocument FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, Document);
    if (NULL!=GetIP())
        hr= GetIP()->get_Document(&lpObj);
    CHECK_HRESULT(hr, CVisioExtender, Document);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioExtender::ShapeParent(IDispatch FAR *FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, ShapeParent);
    if (NULL!=GetIP())
        hr= GetIP()->get_ShapeParent(lpRet);
    CHECK_HRESULT(hr, CVisioExtender, ShapeParent);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::Application(CVisioApplication FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVApplication FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, Application);
    if (NULL!=GetIP())
        hr= GetIP()->get_Application(&lpObj);
    CHECK_HRESULT(hr, CVisioExtender, Application);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioExtender::Master(CVisioMaster FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMaster FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, Master);
    if (NULL!=GetIP())
        hr= GetIP()->get_Master(&lpObj);
    CHECK_HRESULT(hr, CVisioExtender, Master);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioExtender::Cells(BSTR_HELPER_CLASS FAR &CellName, CVisioCell FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVCell FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, Cells);
    if (NULL!=GetIP())
        hr= GetIP()->get_Cells(CellName, &lpObj);
    CHECK_HRESULT(hr, CVisioExtender, Cells);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioExtender::CellsSRC(short Section, short Row, short Column, CVisioCell FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVCell FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, CellsSRC);
    if (NULL!=GetIP())
        hr= GetIP()->get_CellsSRC(Section, Row, Column, &lpObj);
    CHECK_HRESULT(hr, CVisioExtender, CellsSRC);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioExtender::getData1(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, getData1);
    if (NULL!=GetIP())
        hr= GetIP()->get_Data1(&lpObj);
    CHECK_HRESULT(hr, CVisioExtender, getData1);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioExtender::putData1(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, putData1);
    if (NULL!=GetIP())
        hr= GetIP()->put_Data1(param01);
    CHECK_HRESULT(hr, CVisioExtender, putData1);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::getData2(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, getData2);
    if (NULL!=GetIP())
        hr= GetIP()->get_Data2(&lpObj);
    CHECK_HRESULT(hr, CVisioExtender, getData2);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioExtender::putData2(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, putData2);
    if (NULL!=GetIP())
        hr= GetIP()->put_Data2(param01);
    CHECK_HRESULT(hr, CVisioExtender, putData2);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::getData3(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, getData3);
    if (NULL!=GetIP())
        hr= GetIP()->get_Data3(&lpObj);
    CHECK_HRESULT(hr, CVisioExtender, getData3);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioExtender::putData3(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, putData3);
    if (NULL!=GetIP())
        hr= GetIP()->put_Data3(param01);
    CHECK_HRESULT(hr, CVisioExtender, putData3);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::getHelp(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, getHelp);
    if (NULL!=GetIP())
        hr= GetIP()->get_Help(&lpObj);
    CHECK_HRESULT(hr, CVisioExtender, getHelp);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioExtender::putHelp(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, putHelp);
    if (NULL!=GetIP())
        hr= GetIP()->put_Help(param01);
    CHECK_HRESULT(hr, CVisioExtender, putHelp);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::NameID(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, NameID);
    if (NULL!=GetIP())
        hr= GetIP()->get_NameID(&lpObj);
    CHECK_HRESULT(hr, CVisioExtender, NameID);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioExtender::ShapeCopy()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, ShapeCopy);
    if (NULL!=GetIP())
        hr= GetIP()->ShapeCopy();
    CHECK_HRESULT(hr, CVisioExtender, ShapeCopy);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::ShapeCut()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, ShapeCut);
    if (NULL!=GetIP())
        hr= GetIP()->ShapeCut();
    CHECK_HRESULT(hr, CVisioExtender, ShapeCut);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::ShapeDelete()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, ShapeDelete);
    if (NULL!=GetIP())
        hr= GetIP()->ShapeDelete();
    CHECK_HRESULT(hr, CVisioExtender, ShapeDelete);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::ShapeDuplicate()
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, ShapeDuplicate);
    if (NULL!=GetIP())
        hr= GetIP()->ShapeDuplicate();
    CHECK_HRESULT(hr, CVisioExtender, ShapeDuplicate);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::RowCount(short Section, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, RowCount);
    if (NULL!=GetIP())
        hr= GetIP()->get_RowCount(Section, lpRet);
    CHECK_HRESULT(hr, CVisioExtender, RowCount);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::AddSection(short Section, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, AddSection);
    if (NULL!=GetIP())
        hr= GetIP()->AddSection(Section, lpRet);
    CHECK_HRESULT(hr, CVisioExtender, AddSection);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::DeleteSection(short Section)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, DeleteSection);
    if (NULL!=GetIP())
        hr= GetIP()->DeleteSection(Section);
    CHECK_HRESULT(hr, CVisioExtender, DeleteSection);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::AddRow(short Section, short Row, short RowTag, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, AddRow);
    if (NULL!=GetIP())
        hr= GetIP()->AddRow(Section, Row, RowTag, lpRet);
    CHECK_HRESULT(hr, CVisioExtender, AddRow);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::DeleteRow(short Section, short Row)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, DeleteRow);
    if (NULL!=GetIP())
        hr= GetIP()->DeleteRow(Section, Row);
    CHECK_HRESULT(hr, CVisioExtender, DeleteRow);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::RowsCellCount(short Section, short Row, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, RowsCellCount);
    if (NULL!=GetIP())
        hr= GetIP()->get_RowsCellCount(Section, Row, lpRet);
    CHECK_HRESULT(hr, CVisioExtender, RowsCellCount);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::getRowType(short Section, short Row, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, getRowType);
    if (NULL!=GetIP())
        hr= GetIP()->get_RowType(Section, Row, lpRet);
    CHECK_HRESULT(hr, CVisioExtender, getRowType);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::putRowType(VW_CONST short Section, VW_CONST short Row, VW_CONST short param03)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, putRowType);
    if (NULL!=GetIP())
        hr= GetIP()->put_RowType(Section, Row, param03);
    CHECK_HRESULT(hr, CVisioExtender, putRowType);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::SetCenter(double xPos, double yPos)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, SetCenter);
    if (NULL!=GetIP())
        hr= GetIP()->SetCenter(xPos, yPos);
    CHECK_HRESULT(hr, CVisioExtender, SetCenter);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::Connects(CVisioConnects FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVConnects FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, Connects);
    if (NULL!=GetIP())
        hr= GetIP()->get_Connects(&lpObj);
    CHECK_HRESULT(hr, CVisioExtender, Connects);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioExtender::ShapeIndex(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, ShapeIndex);
    if (NULL!=GetIP())
        hr= GetIP()->get_ShapeIndex(lpRet);
    CHECK_HRESULT(hr, CVisioExtender, ShapeIndex);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::getStyle(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, getStyle);
    if (NULL!=GetIP())
        hr= GetIP()->get_Style(&lpObj);
    CHECK_HRESULT(hr, CVisioExtender, getStyle);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioExtender::putStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, putStyle);
    if (NULL!=GetIP())
        hr= GetIP()->put_Style(param01);
    CHECK_HRESULT(hr, CVisioExtender, putStyle);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::StyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, StyleKeepFmt);
    if (NULL!=GetIP())
        hr= GetIP()->put_StyleKeepFmt(param01);
    CHECK_HRESULT(hr, CVisioExtender, StyleKeepFmt);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::getLineStyle(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, getLineStyle);
    if (NULL!=GetIP())
        hr= GetIP()->get_LineStyle(&lpObj);
    CHECK_HRESULT(hr, CVisioExtender, getLineStyle);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioExtender::putLineStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, putLineStyle);
    if (NULL!=GetIP())
        hr= GetIP()->put_LineStyle(param01);
    CHECK_HRESULT(hr, CVisioExtender, putLineStyle);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::LineStyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, LineStyleKeepFmt);
    if (NULL!=GetIP())
        hr= GetIP()->put_LineStyleKeepFmt(param01);
    CHECK_HRESULT(hr, CVisioExtender, LineStyleKeepFmt);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::getFillStyle(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, getFillStyle);
    if (NULL!=GetIP())
        hr= GetIP()->get_FillStyle(&lpObj);
    CHECK_HRESULT(hr, CVisioExtender, getFillStyle);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioExtender::putFillStyle(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, putFillStyle);
    if (NULL!=GetIP())
        hr= GetIP()->put_FillStyle(param01);
    CHECK_HRESULT(hr, CVisioExtender, putFillStyle);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::FillStyleKeepFmt(VW_CONST BSTR_HELPER_CLASS FAR &param01)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, FillStyleKeepFmt);
    if (NULL!=GetIP())
        hr= GetIP()->put_FillStyleKeepFmt(param01);
    CHECK_HRESULT(hr, CVisioExtender, FillStyleKeepFmt);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::Export(BSTR_HELPER_CLASS FAR &FileName)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, Export);
    if (NULL!=GetIP())
        hr= GetIP()->Export(FileName);
    CHECK_HRESULT(hr, CVisioExtender, Export);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::UniqueID(short fUniqueID, BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, UniqueID);
    if (NULL!=GetIP())
        hr= GetIP()->get_UniqueID(fUniqueID, &lpObj);
    CHECK_HRESULT(hr, CVisioExtender, UniqueID);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioExtender::ContainingPage(CVisioPage FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVPage FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, ContainingPage);
    if (NULL!=GetIP())
        hr= GetIP()->get_ContainingPage(&lpObj);
    CHECK_HRESULT(hr, CVisioExtender, ContainingPage);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioExtender::ContainingMaster(CVisioMaster FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVMaster FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, ContainingMaster);
    if (NULL!=GetIP())
        hr= GetIP()->get_ContainingMaster(&lpObj);
    CHECK_HRESULT(hr, CVisioExtender, ContainingMaster);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioExtender::ContainingShape(CVisioShape FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVShape FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, ContainingShape);
    if (NULL!=GetIP())
        hr= GetIP()->get_ContainingShape(&lpObj);
    CHECK_HRESULT(hr, CVisioExtender, ContainingShape);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioExtender::SectionExists(short Section, short fLocalExists, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, SectionExists);
    if (NULL!=GetIP())
        hr= GetIP()->get_SectionExists(Section, fLocalExists, lpRet);
    CHECK_HRESULT(hr, CVisioExtender, SectionExists);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::RowExists(short Section, short Row, short fLocalExists, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, RowExists);
    if (NULL!=GetIP())
        hr= GetIP()->get_RowExists(Section, Row, fLocalExists, lpRet);
    CHECK_HRESULT(hr, CVisioExtender, RowExists);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::CellExists(BSTR_HELPER_CLASS FAR &CellName, short fLocalExists, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, CellExists);
    if (NULL!=GetIP())
        hr= GetIP()->get_CellExists(CellName, fLocalExists, lpRet);
    CHECK_HRESULT(hr, CVisioExtender, CellExists);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::CellsSRCExists(short Section, short Row, short Column, short fLocalExists, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, CellsSRCExists);
    if (NULL!=GetIP())
        hr= GetIP()->get_CellsSRCExists(Section, Row, Column, fLocalExists, lpRet);
    CHECK_HRESULT(hr, CVisioExtender, CellsSRCExists);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::LayerCount(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, LayerCount);
    if (NULL!=GetIP())
        hr= GetIP()->get_LayerCount(lpRet);
    CHECK_HRESULT(hr, CVisioExtender, LayerCount);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::Layer(short Index, CVisioLayer FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVLayer FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, Layer);
    if (NULL!=GetIP())
        hr= GetIP()->get_Layer(Index, &lpObj);
    CHECK_HRESULT(hr, CVisioExtender, Layer);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioExtender::AddNamedRow(short Section, BSTR_HELPER_CLASS FAR &RowName, short RowTag, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, AddNamedRow);
    if (NULL!=GetIP())
        hr= GetIP()->AddNamedRow(Section, RowName, RowTag, lpRet);
    CHECK_HRESULT(hr, CVisioExtender, AddNamedRow);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::AddRows(short Section, short Row, short RowTag, short RowCount, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, AddRows);
    if (NULL!=GetIP())
        hr= GetIP()->AddRows(Section, Row, RowTag, RowCount, lpRet);
    CHECK_HRESULT(hr, CVisioExtender, AddRows);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::EventList(CVisioEventList FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVEventList FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, EventList);
    if (NULL!=GetIP())
        hr= GetIP()->get_EventList(&lpObj);
    CHECK_HRESULT(hr, CVisioExtender, EventList);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioExtender::PersistsEvents(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, PersistsEvents);
    if (NULL!=GetIP())
        hr= GetIP()->get_PersistsEvents(lpRet);
    CHECK_HRESULT(hr, CVisioExtender, PersistsEvents);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::ClassID(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, ClassID);
    if (NULL!=GetIP())
        hr= GetIP()->get_ClassID(&lpObj);
    CHECK_HRESULT(hr, CVisioExtender, ClassID);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioExtender::ShapeObject(IDispatch FAR *FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, ShapeObject);
    if (NULL!=GetIP())
        hr= GetIP()->get_ShapeObject(lpRet);
    CHECK_HRESULT(hr, CVisioExtender, ShapeObject);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::OpenSheetWindow(CVisioWindow FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVWindow FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, OpenSheetWindow);
    if (NULL!=GetIP())
        hr= GetIP()->OpenSheetWindow(&lpObj);
    CHECK_HRESULT(hr, CVisioExtender, OpenSheetWindow);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioExtender::ShapeID(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, ShapeID);
    if (NULL!=GetIP())
        hr= GetIP()->get_ShapeID(lpRet);
    CHECK_HRESULT(hr, CVisioExtender, ShapeID);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::GetFormulas(/*short*/ SAFEARRAY FAR * FAR *SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *formulaArray)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, GetFormulas);
    if (NULL!=GetIP())
        hr= GetIP()->GetFormulas(SRCStream, formulaArray);
    CHECK_HRESULT(hr, CVisioExtender, GetFormulas);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::GetResults(/*short*/ SAFEARRAY FAR * FAR *SRCStream, short Flags, /*VARIANT*/ SAFEARRAY FAR * FAR *UnitsNamesOrCodes, /*VARIANT*/ SAFEARRAY FAR * FAR *resultArray)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, GetResults);
    if (NULL!=GetIP())
        hr= GetIP()->GetResults(SRCStream, Flags, UnitsNamesOrCodes, resultArray);
    CHECK_HRESULT(hr, CVisioExtender, GetResults);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::SetFormulas(/*short*/ SAFEARRAY FAR * FAR *SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *formulaArray, short Flags, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, SetFormulas);
    if (NULL!=GetIP())
        hr= GetIP()->SetFormulas(SRCStream, formulaArray, Flags, lpRet);
    CHECK_HRESULT(hr, CVisioExtender, SetFormulas);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::SetResults(/*short*/ SAFEARRAY FAR * FAR *SRCStream, /*VARIANT*/ SAFEARRAY FAR * FAR *UnitsNamesOrCodes, /*VARIANT*/ SAFEARRAY FAR * FAR *resultArray, short Flags, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, SetResults);
    if (NULL!=GetIP())
        hr= GetIP()->SetResults(SRCStream, UnitsNamesOrCodes, resultArray, Flags, lpRet);
    CHECK_HRESULT(hr, CVisioExtender, SetResults);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::FromConnects(CVisioConnects FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVConnects FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, FromConnects);
    if (NULL!=GetIP())
        hr= GetIP()->get_FromConnects(&lpObj);
    CHECK_HRESULT(hr, CVisioExtender, FromConnects);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioExtender::BoundingBox(short Flags, double FAR *lpr8Left, double FAR *lpr8Bottom, double FAR *lpr8Right, double FAR *lpr8Top)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, BoundingBox);
    if (NULL!=GetIP())
        hr= GetIP()->BoundingBox(Flags, lpr8Left, lpr8Bottom, lpr8Right, lpr8Top);
    CHECK_HRESULT(hr, CVisioExtender, BoundingBox);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::HitTest(double xPos, double yPos, double Tolerance, short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, HitTest);
    if (NULL!=GetIP())
        hr= GetIP()->HitTest(xPos, yPos, Tolerance, lpRet);
    CHECK_HRESULT(hr, CVisioExtender, HitTest);
    return hr;
}


VW_INLINE HRESULT CVisioExtender::Hyperlink(CVisioHyperlink FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    IVHyperlink FAR *lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, Hyperlink);
    if (NULL!=GetIP())
        hr= GetIP()->get_Hyperlink(&lpObj);
    CHECK_HRESULT(hr, CVisioExtender, Hyperlink);

    rWrap= lpObj;
    if (NULL!=lpObj)
        lpObj->Release();

    return hr;
}


VW_INLINE HRESULT CVisioExtender::ProgID(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioExtender, ProgID);
    if (NULL!=GetIP())
        hr= GetIP()->get_ProgID(&lpObj);
    CHECK_HRESULT(hr, CVisioExtender, ProgID);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioExtender::ObjectIsInherited(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioExtender, ObjectIsInherited);
    if (NULL!=GetIP())
        hr= GetIP()->get_ObjectIsInherited(lpRet);
    CHECK_HRESULT(hr, CVisioExtender, ObjectIsInherited);
    return hr;
}



//  ***************************************************************************
//  Implementation of class CVisioDispExtender


//  ***************************************************************************
//  Implementation of class CVisioAmbients

VW_INLINE HRESULT CVisioAmbients::BackColor(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAmbients, BackColor);
    if (NULL!=GetIP())
        hr= GetIP()->get_BackColor(lpRet);
    CHECK_HRESULT(hr, CVisioAmbients, BackColor);
    return hr;
}


VW_INLINE HRESULT CVisioAmbients::DisplayName(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioAmbients, DisplayName);
    if (NULL!=GetIP())
        hr= GetIP()->get_DisplayName(&lpObj);
    CHECK_HRESULT(hr, CVisioAmbients, DisplayName);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioAmbients::Font(IDispatch FAR *FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAmbients, Font);
    if (NULL!=GetIP())
        hr= GetIP()->get_Font(lpRet);
    CHECK_HRESULT(hr, CVisioAmbients, Font);
    return hr;
}


VW_INLINE HRESULT CVisioAmbients::ForeColor(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAmbients, ForeColor);
    if (NULL!=GetIP())
        hr= GetIP()->get_ForeColor(lpRet);
    CHECK_HRESULT(hr, CVisioAmbients, ForeColor);
    return hr;
}


VW_INLINE HRESULT CVisioAmbients::LocaleID(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAmbients, LocaleID);
    if (NULL!=GetIP())
        hr= GetIP()->get_LocaleID(lpRet);
    CHECK_HRESULT(hr, CVisioAmbients, LocaleID);
    return hr;
}


VW_INLINE HRESULT CVisioAmbients::MessageReflect(VARIANT_BOOL FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAmbients, MessageReflect);
    if (NULL!=GetIP())
        hr= GetIP()->get_MessageReflect(lpRet);
    CHECK_HRESULT(hr, CVisioAmbients, MessageReflect);
    return hr;
}


VW_INLINE HRESULT CVisioAmbients::ScaleUnits(BSTR_HELPER_CLASS FAR &rWrap)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    BSTR lpObj= NULL;

    CHECK_IP(GetIP(), CVisioAmbients, ScaleUnits);
    if (NULL!=GetIP())
        hr= GetIP()->get_ScaleUnits(&lpObj);
    CHECK_HRESULT(hr, CVisioAmbients, ScaleUnits);

    rWrap= lpObj;
#ifndef NO_BSTR_HELPER
    if (NULL!=lpObj)
        SysFreeString(lpObj);
#endif  //  NO_BSTR_HELPER

    return hr;
}


VW_INLINE HRESULT CVisioAmbients::TextAlign(short FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAmbients, TextAlign);
    if (NULL!=GetIP())
        hr= GetIP()->get_TextAlign(lpRet);
    CHECK_HRESULT(hr, CVisioAmbients, TextAlign);
    return hr;
}


VW_INLINE HRESULT CVisioAmbients::UserMode(VARIANT_BOOL FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAmbients, UserMode);
    if (NULL!=GetIP())
        hr= GetIP()->get_UserMode(lpRet);
    CHECK_HRESULT(hr, CVisioAmbients, UserMode);
    return hr;
}


VW_INLINE HRESULT CVisioAmbients::UIDead(VARIANT_BOOL FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAmbients, UIDead);
    if (NULL!=GetIP())
        hr= GetIP()->get_UIDead(lpRet);
    CHECK_HRESULT(hr, CVisioAmbients, UIDead);
    return hr;
}


VW_INLINE HRESULT CVisioAmbients::ShowGrabHandles(VARIANT_BOOL FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAmbients, ShowGrabHandles);
    if (NULL!=GetIP())
        hr= GetIP()->get_ShowGrabHandles(lpRet);
    CHECK_HRESULT(hr, CVisioAmbients, ShowGrabHandles);
    return hr;
}


VW_INLINE HRESULT CVisioAmbients::ShowHatching(VARIANT_BOOL FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAmbients, ShowHatching);
    if (NULL!=GetIP())
        hr= GetIP()->get_ShowHatching(lpRet);
    CHECK_HRESULT(hr, CVisioAmbients, ShowHatching);
    return hr;
}


VW_INLINE HRESULT CVisioAmbients::DisplayAsDefault(VARIANT_BOOL FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAmbients, DisplayAsDefault);
    if (NULL!=GetIP())
        hr= GetIP()->get_DisplayAsDefault(lpRet);
    CHECK_HRESULT(hr, CVisioAmbients, DisplayAsDefault);
    return hr;
}


VW_INLINE HRESULT CVisioAmbients::SupportsMnemonics(VARIANT_BOOL FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAmbients, SupportsMnemonics);
    if (NULL!=GetIP())
        hr= GetIP()->get_SupportsMnemonics(lpRet);
    CHECK_HRESULT(hr, CVisioAmbients, SupportsMnemonics);
    return hr;
}


VW_INLINE HRESULT CVisioAmbients::AutoClip(VARIANT_BOOL FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAmbients, AutoClip);
    if (NULL!=GetIP())
        hr= GetIP()->get_AutoClip(lpRet);
    CHECK_HRESULT(hr, CVisioAmbients, AutoClip);
    return hr;
}


VW_INLINE HRESULT CVisioAmbients::Appearance(long FAR *lpRet)
{
    HRESULT hr= VW_INTERFACE_NOT_SET;
    CHECK_IP(GetIP(), CVisioAmbients, Appearance);
    if (NULL!=GetIP())
        hr= GetIP()->get_Appearance(lpRet);
    CHECK_HRESULT(hr, CVisioAmbients, Appearance);
    return hr;
}



//  ***************************************************************************
//  'Trailer'

//  Start D:\ml\bat\trailer.vis
//
//	VAO_* return codes && vaoGetObject prototype
#include "ivisreg.h"

//
//	Easy way to start things up:
VW_INLINE short vaoGetObjectWrap(CVisioApplication FAR &cVisApp)
{
	//	Calling this function with a local CVisioApplication
	//	will get the active Visio or launch a new one...

	short s;
	LPVISIOAPPLICATION pApp= NULL;

	s= vaoGetObject(&pApp);

	cVisApp= pApp;
	if (pApp!=NULL)
		pApp->Release();

	return s;
}

//  End D:\ml\bat\trailer.vis


//  ***************************************************************************
//  #endif for 'Sentinel'

#endif //  _Visiwrap_H

/*

Copyright (c) 1995 Expersoft Corporation.  All Rights Reserved.  

Unlimited use, reproduction, and distribution of this software is
permitted.  Any copy of this software must include both the above
copyright notice of Expersoft Corporation and this paragraph.  Any
distribution of this software must comply with all applicable United
States export control laws.  This software is made available AS IS,
and EXPERSOFT CORPORATION DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED,
INCLUDING WITHOUT LIMITATION THE IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE, AND NOTWITHSTANDING ANY OTHER
PROVISION CONTAINED HEREIN, ANY LIABILITY FOR DAMAGES RESULTING FROM
THE SOFTWARE OR ITS USE IS EXPRESSLY DISCLAIMED, WHETHER ARISING IN
CONTRACT, TORT (INCLUDING NEGLIGENCE) OR STRICT LIABILITY, EVEN IF
EXPERSOFT CORPORATION IS ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

*/

#ifndef STORE_IDL
#define STORE_IDL

// include interface definition for Point Of Sale objects
#include "POS.idl"

module AStore
{
   enum ItemTypes {food, clothes, other};
   typedef long AStoreId;

   struct ItemInfo
   {
      POS::Barcode      Item;
      ItemTypes         Itemtype;
      float             Itemcost;
      string            Name;
      long              Quantity;
   };

   // The barcodeNotFound exception indicates that the
   // input barcode does not match to any known item.
   exception BarcodeNotFound { POS::Barcode item; };

   interface StoreAccess; // /forward reference

   struct POSInfo
   {
        POS::POSId   Id;
        StoreAccess  StoreAccessReference;
        float        TotalSales;
        float        TotalTaxes;
   };

   typedef sequence <POSInfo> POSList;

   interface Tax
   {
      float CalculateTax(in float           TaxableAmount);
      float FindTaxablePrice(in float       ItemPrice,
                             in ItemTypes   ItemType);
   };

   interface Store
   {
        struct StoreTotals
        {
           float     StoreTotal;
           float     StoreTaxTotal;
        };

        readonly attribute AStoreId StoreId;

        // The struct StoreTotals and this readonly attribute are used
        // in place of a pair of float attributes to avoid data inconsistencies
        // that would result from the following sequence of operations:
        //
        //    POS 1 invokes a method to read StoreTotal
        //    POS 2 invokes the method UpdateStoreTotals
        //    POS 1 invoikes a method to read the StoreTaxTotal
        readonly attribute StoreTotals Totals;

        StoreAccess Login(in POS::POSId Id);
        void      GetPOSTotals(out POSList POSData);
        void      UpdateStoreTotals(
                      in POS::POSId Id,
                      in float      Price,
                      in float      Taxes);
   };

   interface StoreAccess
   {
      // ItemTaxPrice is 0 or return value of FindTaxablePrice()
      void      FindPrice(
                      in  POS::Barcode Item,
                      in  long         Quantity,
                      out float        ItemPrice,
                      out float        ItemTaxPrice,
                      out ItemInfo     IInfo)
         raises (BarcodeNotFound);
   };

};
#endif
